{"mappings":"C,A,kC;A,uC;A,E;A,2D;A,E;A,4D;A,wD;A,S,C,C,C,C,C,C,C,C,C,E,2B,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,0D;A,+D;A,8B;A,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,E,gE;A,6D;A,+D;A,gC;A,G,E,O,E,E,C,E,+C;A,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,qD;A,yE;A,I,E,E,E,Y;A,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,C,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCiVA,EAAA,MAAA,CAAA,EAAA,UAAA,IACE,GAlVF,IAAA,EAAA,EAAA,wBACA,EAAA,EAAA,qCACA,EAAA,EAAA,MACA,EAAA,EAAA,yBACA,EAAA,EAAA,uBACA,EAAA,aACA,EAAA,SACA,EAAA,2BACA,EAAA,aACA,EAAA,UACA,EAAA,wBACA,EAAA,UACA,EAAA,wBACA,EAAA,kCACA,EAAA,oCACA,EAAA,uBACA,EAAA,4BACA,EAAA,4BACA,EAAA,yBACA,IAAM,EAAc,OACd,EAAwB,gBAOxB,EAAc,eAEd,EAAoB,GAAG,SAA0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","sources":["<anon>","node_modules/mermaid/dist/stateDiagram-v2-6371a76b.js","node_modules/mermaid/dist/svgDraw-0fcc813d.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"9WmCf\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"diagram\", ()=>diagram);\nvar _stylesFa41Df25Js = require(\"./styles-fa41df25.js\");\nvar _indexJs = require(\"dagre-d3-es/src/graphlib/index.js\");\nvar _d3 = require(\"d3\");\nvar _mermaidB0Ad2De1Js = require(\"./mermaid-b0ad2de1.js\");\nvar _indexA92Ac404Js = require(\"./index-a92ac404.js\");\nvar _tsDedent = require(\"ts-dedent\");\nvar _dayjs = require(\"dayjs\");\nvar _sanitizeUrl = require(\"@braintree/sanitize-url\");\nvar _dompurify = require(\"dompurify\");\nvar _khroma = require(\"khroma\");\nvar _memoizeJs = require(\"lodash-es/memoize.js\");\nvar _stylis = require(\"stylis\");\nvar _isEmptyJs = require(\"lodash-es/isEmpty.js\");\nvar _indexJs1 = require(\"dagre-d3-es/src/dagre/index.js\");\nvar _jsonJs = require(\"dagre-d3-es/src/graphlib/json.js\");\nvar _edges49Ac43A2Js = require(\"./edges-49ac43a2.js\");\nvar _createText3Df630B5Js = require(\"./createText-3df630b5.js\");\nvar _mdastUtilFromMarkdown = require(\"mdast-util-from-markdown\");\nvar _svgDraw0Fcc813DJs = require(\"./svgDraw-0fcc813d.js\");\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n    const keys = Object.keys(cnf);\n    for (const key of keys)cnf[key];\n};\nconst getClasses = function(text, diagramObj) {\n    (0, _mermaidB0Ad2De1Js.l).trace(\"Extracting classes\");\n    diagramObj.db.clear();\n    try {\n        diagramObj.parser.parse(text);\n        diagramObj.db.extract(diagramObj.db.getRootDocV2());\n        return diagramObj.db.getClasses();\n    } catch (e) {\n        return e;\n    }\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n    if (dbInfoItem === void 0 || dbInfoItem === null) return \"\";\n    else {\n        if (dbInfoItem.classes) return dbInfoItem.classes.join(\" \");\n        else return \"\";\n    }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n    const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n    return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag)=>{\n    const itemId = parsedItem.id;\n    const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n    if (itemId !== \"root\") {\n        let shape = SHAPE_STATE;\n        if (parsedItem.start === true) shape = SHAPE_START;\n        if (parsedItem.start === false) shape = SHAPE_END;\n        if (parsedItem.type !== (0, _stylesFa41Df25Js.D)) shape = parsedItem.type;\n        if (!nodeDb[itemId]) nodeDb[itemId] = {\n            id: itemId,\n            shape,\n            description: (0, _mermaidB0Ad2De1Js.e).sanitizeText(itemId, (0, _mermaidB0Ad2De1Js.c)()),\n            classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n        };\n        const newNode = nodeDb[itemId];\n        if (parsedItem.description) {\n            if (Array.isArray(newNode.description)) {\n                newNode.shape = SHAPE_STATE_WITH_DESC;\n                newNode.description.push(parsedItem.description);\n            } else if (newNode.description.length > 0) {\n                newNode.shape = SHAPE_STATE_WITH_DESC;\n                if (newNode.description === itemId) newNode.description = [\n                    parsedItem.description\n                ];\n                else newNode.description = [\n                    newNode.description,\n                    parsedItem.description\n                ];\n            } else {\n                newNode.shape = SHAPE_STATE;\n                newNode.description = parsedItem.description;\n            }\n            newNode.description = (0, _mermaidB0Ad2De1Js.e).sanitizeTextOrArray(newNode.description, (0, _mermaidB0Ad2De1Js.c)());\n        }\n        if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) newNode.shape = SHAPE_STATE;\n        if (!newNode.type && parsedItem.doc) {\n            (0, _mermaidB0Ad2De1Js.l).info(\"Setting cluster for \", itemId, getDir(parsedItem));\n            newNode.type = \"group\";\n            newNode.dir = getDir(parsedItem);\n            newNode.shape = parsedItem.type === (0, _stylesFa41Df25Js.a) ? SHAPE_DIVIDER : SHAPE_GROUP;\n            newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n        }\n        const nodeData = {\n            labelStyle: \"\",\n            shape: newNode.shape,\n            labelText: newNode.description,\n            // typeof newNode.description === 'object'\n            //   ? newNode.description[0]\n            //   : newNode.description,\n            classes: newNode.classes,\n            style: \"\",\n            //styles.style,\n            id: itemId,\n            dir: newNode.dir,\n            domId: stateDomId(itemId, graphItemCount),\n            type: newNode.type,\n            padding: 15\n        };\n        nodeData.centerLabel = true;\n        if (parsedItem.note) {\n            const noteData = {\n                labelStyle: \"\",\n                shape: SHAPE_NOTE,\n                labelText: parsedItem.note.text,\n                classes: CSS_DIAGRAM_NOTE,\n                // useHtmlLabels: false,\n                style: \"\",\n                // styles.style,\n                id: itemId + NOTE_ID + \"-\" + graphItemCount,\n                domId: stateDomId(itemId, graphItemCount, NOTE),\n                type: newNode.type,\n                padding: 15\n            };\n            const groupData = {\n                labelStyle: \"\",\n                shape: SHAPE_NOTEGROUP,\n                labelText: parsedItem.note.text,\n                classes: newNode.classes,\n                style: \"\",\n                // styles.style,\n                id: itemId + PARENT_ID,\n                domId: stateDomId(itemId, graphItemCount, PARENT),\n                type: \"group\",\n                padding: 0\n            };\n            graphItemCount++;\n            const parentNodeId = itemId + PARENT_ID;\n            g.setNode(parentNodeId, groupData);\n            g.setNode(noteData.id, noteData);\n            g.setNode(itemId, nodeData);\n            g.setParent(itemId, parentNodeId);\n            g.setParent(noteData.id, parentNodeId);\n            let from = itemId;\n            let to = noteData.id;\n            if (parsedItem.note.position === \"left of\") {\n                from = noteData.id;\n                to = itemId;\n            }\n            g.setEdge(from, to, {\n                arrowhead: \"none\",\n                arrowType: \"\",\n                style: G_EDGE_STYLE,\n                labelStyle: \"\",\n                classes: CSS_EDGE_NOTE_EDGE,\n                arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n                labelpos: G_EDGE_LABELPOS,\n                labelType: G_EDGE_LABELTYPE,\n                thickness: G_EDGE_THICKNESS\n            });\n        } else g.setNode(itemId, nodeData);\n    }\n    if (parent && parent.id !== \"root\") {\n        (0, _mermaidB0Ad2De1Js.l).trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n        g.setParent(itemId, parent.id);\n    }\n    if (parsedItem.doc) {\n        (0, _mermaidB0Ad2De1Js.l).trace(\"Adding nodes children \");\n        setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n    }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag)=>{\n    (0, _mermaidB0Ad2De1Js.l).trace(\"items\", doc);\n    doc.forEach((item)=>{\n        switch(item.stmt){\n            case 0, _stylesFa41Df25Js.b:\n                setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n                break;\n            case 0, _stylesFa41Df25Js.D:\n                setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n                break;\n            case 0, _stylesFa41Df25Js.S:\n                {\n                    setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n                    setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n                    const edgeData = {\n                        id: \"edge\" + graphItemCount,\n                        arrowhead: \"normal\",\n                        arrowTypeEnd: \"arrow_barb\",\n                        style: G_EDGE_STYLE,\n                        labelStyle: \"\",\n                        label: (0, _mermaidB0Ad2De1Js.e).sanitizeText(item.description, (0, _mermaidB0Ad2De1Js.c)()),\n                        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n                        labelpos: G_EDGE_LABELPOS,\n                        labelType: G_EDGE_LABELTYPE,\n                        thickness: G_EDGE_THICKNESS,\n                        classes: CSS_EDGE\n                    };\n                    g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n                    graphItemCount++;\n                }\n                break;\n        }\n    });\n};\nconst getDir = (parsedItem, defaultDir = (0, _stylesFa41Df25Js.c))=>{\n    let dir = defaultDir;\n    if (parsedItem.doc) for(let i = 0; i < parsedItem.doc.length; i++){\n        const parsedItemDoc = parsedItem.doc[i];\n        if (parsedItemDoc.stmt === \"dir\") dir = parsedItemDoc.value;\n    }\n    return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n    (0, _mermaidB0Ad2De1Js.l).info(\"Drawing state diagram (v2)\", id);\n    nodeDb = {};\n    diag.db.getDirection();\n    const { securityLevel , state: conf  } = (0, _mermaidB0Ad2De1Js.c)();\n    const nodeSpacing = conf.nodeSpacing || 50;\n    const rankSpacing = conf.rankSpacing || 50;\n    (0, _mermaidB0Ad2De1Js.l).info(diag.db.getRootDocV2());\n    diag.db.extract(diag.db.getRootDocV2());\n    (0, _mermaidB0Ad2De1Js.l).info(diag.db.getRootDocV2());\n    const diagramStates = diag.db.getStates();\n    const g = new _indexJs.Graph({\n        multigraph: true,\n        compound: true\n    }).setGraph({\n        rankdir: getDir(diag.db.getRootDocV2()),\n        nodesep: nodeSpacing,\n        ranksep: rankSpacing,\n        marginx: 8,\n        marginy: 8\n    }).setDefaultEdgeLabel(function() {\n        return {};\n    });\n    setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n    let sandboxElement;\n    if (securityLevel === \"sandbox\") sandboxElement = (0, _d3.select)(\"#i\" + id);\n    const root = securityLevel === \"sandbox\" ? (0, _d3.select)(sandboxElement.nodes()[0].contentDocument.body) : (0, _d3.select)(\"body\");\n    const svg = root.select(`[id=\"${id}\"]`);\n    const element = root.select(\"#\" + id + \" g\");\n    await (0, _indexA92Ac404Js.r)(element, g, [\n        \"barb\"\n    ], CSS_DIAGRAM, id);\n    const padding = 8;\n    (0, _mermaidB0Ad2De1Js.u).insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n    const bounds = svg.node().getBBox();\n    const width = bounds.width + padding * 2;\n    const height = bounds.height + padding * 2;\n    svg.attr(\"class\", CSS_DIAGRAM);\n    const svgBounds = svg.node().getBBox();\n    (0, _mermaidB0Ad2De1Js.i)(svg, height, width, conf.useMaxWidth);\n    const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n    (0, _mermaidB0Ad2De1Js.l).debug(`viewBox ${vBox}`);\n    svg.attr(\"viewBox\", vBox);\n    const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels){\n        const dim = label.getBBox();\n        const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n        rect.setAttribute(\"rx\", 0);\n        rect.setAttribute(\"ry\", 0);\n        rect.setAttribute(\"width\", dim.width);\n        rect.setAttribute(\"height\", dim.height);\n        label.insertBefore(rect, label.firstChild);\n    }\n};\nconst renderer = {\n    setConf,\n    getClasses,\n    draw\n};\nconst diagram = {\n    parser: (0, _stylesFa41Df25Js.p),\n    db: (0, _stylesFa41Df25Js.d),\n    renderer,\n    styles: (0, _stylesFa41Df25Js.s),\n    init: (cnf)=>{\n        if (!cnf.state) cnf.state = {};\n        cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n        (0, _stylesFa41Df25Js.d).clear();\n    }\n};\n\n},{\"./styles-fa41df25.js\":\"i5tjy\",\"dagre-d3-es/src/graphlib/index.js\":\"j6NXy\",\"d3\":\"ahWNw\",\"./mermaid-b0ad2de1.js\":\"42V0c\",\"./index-a92ac404.js\":\"39ufq\",\"ts-dedent\":\"azOLv\",\"dayjs\":\"8F3kd\",\"@braintree/sanitize-url\":\"eIPUt\",\"dompurify\":\"5cPaM\",\"khroma\":\"kb6Zw\",\"lodash-es/memoize.js\":\"kSZfU\",\"stylis\":\"lfeQC\",\"lodash-es/isEmpty.js\":\"941eg\",\"dagre-d3-es/src/dagre/index.js\":\"9xp7T\",\"dagre-d3-es/src/graphlib/json.js\":\"5pdrN\",\"./edges-49ac43a2.js\":\"ayTP7\",\"./createText-3df630b5.js\":\"590AZ\",\"mdast-util-from-markdown\":\"i9FLz\",\"./svgDraw-0fcc813d.js\":\"6Yaxn\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"6Yaxn\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"p\", ()=>parseMember);\nparcelHelpers.export(exports, \"s\", ()=>svgDraw);\nvar _d3 = require(\"d3\");\nvar _mermaidB0Ad2De1Js = require(\"./mermaid-b0ad2de1.js\");\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation, conf, diagObj) {\n    const getRelationType = function(type) {\n        switch(type){\n            case diagObj.db.relationType.AGGREGATION:\n                return \"aggregation\";\n            case diagObj.db.relationType.EXTENSION:\n                return \"extension\";\n            case diagObj.db.relationType.COMPOSITION:\n                return \"composition\";\n            case diagObj.db.relationType.DEPENDENCY:\n                return \"dependency\";\n            case diagObj.db.relationType.LOLLIPOP:\n                return \"lollipop\";\n        }\n    };\n    path.points = path.points.filter((p)=>!Number.isNaN(p.y));\n    const lineData = path.points;\n    const lineFunction = (0, _d3.line)().x(function(d) {\n        return d.x;\n    }).y(function(d) {\n        return d.y;\n    }).curve((0, _d3.curveBasis));\n    const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"relation\");\n    let url = \"\";\n    if (conf.arrowMarkerAbsolute) {\n        url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n        url = url.replace(/\\(/g, \"\\\\(\");\n        url = url.replace(/\\)/g, \"\\\\)\");\n    }\n    if (relation.relation.lineType == 1) svgPath.attr(\"class\", \"relation dashed-line\");\n    if (relation.relation.lineType == 10) svgPath.attr(\"class\", \"relation dotted-line\");\n    if (relation.relation.type1 !== \"none\") svgPath.attr(\"marker-start\", \"url(\" + url + \"#\" + getRelationType(relation.relation.type1) + \"Start)\");\n    if (relation.relation.type2 !== \"none\") svgPath.attr(\"marker-end\", \"url(\" + url + \"#\" + getRelationType(relation.relation.type2) + \"End)\");\n    let x, y;\n    const l = path.points.length;\n    let labelPosition = (0, _mermaidB0Ad2De1Js.u).calcLabelPosition(path.points);\n    x = labelPosition.x;\n    y = labelPosition.y;\n    let p1_card_x, p1_card_y;\n    let p2_card_x, p2_card_y;\n    if (l % 2 !== 0 && l > 1) {\n        let cardinality_1_point = (0, _mermaidB0Ad2De1Js.u).calcCardinalityPosition(relation.relation.type1 !== \"none\", path.points, path.points[0]);\n        let cardinality_2_point = (0, _mermaidB0Ad2De1Js.u).calcCardinalityPosition(relation.relation.type2 !== \"none\", path.points, path.points[l - 1]);\n        (0, _mermaidB0Ad2De1Js.l).debug(\"cardinality_1_point \" + JSON.stringify(cardinality_1_point));\n        (0, _mermaidB0Ad2De1Js.l).debug(\"cardinality_2_point \" + JSON.stringify(cardinality_2_point));\n        p1_card_x = cardinality_1_point.x;\n        p1_card_y = cardinality_1_point.y;\n        p2_card_x = cardinality_2_point.x;\n        p2_card_y = cardinality_2_point.y;\n    }\n    if (relation.title !== void 0) {\n        const g = elem.append(\"g\").attr(\"class\", \"classLabel\");\n        const label = g.append(\"text\").attr(\"class\", \"label\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", \"red\").attr(\"text-anchor\", \"middle\").text(relation.title);\n        window.label = label;\n        const bounds = label.node().getBBox();\n        g.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", bounds.x - conf.padding / 2).attr(\"y\", bounds.y - conf.padding / 2).attr(\"width\", bounds.width + conf.padding).attr(\"height\", bounds.height + conf.padding);\n    }\n    (0, _mermaidB0Ad2De1Js.l).info(\"Rendering relation \" + JSON.stringify(relation));\n    if (relation.relationTitle1 !== void 0 && relation.relationTitle1 !== \"none\") {\n        const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n        g.append(\"text\").attr(\"class\", \"type1\").attr(\"x\", p1_card_x).attr(\"y\", p1_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle1);\n    }\n    if (relation.relationTitle2 !== void 0 && relation.relationTitle2 !== \"none\") {\n        const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n        g.append(\"text\").attr(\"class\", \"type2\").attr(\"x\", p2_card_x).attr(\"y\", p2_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle2);\n    }\n    edgeCount++;\n};\nconst drawClass = function(elem, classDef, conf, diagObj) {\n    (0, _mermaidB0Ad2De1Js.l).debug(\"Rendering class \", classDef, conf);\n    const id = classDef.id;\n    const classInfo = {\n        id,\n        label: classDef.id,\n        width: 0,\n        height: 0\n    };\n    const g = elem.append(\"g\").attr(\"id\", diagObj.db.lookUpDomId(id)).attr(\"class\", \"classGroup\");\n    let title;\n    if (classDef.link) title = g.append(\"svg:a\").attr(\"xlink:href\", classDef.link).attr(\"target\", classDef.linkTarget).append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n    else title = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n    let isFirst = true;\n    classDef.annotations.forEach(function(member) {\n        const titleText2 = title.append(\"tspan\").text(\"\\xab\" + member + \"\\xbb\");\n        if (!isFirst) titleText2.attr(\"dy\", conf.textHeight);\n        isFirst = false;\n    });\n    let classTitleString = getClassTitleString(classDef);\n    const classTitle = title.append(\"tspan\").text(classTitleString).attr(\"class\", \"title\");\n    if (!isFirst) classTitle.attr(\"dy\", conf.textHeight);\n    const titleHeight = title.node().getBBox().height;\n    const membersLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin / 2).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin / 2);\n    const members = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + conf.dividerMargin + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n    isFirst = true;\n    classDef.members.forEach(function(member) {\n        addTspan(members, member, isFirst, conf);\n        isFirst = false;\n    });\n    const membersBox = members.node().getBBox();\n    const methodsLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n    const methods = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n    isFirst = true;\n    classDef.methods.forEach(function(method) {\n        addTspan(methods, method, isFirst, conf);\n        isFirst = false;\n    });\n    const classBox = g.node().getBBox();\n    var cssClassStr = \" \";\n    if (classDef.cssClasses.length > 0) cssClassStr = cssClassStr + classDef.cssClasses.join(\" \");\n    const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", classBox.width + 2 * conf.padding).attr(\"height\", classBox.height + conf.padding + 0.5 * conf.dividerMargin).attr(\"class\", cssClassStr);\n    const rectWidth = rect.node().getBBox().width;\n    title.node().childNodes.forEach(function(x) {\n        x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n    });\n    if (classDef.tooltip) title.insert(\"title\").text(classDef.tooltip);\n    membersLine.attr(\"x2\", rectWidth);\n    methodsLine.attr(\"x2\", rectWidth);\n    classInfo.width = rectWidth;\n    classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n    return classInfo;\n};\nconst getClassTitleString = function(classDef) {\n    let classTitleString = classDef.id;\n    if (classDef.type) classTitleString += \"<\" + classDef.type + \">\";\n    return classTitleString;\n};\nconst drawNote = function(elem, note, conf, diagObj) {\n    (0, _mermaidB0Ad2De1Js.l).debug(\"Rendering note \", note, conf);\n    const id = note.id;\n    const noteInfo = {\n        id,\n        text: note.text,\n        width: 0,\n        height: 0\n    };\n    const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"classGroup\");\n    let text = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n    const lines = JSON.parse(`\"${note.text}\"`).split(\"\\n\");\n    lines.forEach(function(line2) {\n        (0, _mermaidB0Ad2De1Js.l).debug(`Adding line: ${line2}`);\n        text.append(\"tspan\").text(line2).attr(\"class\", \"title\").attr(\"dy\", conf.textHeight);\n    });\n    const noteBox = g.node().getBBox();\n    const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", noteBox.width + 2 * conf.padding).attr(\"height\", noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin);\n    const rectWidth = rect.node().getBBox().width;\n    text.node().childNodes.forEach(function(x) {\n        x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n    });\n    noteInfo.width = rectWidth;\n    noteInfo.height = noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n    return noteInfo;\n};\nconst parseMember = function(text) {\n    let displayText = \"\";\n    let cssStyle = \"\";\n    let returnType = \"\";\n    let visibility = \"\";\n    let firstChar = text.substring(0, 1);\n    let lastChar = text.substring(text.length - 1, text.length);\n    if (firstChar.match(/[#+~-]/)) visibility = firstChar;\n    let noClassifierRe = /[\\s\\w)~]/;\n    if (!lastChar.match(noClassifierRe)) cssStyle = parseClassifier(lastChar);\n    const startIndex = visibility === \"\" ? 0 : 1;\n    let endIndex = cssStyle === \"\" ? text.length : text.length - 1;\n    text = text.substring(startIndex, endIndex);\n    const methodStart = text.indexOf(\"(\");\n    const methodEnd = text.indexOf(\")\");\n    const isMethod = methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length;\n    if (isMethod) {\n        let methodName = text.substring(0, methodStart).trim();\n        const parameters = text.substring(methodStart + 1, methodEnd);\n        displayText = visibility + methodName + \"(\" + (0, _mermaidB0Ad2De1Js.x)(parameters.trim()) + \")\";\n        if (methodEnd < text.length) {\n            let potentialClassifier = text.substring(methodEnd + 1, methodEnd + 2);\n            if (cssStyle === \"\" && !potentialClassifier.match(noClassifierRe)) {\n                cssStyle = parseClassifier(potentialClassifier);\n                returnType = text.substring(methodEnd + 2).trim();\n            } else returnType = text.substring(methodEnd + 1).trim();\n            if (returnType !== \"\") {\n                if (returnType.charAt(0) === \":\") returnType = returnType.substring(1).trim();\n                returnType = \" : \" + (0, _mermaidB0Ad2De1Js.x)(returnType);\n                displayText += returnType;\n            }\n        }\n    } else displayText = visibility + (0, _mermaidB0Ad2De1Js.x)(text);\n    return {\n        displayText,\n        cssStyle\n    };\n};\nconst addTspan = function(textEl, txt, isFirst, conf) {\n    let member = parseMember(txt);\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", conf.padding).text(member.displayText);\n    if (member.cssStyle !== \"\") tSpan.attr(\"style\", member.cssStyle);\n    if (!isFirst) tSpan.attr(\"dy\", conf.textHeight);\n};\nconst parseClassifier = function(classifier) {\n    switch(classifier){\n        case \"*\":\n            return \"font-style:italic;\";\n        case \"$\":\n            return \"text-decoration:underline;\";\n        default:\n            return \"\";\n    }\n};\nconst svgDraw = {\n    getClassTitleString,\n    drawClass,\n    drawEdge,\n    drawNote,\n    parseMember\n};\n\n},{\"d3\":\"ahWNw\",\"./mermaid-b0ad2de1.js\":\"42V0c\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequire9da7\")\n\n//# sourceMappingURL=stateDiagram-v2-6371a76b.2b4d1f12.js.map\n","import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-fa41df25.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-b0ad2de1.js\";\nimport { r as render } from \"./index-a92ac404.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-49ac43a2.js\";\nimport \"./createText-3df630b5.js\";\nimport \"mdast-util-from-markdown\";\nimport \"./svgDraw-0fcc813d.js\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  log.trace(\"Extracting classes\");\n  diagramObj.db.clear();\n  try {\n    diagramObj.parser.parse(text);\n    diagramObj.db.extract(diagramObj.db.getRootDocV2());\n    return diagramObj.db.getClasses();\n  } catch (e) {\n    return e;\n  }\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n","import { line, curveBasis } from \"d3\";\nimport { u as utils, l as log, x as parseGenericTypes } from \"./mermaid-b0ad2de1.js\";\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation, conf, diagObj) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case diagObj.db.relationType.EXTENSION:\n        return \"extension\";\n      case diagObj.db.relationType.COMPOSITION:\n        return \"composition\";\n      case diagObj.db.relationType.DEPENDENCY:\n        return \"dependency\";\n      case diagObj.db.relationType.LOLLIPOP:\n        return \"lollipop\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"relation\");\n  let url = \"\";\n  if (conf.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  if (relation.relation.lineType == 1) {\n    svgPath.attr(\"class\", \"relation dashed-line\");\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr(\"class\", \"relation dotted-line\");\n  }\n  if (relation.relation.type1 !== \"none\") {\n    svgPath.attr(\n      \"marker-start\",\n      \"url(\" + url + \"#\" + getRelationType(relation.relation.type1) + \"Start)\"\n    );\n  }\n  if (relation.relation.type2 !== \"none\") {\n    svgPath.attr(\n      \"marker-end\",\n      \"url(\" + url + \"#\" + getRelationType(relation.relation.type2) + \"End)\"\n    );\n  }\n  let x, y;\n  const l = path.points.length;\n  let labelPosition = utils.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = utils.calcCardinalityPosition(\n      relation.relation.type1 !== \"none\",\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = utils.calcCardinalityPosition(\n      relation.relation.type2 !== \"none\",\n      path.points,\n      path.points[l - 1]\n    );\n    log.debug(\"cardinality_1_point \" + JSON.stringify(cardinality_1_point));\n    log.debug(\"cardinality_2_point \" + JSON.stringify(cardinality_2_point));\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n  if (relation.title !== void 0) {\n    const g = elem.append(\"g\").attr(\"class\", \"classLabel\");\n    const label = g.append(\"text\").attr(\"class\", \"label\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", \"red\").attr(\"text-anchor\", \"middle\").text(relation.title);\n    window.label = label;\n    const bounds = label.node().getBBox();\n    g.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", bounds.x - conf.padding / 2).attr(\"y\", bounds.y - conf.padding / 2).attr(\"width\", bounds.width + conf.padding).attr(\"height\", bounds.height + conf.padding);\n  }\n  log.info(\"Rendering relation \" + JSON.stringify(relation));\n  if (relation.relationTitle1 !== void 0 && relation.relationTitle1 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type1\").attr(\"x\", p1_card_x).attr(\"y\", p1_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== void 0 && relation.relationTitle2 !== \"none\") {\n    const g = elem.append(\"g\").attr(\"class\", \"cardinality\");\n    g.append(\"text\").attr(\"class\", \"type2\").attr(\"x\", p2_card_x).attr(\"y\", p2_card_y).attr(\"fill\", \"black\").attr(\"font-size\", \"6\").text(relation.relationTitle2);\n  }\n  edgeCount++;\n};\nconst drawClass = function(elem, classDef, conf, diagObj) {\n  log.debug(\"Rendering class \", classDef, conf);\n  const id = classDef.id;\n  const classInfo = {\n    id,\n    label: classDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", diagObj.db.lookUpDomId(id)).attr(\"class\", \"classGroup\");\n  let title;\n  if (classDef.link) {\n    title = g.append(\"svg:a\").attr(\"xlink:href\", classDef.link).attr(\"target\", classDef.linkTarget).append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  } else {\n    title = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  }\n  let isFirst = true;\n  classDef.annotations.forEach(function(member) {\n    const titleText2 = title.append(\"tspan\").text(\"«\" + member + \"»\");\n    if (!isFirst) {\n      titleText2.attr(\"dy\", conf.textHeight);\n    }\n    isFirst = false;\n  });\n  let classTitleString = getClassTitleString(classDef);\n  const classTitle = title.append(\"tspan\").text(classTitleString).attr(\"class\", \"title\");\n  if (!isFirst) {\n    classTitle.attr(\"dy\", conf.textHeight);\n  }\n  const titleHeight = title.node().getBBox().height;\n  const membersLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin / 2).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin / 2);\n  const members = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + conf.dividerMargin + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n  isFirst = true;\n  classDef.members.forEach(function(member) {\n    addTspan(members, member, isFirst, conf);\n    isFirst = false;\n  });\n  const membersBox = members.node().getBBox();\n  const methodsLine = g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height).attr(\"y2\", conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n  const methods = g.append(\"text\").attr(\"x\", conf.padding).attr(\"y\", titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight).attr(\"fill\", \"white\").attr(\"class\", \"classText\");\n  isFirst = true;\n  classDef.methods.forEach(function(method) {\n    addTspan(methods, method, isFirst, conf);\n    isFirst = false;\n  });\n  const classBox = g.node().getBBox();\n  var cssClassStr = \" \";\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(\" \");\n  }\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", classBox.width + 2 * conf.padding).attr(\"height\", classBox.height + conf.padding + 0.5 * conf.dividerMargin).attr(\"class\", cssClassStr);\n  const rectWidth = rect.node().getBBox().width;\n  title.node().childNodes.forEach(function(x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  if (classDef.tooltip) {\n    title.insert(\"title\").text(classDef.tooltip);\n  }\n  membersLine.attr(\"x2\", rectWidth);\n  methodsLine.attr(\"x2\", rectWidth);\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n  return classInfo;\n};\nconst getClassTitleString = function(classDef) {\n  let classTitleString = classDef.id;\n  if (classDef.type) {\n    classTitleString += \"<\" + classDef.type + \">\";\n  }\n  return classTitleString;\n};\nconst drawNote = function(elem, note, conf, diagObj) {\n  log.debug(\"Rendering note \", note, conf);\n  const id = note.id;\n  const noteInfo = {\n    id,\n    text: note.text,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"classGroup\");\n  let text = g.append(\"text\").attr(\"y\", conf.textHeight + conf.padding).attr(\"x\", 0);\n  const lines = JSON.parse(`\"${note.text}\"`).split(\"\\n\");\n  lines.forEach(function(line2) {\n    log.debug(`Adding line: ${line2}`);\n    text.append(\"tspan\").text(line2).attr(\"class\", \"title\").attr(\"dy\", conf.textHeight);\n  });\n  const noteBox = g.node().getBBox();\n  const rect = g.insert(\"rect\", \":first-child\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", noteBox.width + 2 * conf.padding).attr(\n    \"height\",\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n  );\n  const rectWidth = rect.node().getBBox().width;\n  text.node().childNodes.forEach(function(x) {\n    x.setAttribute(\"x\", (rectWidth - x.getBBox().width) / 2);\n  });\n  noteInfo.width = rectWidth;\n  noteInfo.height = noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n  return noteInfo;\n};\nconst parseMember = function(text) {\n  let displayText = \"\";\n  let cssStyle = \"\";\n  let returnType = \"\";\n  let visibility = \"\";\n  let firstChar = text.substring(0, 1);\n  let lastChar = text.substring(text.length - 1, text.length);\n  if (firstChar.match(/[#+~-]/)) {\n    visibility = firstChar;\n  }\n  let noClassifierRe = /[\\s\\w)~]/;\n  if (!lastChar.match(noClassifierRe)) {\n    cssStyle = parseClassifier(lastChar);\n  }\n  const startIndex = visibility === \"\" ? 0 : 1;\n  let endIndex = cssStyle === \"\" ? text.length : text.length - 1;\n  text = text.substring(startIndex, endIndex);\n  const methodStart = text.indexOf(\"(\");\n  const methodEnd = text.indexOf(\")\");\n  const isMethod = methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length;\n  if (isMethod) {\n    let methodName = text.substring(0, methodStart).trim();\n    const parameters = text.substring(methodStart + 1, methodEnd);\n    displayText = visibility + methodName + \"(\" + parseGenericTypes(parameters.trim()) + \")\";\n    if (methodEnd < text.length) {\n      let potentialClassifier = text.substring(methodEnd + 1, methodEnd + 2);\n      if (cssStyle === \"\" && !potentialClassifier.match(noClassifierRe)) {\n        cssStyle = parseClassifier(potentialClassifier);\n        returnType = text.substring(methodEnd + 2).trim();\n      } else {\n        returnType = text.substring(methodEnd + 1).trim();\n      }\n      if (returnType !== \"\") {\n        if (returnType.charAt(0) === \":\") {\n          returnType = returnType.substring(1).trim();\n        }\n        returnType = \" : \" + parseGenericTypes(returnType);\n        displayText += returnType;\n      }\n    }\n  } else {\n    displayText = visibility + parseGenericTypes(text);\n  }\n  return {\n    displayText,\n    cssStyle\n  };\n};\nconst addTspan = function(textEl, txt, isFirst, conf) {\n  let member = parseMember(txt);\n  const tSpan = textEl.append(\"tspan\").attr(\"x\", conf.padding).text(member.displayText);\n  if (member.cssStyle !== \"\") {\n    tSpan.attr(\"style\", member.cssStyle);\n  }\n  if (!isFirst) {\n    tSpan.attr(\"dy\", conf.textHeight);\n  }\n};\nconst parseClassifier = function(classifier) {\n  switch (classifier) {\n    case \"*\":\n      return \"font-style:italic;\";\n    case \"$\":\n      return \"text-decoration:underline;\";\n    default:\n      return \"\";\n  }\n};\nconst svgDraw = {\n  getClassTitleString,\n  drawClass,\n  drawEdge,\n  drawNote,\n  parseMember\n};\nexport {\n  parseMember as p,\n  svgDraw as s\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","diagram","_stylesFa41Df25Js","_indexJs","_d3","_mermaidB0Ad2De1Js","_indexA92Ac404Js","SHAPE_STATE","SHAPE_STATE_WITH_DESC","CSS_DIAGRAM","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_DIAGRAM_CLUSTER","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","stateDomId","itemId","counter","type","typeSpacer","typeStr","setupNode","g","parsedItem","diagramStates","diagramDb","altFlag","dbInfoItem","classStr","classes","join","shape","start","D","description","e","sanitizeText","c","newNode","Array","isArray","push","sanitizeTextOrArray","doc","l","info","getDir","dir","a","nodeData","labelStyle","labelText","style","domId","padding","centerLabel","note","noteData","text","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","trace","setupDoc","parentParsedItem","forEach","item","stmt","b","S","state1","state2","edgeData","arrowTypeEnd","label","defaultDir","parsedItemDoc","value","draw","_version","diag","sandboxElement","db","getDirection","securityLevel","state","conf","nodeSpacing","rankSpacing","getRootDocV2","extract","getStates","Graph","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","select","root","nodes","contentDocument","body","svg","element","r","u","insertTitle","titleTopMargin","getDiagramTitle","bounds","node","getBBox","width","height","attr","svgBounds","useMaxWidth","vBox","y","debug","labels","document","querySelectorAll","dim","rect","createElementNS","setAttribute","insertBefore","firstChild","parser","p","d","renderer","setConf","cnf","keys","key","getClasses","diagramObj","clear","parse","styles","s","init","arrowMarkerAbsolute","parseMember","svgDraw","edgeCount","getClassTitleString","classDef","classTitleString","displayText","cssStyle","returnType","visibility","firstChar","substring","lastChar","match","noClassifierRe","parseClassifier","startIndex","endIndex","methodStart","indexOf","methodEnd","isMethod","methodName","trim","parameters","potentialClassifier","charAt","addTspan","textEl","txt","isFirst","member","tSpan","append","textHeight","classifier","drawClass","elem","diagObj","title","classInfo","lookUpDomId","link","linkTarget","annotations","titleText2","classTitle","titleHeight","membersLine","dividerMargin","members","membersBox","methodsLine","methods","method","classBox","cssClassStr","cssClasses","insert","rectWidth","childNodes","tooltip","drawEdge","path","relation","p1_card_x","p1_card_y","p2_card_x","p2_card_y","getRelationType","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","LOLLIPOP","points","filter","Number","isNaN","lineData","lineFunction","line","curve","curveBasis","svgPath","url","location","protocol","host","pathname","search","replace","lineType","type1","type2","labelPosition","calcLabelPosition","cardinality_1_point","calcCardinalityPosition","cardinality_2_point","JSON","stringify","relationTitle1","relationTitle2","drawNote","noteInfo","lines","split","line2","noteBox"],"version":3,"file":"stateDiagram-v2-6371a76b.2b4d1f12.js.map"}