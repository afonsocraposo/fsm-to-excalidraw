{"mappings":"C,A,kC;A,uC;A,E;A,2D;A,E;A,4D;A,wD;A,S,C,C,C,C,C,C,C,C,C,E,2B,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,0D;A,+D;A,8B;A,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,E,gE;A,6D;A,+D;A,gC;A,G,E,O,E,E,C,E,+C;A,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,qD;A,yE;A,I,E,E,E,Y;A,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,C,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,M,C,S,C,C,C,C,C,MCsQI,E,I,E,E,kD,E,iB,C,GA0NJ,EAAA,MAAA,CAAA,EAAA,UAAA,IACE,GAjeF,IAAA,EAAA,EAAA,wBACA,EAAA,EAAA,MACA,EAAA,EAAA,kCACA,EAAA,EAAA,qCACA,EAAA,EAAA,yBACA,EAAA,aACA,EAAA,SACA,EAAA,2BACA,EAAA,aACA,EAAA,UACA,EAAA,wBACA,EAAA,UACA,EAAA,wBACA,IAAM,EAAU,CAAC,EAKX,EAAO,IAAM,OAAO,IAAA,CAAK,GAEzB,EAAY,CAChB,IAJU,AAAC,GAAM,CAAO,CAAC,EAAE,CAK3B,IARU,CAAC,EAAK,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","sources":["<anon>","node_modules/mermaid/dist/stateDiagram-133e3642.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"aq8St\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"diagram\", ()=>diagram);\nvar _stylesFa41Df25Js = require(\"./styles-fa41df25.js\");\nvar _d3 = require(\"d3\");\nvar _indexJs = require(\"dagre-d3-es/src/dagre/index.js\");\nvar _indexJs1 = require(\"dagre-d3-es/src/graphlib/index.js\");\nvar _mermaidB0Ad2De1Js = require(\"./mermaid-b0ad2de1.js\");\nvar _tsDedent = require(\"ts-dedent\");\nvar _dayjs = require(\"dayjs\");\nvar _sanitizeUrl = require(\"@braintree/sanitize-url\");\nvar _dompurify = require(\"dompurify\");\nvar _khroma = require(\"khroma\");\nvar _memoizeJs = require(\"lodash-es/memoize.js\");\nvar _stylis = require(\"stylis\");\nvar _isEmptyJs = require(\"lodash-es/isEmpty.js\");\nconst idCache = {};\nconst set = (key, val)=>{\n    idCache[key] = val;\n};\nconst get = (k)=>idCache[k];\nconst keys = ()=>Object.keys(idCache);\nconst size = ()=>keys().length;\nconst idCache$1 = {\n    get,\n    set,\n    keys,\n    size\n};\nconst drawStartState = (g)=>g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit).attr(\"cx\", (0, _mermaidB0Ad2De1Js.c)().state.padding + (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit).attr(\"cy\", (0, _mermaidB0Ad2De1Js.c)().state.padding + (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit);\nconst drawDivider = (g)=>g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", (0, _mermaidB0Ad2De1Js.c)().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", (0, _mermaidB0Ad2De1Js.c)().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0);\nconst drawSimpleState = (g, stateDef)=>{\n    const state = g.append(\"text\").attr(\"x\", 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.textHeight + 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"font-size\", (0, _mermaidB0Ad2De1Js.c)().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n    const classBox = state.node().getBBox();\n    g.insert(\"rect\", \":first-child\").attr(\"x\", (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"width\", classBox.width + 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"height\", classBox.height + 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"rx\", (0, _mermaidB0Ad2De1Js.c)().state.radius);\n    return state;\n};\nconst drawDescrState = (g, stateDef)=>{\n    const addTspan = function(textEl, txt, isFirst2) {\n        const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding).text(txt);\n        if (!isFirst2) tSpan.attr(\"dy\", (0, _mermaidB0Ad2De1Js.c)().state.textHeight);\n    };\n    const title = g.append(\"text\").attr(\"x\", 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.textHeight + 1.3 * (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"font-size\", (0, _mermaidB0Ad2De1Js.c)().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n    const titleBox = title.node().getBBox();\n    const titleHeight = titleBox.height;\n    const description = g.append(\"text\").attr(\"x\", (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"y\", titleHeight + (0, _mermaidB0Ad2De1Js.c)().state.padding * 0.4 + (0, _mermaidB0Ad2De1Js.c)().state.dividerMargin + (0, _mermaidB0Ad2De1Js.c)().state.textHeight).attr(\"class\", \"state-description\");\n    let isFirst = true;\n    let isSecond = true;\n    stateDef.descriptions.forEach(function(descr) {\n        if (!isFirst) {\n            addTspan(description, descr, isSecond);\n            isSecond = false;\n        }\n        isFirst = false;\n    });\n    const descrLine = g.append(\"line\").attr(\"x1\", (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"y1\", (0, _mermaidB0Ad2De1Js.c)().state.padding + titleHeight + (0, _mermaidB0Ad2De1Js.c)().state.dividerMargin / 2).attr(\"y2\", (0, _mermaidB0Ad2De1Js.c)().state.padding + titleHeight + (0, _mermaidB0Ad2De1Js.c)().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n    const descrBox = description.node().getBBox();\n    const width = Math.max(descrBox.width, titleBox.width);\n    descrLine.attr(\"x2\", width + 3 * (0, _mermaidB0Ad2De1Js.c)().state.padding);\n    g.insert(\"rect\", \":first-child\").attr(\"x\", (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"width\", width + 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"rx\", (0, _mermaidB0Ad2De1Js.c)().state.radius);\n    return g;\n};\nconst addTitleAndBox = (g, stateDef, altBkg)=>{\n    const pad = (0, _mermaidB0Ad2De1Js.c)().state.padding;\n    const dblPad = 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding;\n    const orgBox = g.node().getBBox();\n    const orgWidth = orgBox.width;\n    const orgX = orgBox.x;\n    const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.titleShift).attr(\"font-size\", (0, _mermaidB0Ad2De1Js.c)().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n    const titleBox = title.node().getBBox();\n    const titleWidth = titleBox.width + dblPad;\n    let width = Math.max(titleWidth, orgWidth);\n    if (width === orgWidth) width = width + dblPad;\n    let startX;\n    const graphBox = g.node().getBBox();\n    stateDef.doc;\n    startX = orgX - pad;\n    if (titleWidth > orgWidth) startX = (orgWidth - width) / 2 + pad;\n    if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) startX = orgX - (titleWidth - orgWidth) / 2;\n    const lineY = 1 - (0, _mermaidB0Ad2De1Js.c)().state.textHeight;\n    g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\"height\", graphBox.height + (0, _mermaidB0Ad2De1Js.c)().state.textHeight + (0, _mermaidB0Ad2De1Js.c)().state.titleShift + 1).attr(\"rx\", \"0\");\n    title.attr(\"x\", startX + pad);\n    if (titleWidth <= orgWidth) title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n    g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.titleShift - (0, _mermaidB0Ad2De1Js.c)().state.textHeight - (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"width\", width).attr(\"height\", (0, _mermaidB0Ad2De1Js.c)().state.textHeight * 3).attr(\"rx\", (0, _mermaidB0Ad2De1Js.c)().state.radius);\n    g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.titleShift - (0, _mermaidB0Ad2De1Js.c)().state.textHeight - (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * (0, _mermaidB0Ad2De1Js.c)().state.textHeight).attr(\"rx\", (0, _mermaidB0Ad2De1Js.c)().state.radius);\n    return g;\n};\nconst drawEndState = (g)=>{\n    g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit + (0, _mermaidB0Ad2De1Js.c)().state.miniPadding).attr(\"cx\", (0, _mermaidB0Ad2De1Js.c)().state.padding + (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit + (0, _mermaidB0Ad2De1Js.c)().state.miniPadding).attr(\"cy\", (0, _mermaidB0Ad2De1Js.c)().state.padding + (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit + (0, _mermaidB0Ad2De1Js.c)().state.miniPadding);\n    return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit).attr(\"cx\", (0, _mermaidB0Ad2De1Js.c)().state.padding + (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit + 2).attr(\"cy\", (0, _mermaidB0Ad2De1Js.c)().state.padding + (0, _mermaidB0Ad2De1Js.c)().state.sizeUnit + 2);\n};\nconst drawForkJoinState = (g, stateDef)=>{\n    let width = (0, _mermaidB0Ad2De1Js.c)().state.forkWidth;\n    let height = (0, _mermaidB0Ad2De1Js.c)().state.forkHeight;\n    if (stateDef.parentId) {\n        let tmp = width;\n        width = height;\n        height = tmp;\n    }\n    return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.padding);\n};\nconst _drawLongText = (_text, x, y, g)=>{\n    let textHeight = 0;\n    const textElem = g.append(\"text\");\n    textElem.style(\"text-anchor\", \"start\");\n    textElem.attr(\"class\", \"noteText\");\n    let text = _text.replace(/\\r\\n/g, \"<br/>\");\n    text = text.replace(/\\n/g, \"<br/>\");\n    const lines = text.split((0, _mermaidB0Ad2De1Js.e).lineBreakRegex);\n    let tHeight = 1.25 * (0, _mermaidB0Ad2De1Js.c)().state.noteMargin;\n    for (const line2 of lines){\n        const txt = line2.trim();\n        if (txt.length > 0) {\n            const span = textElem.append(\"tspan\");\n            span.text(txt);\n            if (tHeight === 0) {\n                const textBounds = span.node().getBBox();\n                tHeight += textBounds.height;\n            }\n            textHeight += tHeight;\n            span.attr(\"x\", x + (0, _mermaidB0Ad2De1Js.c)().state.noteMargin);\n            span.attr(\"y\", y + textHeight + 1.25 * (0, _mermaidB0Ad2De1Js.c)().state.noteMargin);\n        }\n    }\n    return {\n        textWidth: textElem.node().getBBox().width,\n        textHeight\n    };\n};\nconst drawNote = (text, g)=>{\n    g.attr(\"class\", \"state-note\");\n    const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", (0, _mermaidB0Ad2De1Js.c)().state.padding);\n    const rectElem = g.append(\"g\");\n    const { textWidth , textHeight  } = _drawLongText(text, 0, 0, rectElem);\n    note.attr(\"height\", textHeight + 2 * (0, _mermaidB0Ad2De1Js.c)().state.noteMargin);\n    note.attr(\"width\", textWidth + (0, _mermaidB0Ad2De1Js.c)().state.noteMargin * 2);\n    return note;\n};\nconst drawState = function(elem, stateDef) {\n    const id = stateDef.id;\n    const stateInfo = {\n        id,\n        label: stateDef.id,\n        width: 0,\n        height: 0\n    };\n    const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n    if (stateDef.type === \"start\") drawStartState(g);\n    if (stateDef.type === \"end\") drawEndState(g);\n    if (stateDef.type === \"fork\" || stateDef.type === \"join\") drawForkJoinState(g, stateDef);\n    if (stateDef.type === \"note\") drawNote(stateDef.note.text, g);\n    if (stateDef.type === \"divider\") drawDivider(g);\n    if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) drawSimpleState(g, stateDef);\n    if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) drawDescrState(g, stateDef);\n    const stateBox = g.node().getBBox();\n    stateInfo.width = stateBox.width + 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding;\n    stateInfo.height = stateBox.height + 2 * (0, _mermaidB0Ad2De1Js.c)().state.padding;\n    idCache$1.set(id, stateInfo);\n    return stateInfo;\n};\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation) {\n    const getRelationType = function(type) {\n        switch(type){\n            case (0, _stylesFa41Df25Js.d).relationType.AGGREGATION:\n                return \"aggregation\";\n            case (0, _stylesFa41Df25Js.d).relationType.EXTENSION:\n                return \"extension\";\n            case (0, _stylesFa41Df25Js.d).relationType.COMPOSITION:\n                return \"composition\";\n            case (0, _stylesFa41Df25Js.d).relationType.DEPENDENCY:\n                return \"dependency\";\n        }\n    };\n    path.points = path.points.filter((p)=>!Number.isNaN(p.y));\n    const lineData = path.points;\n    const lineFunction = (0, _d3.line)().x(function(d) {\n        return d.x;\n    }).y(function(d) {\n        return d.y;\n    }).curve((0, _d3.curveBasis));\n    const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n    let url = \"\";\n    if ((0, _mermaidB0Ad2De1Js.c)().state.arrowMarkerAbsolute) {\n        url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n        url = url.replace(/\\(/g, \"\\\\(\");\n        url = url.replace(/\\)/g, \"\\\\)\");\n    }\n    svgPath.attr(\"marker-end\", \"url(\" + url + \"#\" + getRelationType((0, _stylesFa41Df25Js.d).relationType.DEPENDENCY) + \"End)\");\n    if (relation.title !== void 0) {\n        const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n        const { x , y  } = (0, _mermaidB0Ad2De1Js.u).calcLabelPosition(path.points);\n        const rows = (0, _mermaidB0Ad2De1Js.e).getRows(relation.title);\n        let titleHeight = 0;\n        const titleRows = [];\n        let maxWidth = 0;\n        let minX = 0;\n        for(let i = 0; i <= rows.length; i++){\n            const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n            const boundstmp = title.node().getBBox();\n            maxWidth = Math.max(maxWidth, boundstmp.width);\n            minX = Math.min(minX, boundstmp.x);\n            (0, _mermaidB0Ad2De1Js.l).info(boundstmp.x, x, y + titleHeight);\n            if (titleHeight === 0) {\n                const titleBox = title.node().getBBox();\n                titleHeight = titleBox.height;\n                (0, _mermaidB0Ad2De1Js.l).info(\"Title height\", titleHeight, y);\n            }\n            titleRows.push(title);\n        }\n        let boxHeight = titleHeight * rows.length;\n        if (rows.length > 1) {\n            const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n            titleRows.forEach((title, i)=>title.attr(\"y\", y + i * titleHeight - heightAdj));\n            boxHeight = titleHeight * rows.length;\n        }\n        const bounds = label.node().getBBox();\n        label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - (0, _mermaidB0Ad2De1Js.c)().state.padding / 2).attr(\"y\", y - boxHeight / 2 - (0, _mermaidB0Ad2De1Js.c)().state.padding / 2 - 3.5).attr(\"width\", maxWidth + (0, _mermaidB0Ad2De1Js.c)().state.padding).attr(\"height\", boxHeight + (0, _mermaidB0Ad2De1Js.c)().state.padding);\n        (0, _mermaidB0Ad2De1Js.l).info(bounds);\n    }\n    edgeCount++;\n};\nlet conf;\nconst transformationLog = {};\nconst setConf = function() {};\nconst insertMarkers = function(elem) {\n    elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function(text, id, _version, diagObj) {\n    conf = (0, _mermaidB0Ad2De1Js.c)().state;\n    const securityLevel = (0, _mermaidB0Ad2De1Js.c)().securityLevel;\n    let sandboxElement;\n    if (securityLevel === \"sandbox\") sandboxElement = (0, _d3.select)(\"#i\" + id);\n    const root = securityLevel === \"sandbox\" ? (0, _d3.select)(sandboxElement.nodes()[0].contentDocument.body) : (0, _d3.select)(\"body\");\n    const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n    (0, _mermaidB0Ad2De1Js.l).debug(\"Rendering diagram \" + text);\n    const diagram2 = root.select(`[id='${id}']`);\n    insertMarkers(diagram2);\n    const graph = new _indexJs1.Graph({\n        multigraph: true,\n        compound: true,\n        // acyclicer: 'greedy',\n        rankdir: \"RL\"\n    });\n    graph.setDefaultEdgeLabel(function() {\n        return {};\n    });\n    const rootDoc = diagObj.db.getRootDoc();\n    renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n    const padding = conf.padding;\n    const bounds = diagram2.node().getBBox();\n    const width = bounds.width + padding * 2;\n    const height = bounds.height + padding * 2;\n    const svgWidth = width * 1.75;\n    (0, _mermaidB0Ad2De1Js.i)(diagram2, height, svgWidth, conf.useMaxWidth);\n    diagram2.attr(\"viewBox\", `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + \" \" + height);\n};\nconst getLabelWidth = (text)=>{\n    return text ? text.length * conf.fontSizeFactor : 1;\n};\nconst renderDoc = (doc, diagram2, parentId, altBkg, root, domDocument, diagObj)=>{\n    const graph = new _indexJs1.Graph({\n        compound: true,\n        multigraph: true\n    });\n    let i;\n    let edgeFreeDoc = true;\n    for(i = 0; i < doc.length; i++)if (doc[i].stmt === \"relation\") {\n        edgeFreeDoc = false;\n        break;\n    }\n    if (parentId) graph.setGraph({\n        rankdir: \"LR\",\n        multigraph: true,\n        compound: true,\n        // acyclicer: 'greedy',\n        ranker: \"tight-tree\",\n        ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n        nodeSep: edgeFreeDoc ? 1 : 50,\n        isMultiGraph: true\n    });\n    else graph.setGraph({\n        rankdir: \"TB\",\n        multigraph: true,\n        compound: true,\n        // isCompound: true,\n        // acyclicer: 'greedy',\n        // ranker: 'longest-path'\n        ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n        nodeSep: edgeFreeDoc ? 1 : 50,\n        ranker: \"tight-tree\",\n        // ranker: 'network-simplex'\n        isMultiGraph: true\n    });\n    graph.setDefaultEdgeLabel(function() {\n        return {};\n    });\n    diagObj.db.extract(doc);\n    const states = diagObj.db.getStates();\n    const relations = diagObj.db.getRelations();\n    const keys2 = Object.keys(states);\n    for (const key of keys2){\n        const stateDef = states[key];\n        if (parentId) stateDef.parentId = parentId;\n        let node;\n        if (stateDef.doc) {\n            let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n            node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n            {\n                sub = addTitleAndBox(sub, stateDef, altBkg);\n                let boxBounds = sub.node().getBBox();\n                node.width = boxBounds.width;\n                node.height = boxBounds.height + conf.padding / 2;\n                transformationLog[stateDef.id] = {\n                    y: conf.compositTitleSize\n                };\n            }\n        } else node = drawState(diagram2, stateDef);\n        if (stateDef.note) {\n            const noteDef = {\n                descriptions: [],\n                id: stateDef.id + \"-note\",\n                note: stateDef.note,\n                type: \"note\"\n            };\n            const note = drawState(diagram2, noteDef);\n            if (stateDef.note.position === \"left of\") {\n                graph.setNode(node.id + \"-note\", note);\n                graph.setNode(node.id, node);\n            } else {\n                graph.setNode(node.id, node);\n                graph.setNode(node.id + \"-note\", note);\n            }\n            graph.setParent(node.id, node.id + \"-group\");\n            graph.setParent(node.id + \"-note\", node.id + \"-group\");\n        } else graph.setNode(node.id, node);\n    }\n    (0, _mermaidB0Ad2De1Js.l).debug(\"Count=\", graph.nodeCount(), graph);\n    let cnt = 0;\n    relations.forEach(function(relation) {\n        cnt++;\n        (0, _mermaidB0Ad2De1Js.l).debug(\"Setting edge\", relation);\n        graph.setEdge(relation.id1, relation.id2, {\n            relation,\n            width: getLabelWidth(relation.title),\n            height: conf.labelHeight * (0, _mermaidB0Ad2De1Js.e).getRows(relation.title).length,\n            labelpos: \"c\"\n        }, \"id\" + cnt);\n    });\n    (0, _indexJs.layout)(graph);\n    (0, _mermaidB0Ad2De1Js.l).debug(\"Graph after layout\", graph.nodes());\n    const svgElem = diagram2.node();\n    graph.nodes().forEach(function(v) {\n        if (v !== void 0 && graph.node(v) !== void 0) {\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n            root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"transform\", \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\");\n            root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n            const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n            dividers.forEach((divider)=>{\n                const parent = divider.parentElement;\n                let pWidth = 0;\n                let pShift = 0;\n                if (parent) {\n                    if (parent.parentElement) pWidth = parent.parentElement.getBBox().width;\n                    pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n                    if (Number.isNaN(pShift)) pShift = 0;\n                }\n                divider.setAttribute(\"x1\", 0 - pShift + 8);\n                divider.setAttribute(\"x2\", pWidth - pShift - 8);\n            });\n        } else (0, _mermaidB0Ad2De1Js.l).debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    });\n    let stateBox = svgElem.getBBox();\n    graph.edges().forEach(function(e) {\n        if (e !== void 0 && graph.edge(e) !== void 0) {\n            (0, _mermaidB0Ad2De1Js.l).debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n            drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n        }\n    });\n    stateBox = svgElem.getBBox();\n    const stateInfo = {\n        id: parentId ? parentId : \"root\",\n        label: parentId ? parentId : \"root\",\n        width: 0,\n        height: 0\n    };\n    stateInfo.width = stateBox.width + 2 * conf.padding;\n    stateInfo.height = stateBox.height + 2 * conf.padding;\n    (0, _mermaidB0Ad2De1Js.l).debug(\"Doc rendered\", stateInfo, graph);\n    return stateInfo;\n};\nconst renderer = {\n    setConf,\n    draw\n};\nconst diagram = {\n    parser: (0, _stylesFa41Df25Js.p),\n    db: (0, _stylesFa41Df25Js.d),\n    renderer,\n    styles: (0, _stylesFa41Df25Js.s),\n    init: (cnf)=>{\n        if (!cnf.state) cnf.state = {};\n        cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n        (0, _stylesFa41Df25Js.d).clear();\n    }\n};\n\n},{\"./styles-fa41df25.js\":\"i5tjy\",\"d3\":\"ahWNw\",\"dagre-d3-es/src/dagre/index.js\":\"9xp7T\",\"dagre-d3-es/src/graphlib/index.js\":\"j6NXy\",\"./mermaid-b0ad2de1.js\":\"42V0c\",\"ts-dedent\":\"azOLv\",\"dayjs\":\"8F3kd\",\"@braintree/sanitize-url\":\"eIPUt\",\"dompurify\":\"5cPaM\",\"khroma\":\"kb6Zw\",\"lodash-es/memoize.js\":\"kSZfU\",\"stylis\":\"lfeQC\",\"lodash-es/isEmpty.js\":\"941eg\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequire9da7\")\n\n//# sourceMappingURL=stateDiagram-133e3642.7ccca947.js.map\n","import { d as db, p as parser, s as styles } from \"./styles-fa41df25.js\";\nimport { line, curveBasis, select } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as getConfig, u as utils, e as common, l as log, i as configureSvgSize } from \"./mermaid-b0ad2de1.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst idCache = {};\nconst set = (key, val) => {\n  idCache[key] = val;\n};\nconst get = (k) => idCache[k];\nconst keys = () => Object.keys(idCache);\nconst size = () => keys().length;\nconst idCache$1 = {\n  get,\n  set,\n  keys,\n  size\n};\nconst drawStartState = (g) => g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit);\nconst drawDivider = (g) => g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", getConfig().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", getConfig().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0);\nconst drawSimpleState = (g, stateDef) => {\n  const state = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 2 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const classBox = state.node().getBBox();\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", classBox.width + 2 * getConfig().state.padding).attr(\"height\", classBox.height + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return state;\n};\nconst drawDescrState = (g, stateDef) => {\n  const addTspan = function(textEl, txt, isFirst2) {\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * getConfig().state.padding).text(txt);\n    if (!isFirst2) {\n      tSpan.attr(\"dy\", getConfig().state.textHeight);\n    }\n  };\n  const title = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 1.3 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n  const description = g.append(\"text\").attr(\"x\", getConfig().state.padding).attr(\n    \"y\",\n    titleHeight + getConfig().state.padding * 0.4 + getConfig().state.dividerMargin + getConfig().state.textHeight\n  ).attr(\"class\", \"state-description\");\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function(descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n  const descrLine = g.append(\"line\").attr(\"x1\", getConfig().state.padding).attr(\"y1\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"y2\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n  descrLine.attr(\"x2\", width + 3 * getConfig().state.padding);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", width + 2 * getConfig().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n  const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", getConfig().state.titleShift).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth);\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  const graphBox = g.node().getBBox();\n  if (stateDef.doc)\n    ;\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n  const lineY = 1 - getConfig().state.textHeight;\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\n    \"height\",\n    graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n  ).attr(\"rx\", \"0\");\n  title.attr(\"x\", startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", getConfig().state.textHeight * 3).attr(\"rx\", getConfig().state.radius);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * getConfig().state.textHeight).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst drawEndState = (g) => {\n  g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\n    \"cx\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  ).attr(\n    \"cy\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  );\n  return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + 2).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + 2);\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding);\n};\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n  const textElem = g.append(\"text\");\n  textElem.style(\"text-anchor\", \"start\");\n  textElem.attr(\"class\", \"noteText\");\n  let text = _text.replace(/\\r\\n/g, \"<br/>\");\n  text = text.replace(/\\n/g, \"<br/>\");\n  const lines = text.split(common.lineBreakRegex);\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line2 of lines) {\n    const txt = line2.trim();\n    if (txt.length > 0) {\n      const span = textElem.append(\"tspan\");\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr(\"x\", x + getConfig().state.noteMargin);\n      span.attr(\"y\", y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\nconst drawNote = (text, g) => {\n  g.attr(\"class\", \"state-note\");\n  const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", getConfig().state.padding);\n  const rectElem = g.append(\"g\");\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr(\"height\", textHeight + 2 * getConfig().state.noteMargin);\n  note.attr(\"width\", textWidth + getConfig().state.noteMargin * 2);\n  return note;\n};\nconst drawState = function(elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id,\n    label: stateDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n  if (stateDef.type === \"start\") {\n    drawStartState(g);\n  }\n  if (stateDef.type === \"end\") {\n    drawEndState(g);\n  }\n  if (stateDef.type === \"fork\" || stateDef.type === \"join\") {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === \"note\") {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === \"divider\") {\n    drawDivider(g);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n  idCache$1.set(id, stateInfo);\n  return stateInfo;\n};\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case db.relationType.EXTENSION:\n        return \"extension\";\n      case db.relationType.COMPOSITION:\n        return \"composition\";\n      case db.relationType.DEPENDENCY:\n        return \"dependency\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n  let url = \"\";\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  svgPath.attr(\n    \"marker-end\",\n    \"url(\" + url + \"#\" + getRelationType(db.relationType.DEPENDENCY) + \"End)\"\n  );\n  if (relation.title !== void 0) {\n    const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n    const { x, y } = utils.calcLabelPosition(path.points);\n    const rows = common.getRows(relation.title);\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n      const boundstmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundstmp.width);\n      minX = Math.min(minX, boundstmp.x);\n      log.info(boundstmp.x, x, y + titleHeight);\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info(\"Title height\", titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n      titleRows.forEach((title, i) => title.attr(\"y\", y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n    const bounds = label.node().getBBox();\n    label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - getConfig().state.padding / 2).attr(\"y\", y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5).attr(\"width\", maxWidth + getConfig().state.padding).attr(\"height\", boxHeight + getConfig().state.padding);\n    log.info(bounds);\n  }\n  edgeCount++;\n};\nlet conf;\nconst transformationLog = {};\nconst setConf = function() {\n};\nconst insertMarkers = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function(text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  log.debug(\"Rendering diagram \" + text);\n  const diagram2 = root.select(`[id='${id}']`);\n  insertMarkers(diagram2);\n  const graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n    // acyclicer: 'greedy',\n    rankdir: \"RL\"\n    // ranksep: '20'\n  });\n  graph.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n  const padding = conf.padding;\n  const bounds = diagram2.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram2, height, svgWidth, conf.useMaxWidth);\n  diagram2.attr(\n    \"viewBox\",\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + \" \" + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\nconst renderDoc = (doc, diagram2, parentId, altBkg, root, domDocument, diagObj) => {\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true\n  });\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === \"relation\") {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n  if (parentId) {\n    graph.setGraph({\n      rankdir: \"LR\",\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: \"tight-tree\",\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: \"TB\",\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: \"tight-tree\",\n      // ranker: 'network-simplex'\n      isMultiGraph: true\n    });\n  }\n  graph.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n  const keys2 = Object.keys(states);\n  for (const key of keys2) {\n    const stateDef = states[key];\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n      {\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram2, stateDef);\n    }\n    if (stateDef.note) {\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + \"-note\",\n        note: stateDef.note,\n        type: \"note\"\n      };\n      const note = drawState(diagram2, noteDef);\n      if (stateDef.note.position === \"left of\") {\n        graph.setNode(node.id + \"-note\", note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + \"-note\", note);\n      }\n      graph.setParent(node.id, node.id + \"-group\");\n      graph.setParent(node.id + \"-note\", node.id + \"-group\");\n    } else {\n      graph.setNode(node.id, node);\n    }\n  }\n  log.debug(\"Count=\", graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function(relation) {\n    cnt++;\n    log.debug(\"Setting edge\", relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: \"c\"\n      },\n      \"id\" + cnt\n    );\n  });\n  layout(graph);\n  log.debug(\"Graph after layout\", graph.nodes());\n  const svgElem = diagram2.node();\n  graph.nodes().forEach(function(v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      log.warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\n        \"transform\",\n        \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\"\n      );\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute(\"x1\", 0 - pShift + 8);\n        divider.setAttribute(\"x2\", pWidth - pShift - 8);\n      });\n    } else {\n      log.debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    }\n  });\n  let stateBox = svgElem.getBBox();\n  graph.edges().forEach(function(e) {\n    if (e !== void 0 && graph.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n  stateBox = svgElem.getBBox();\n  const stateInfo = {\n    id: parentId ? parentId : \"root\",\n    label: parentId ? parentId : \"root\",\n    width: 0,\n    height: 0\n  };\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n  log.debug(\"Doc rendered\", stateInfo, graph);\n  return stateInfo;\n};\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","conf","parcelHelpers","defineInteropFlag","export","diagram","_stylesFa41Df25Js","_d3","_indexJs","_indexJs1","_mermaidB0Ad2De1Js","idCache","keys","idCache$1","k","set","key","val","size","drawStartState","g","append","attr","c","state","sizeUnit","padding","drawDivider","style","textHeight","drawSimpleState","stateDef","fontSize","text","classBox","node","getBBox","insert","width","height","radius","drawDescrState","addTspan","textEl","txt","isFirst2","tSpan","title","descriptions","titleBox","titleHeight","description","dividerMargin","isFirst","isSecond","forEach","descr","descrLine","descrBox","Math","max","addTitleAndBox","altBkg","startX","pad","dblPad","orgBox","orgWidth","orgX","titleShift","titleWidth","graphBox","doc","abs","lineY","drawEndState","miniPadding","drawForkJoinState","forkWidth","forkHeight","parentId","tmp","_drawLongText","_text","y","textElem","replace","lines","split","e","lineBreakRegex","tHeight","noteMargin","line2","trim","span","textBounds","textWidth","drawNote","note","rectElem","drawState","elem","stateInfo","label","type","stateBox","edgeCount","drawEdge","path","relation","points","filter","p","Number","isNaN","lineData","lineFunction","line","d","curve","curveBasis","svgPath","url","arrowMarkerAbsolute","location","protocol","host","pathname","search","getRelationType","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","u","calcLabelPosition","rows","getRows","titleRows","maxWidth","minX","boundstmp","min","l","info","push","boxHeight","heightAdj","bounds","transformationLog","insertMarkers","getLabelWidth","fontSizeFactor","renderDoc","diagram2","root","domDocument","diagObj","graph","Graph","compound","multigraph","edgeFreeDoc","stmt","setGraph","rankdir","ranker","ranksep","edgeLengthFactor","nodeSep","isMultiGraph","setDefaultEdgeLabel","db","extract","states","getStates","relations","getRelations","keys2","sub","boxBounds","compositTitleSize","noteDef","position","setNode","setParent","debug","nodeCount","cnt","setEdge","id1","id2","labelHeight","labelpos","layout","nodes","svgElem","v","warn","JSON","stringify","select","dividers","querySelectorAll","divider","parentElement","pWidth","pShift","parseInt","getAttribute","setAttribute","edges","edge","w","parser","renderer","setConf","draw","_version","sandboxElement","securityLevel","contentDocument","body","document","rootDoc","getRootDoc","svgWidth","useMaxWidth","styles","s","init","cnf","clear"],"version":3,"file":"stateDiagram-133e3642.7ccca947.js.map"}