{"mappings":"C,A,kC;A,uC;A,E;A,2D;A,E;A,4D;A,wD;A,S,C,C,C,C,C,C,C,C,C,E,2B,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,0D;A,+D;A,8B;A,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,E,gE;A,6D;A,+D;A,gC;A,G,E,O,E,E,C,E,+C;A,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,qD;A,yE;A,I,E,E,E,Y;A,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,C,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GC+kBA,EAAA,MAAA,CAAA,EAAA,IAAA,IACE,GAhlBF,IAAA,EAAA,EAAA,kCACA,EAAA,EAAA,oCACA,EAAA,EAAA,uBACA,EAAA,EAAA,yBACA,EAAA,EAAA,qCACA,EAAA,EAAA,4BACA,EAAA,EAAA,MACA,IAAI,EAAY,CAAC,EACb,EAAc,CAAC,EACf,EAAU,CAAC,EACT,EAAU,KACd,EAAc,CAAC,EACf,EAAU,CAAC,EACX,EAAY,CAAC,CACf,EACM,EAAe,CAAC,EAAI,IAExB,CAAA,AADA,AAAA,CAAA,EAAA,EAAA,CAAE,AA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","sources":["<anon>","node_modules/mermaid/dist/index-a92ac404.js","node_modules/dagre-d3-es/src/graphlib/json.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"39ufq\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"r\", ()=>render);\nvar _indexJs = require(\"dagre-d3-es/src/dagre/index.js\");\nvar _jsonJs = require(\"dagre-d3-es/src/graphlib/json.js\");\nvar _edges49Ac43A2Js = require(\"./edges-49ac43a2.js\");\nvar _mermaidB0Ad2De1Js = require(\"./mermaid-b0ad2de1.js\");\nvar _indexJs1 = require(\"dagre-d3-es/src/graphlib/index.js\");\nvar _createText3Df630B5Js = require(\"./createText-3df630b5.js\");\nvar _d3 = require(\"d3\");\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = ()=>{\n    descendants = {};\n    parents = {};\n    clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId)=>{\n    (0, _mermaidB0Ad2De1Js.l).trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n    if (descendants[ancenstorId].includes(id)) return true;\n    return false;\n};\nconst edgeInCluster = (edge, clusterId)=>{\n    (0, _mermaidB0Ad2De1Js.l).info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n    (0, _mermaidB0Ad2De1Js.l).info(\"Edge is \", edge);\n    if (edge.v === clusterId) return false;\n    if (edge.w === clusterId) return false;\n    if (!descendants[clusterId]) {\n        (0, _mermaidB0Ad2De1Js.l).debug(\"Tilt, \", clusterId, \",not in decendants\");\n        return false;\n    }\n    return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId)=>{\n    (0, _mermaidB0Ad2De1Js.l).warn(\"Copying children of \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n    const nodes = graph.children(clusterId) || [];\n    if (clusterId !== rootId) nodes.push(clusterId);\n    (0, _mermaidB0Ad2De1Js.l).warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n    nodes.forEach((node)=>{\n        if (graph.children(node).length > 0) copy(node, graph, newGraph, rootId);\n        else {\n            const data = graph.node(node);\n            (0, _mermaidB0Ad2De1Js.l).info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n            newGraph.setNode(node, data);\n            if (rootId !== graph.parent(node)) {\n                (0, _mermaidB0Ad2De1Js.l).warn(\"Setting parent\", node, graph.parent(node));\n                newGraph.setParent(node, graph.parent(node));\n            }\n            if (clusterId !== rootId && node !== clusterId) {\n                (0, _mermaidB0Ad2De1Js.l).debug(\"Setting parent\", node, clusterId);\n                newGraph.setParent(node, clusterId);\n            } else {\n                (0, _mermaidB0Ad2De1Js.l).info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n                (0, _mermaidB0Ad2De1Js.l).debug(\"Not Setting parent for node=\", node, \"cluster!==rootId\", clusterId !== rootId, \"node!==clusterId\", node !== clusterId);\n            }\n            const edges = graph.edges(node);\n            (0, _mermaidB0Ad2De1Js.l).debug(\"Copying Edges\", edges);\n            edges.forEach((edge)=>{\n                (0, _mermaidB0Ad2De1Js.l).info(\"Edge\", edge);\n                const data2 = graph.edge(edge.v, edge.w, edge.name);\n                (0, _mermaidB0Ad2De1Js.l).info(\"Edge data\", data2, rootId);\n                try {\n                    if (edgeInCluster(edge, rootId)) {\n                        (0, _mermaidB0Ad2De1Js.l).info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n                        newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n                        (0, _mermaidB0Ad2De1Js.l).info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n                    } else (0, _mermaidB0Ad2De1Js.l).info(\"Skipping copy of edge \", edge.v, \"-->\", edge.w, \" rootId: \", rootId, \" clusterId:\", clusterId);\n                } catch (e) {\n                    (0, _mermaidB0Ad2De1Js.l).error(e);\n                }\n            });\n        }\n        (0, _mermaidB0Ad2De1Js.l).debug(\"Removing node\", node);\n        graph.removeNode(node);\n    });\n};\nconst extractDescendants = (id, graph)=>{\n    const children = graph.children(id);\n    let res = [\n        ...children\n    ];\n    for (const child of children){\n        parents[child] = id;\n        res = [\n            ...res,\n            ...extractDescendants(child, graph)\n        ];\n    }\n    return res;\n};\nconst findNonClusterChild = (id, graph)=>{\n    (0, _mermaidB0Ad2De1Js.l).trace(\"Searching\", id);\n    const children = graph.children(id);\n    (0, _mermaidB0Ad2De1Js.l).trace(\"Searching children of id \", id, children);\n    if (children.length < 1) {\n        (0, _mermaidB0Ad2De1Js.l).trace(\"This is a valid node\", id);\n        return id;\n    }\n    for (const child of children){\n        const _id = findNonClusterChild(child, graph);\n        if (_id) {\n            (0, _mermaidB0Ad2De1Js.l).trace(\"Found replacement for\", id, \" => \", _id);\n            return _id;\n        }\n    }\n};\nconst getAnchorId = (id)=>{\n    if (!clusterDb[id]) return id;\n    if (!clusterDb[id].externalConnections) return id;\n    if (clusterDb[id]) return clusterDb[id].id;\n    return id;\n};\nconst adjustClustersAndEdges = (graph, depth)=>{\n    if (!graph || depth > 10) {\n        (0, _mermaidB0Ad2De1Js.l).debug(\"Opting out, no graph \");\n        return;\n    } else (0, _mermaidB0Ad2De1Js.l).debug(\"Opting in, graph \");\n    graph.nodes().forEach(function(id) {\n        const children = graph.children(id);\n        if (children.length > 0) {\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Cluster identified\", id, \" Replacement id in edges: \", findNonClusterChild(id, graph));\n            descendants[id] = extractDescendants(id, graph);\n            clusterDb[id] = {\n                id: findNonClusterChild(id, graph),\n                clusterData: graph.node(id)\n            };\n        }\n    });\n    graph.nodes().forEach(function(id) {\n        const children = graph.children(id);\n        const edges = graph.edges();\n        if (children.length > 0) {\n            (0, _mermaidB0Ad2De1Js.l).debug(\"Cluster identified\", id, descendants);\n            edges.forEach((edge)=>{\n                if (edge.v !== id && edge.w !== id) {\n                    const d1 = isDescendant(edge.v, id);\n                    const d2 = isDescendant(edge.w, id);\n                    if (d1 ^ d2) {\n                        (0, _mermaidB0Ad2De1Js.l).warn(\"Edge: \", edge, \" leaves cluster \", id);\n                        (0, _mermaidB0Ad2De1Js.l).warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n                        clusterDb[id].externalConnections = true;\n                    }\n                }\n            });\n        } else (0, _mermaidB0Ad2De1Js.l).debug(\"Not a cluster \", id, descendants);\n    });\n    graph.edges().forEach(function(e) {\n        const edge = graph.edge(e);\n        (0, _mermaidB0Ad2De1Js.l).warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n        (0, _mermaidB0Ad2De1Js.l).warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n        let v = e.v;\n        let w = e.w;\n        (0, _mermaidB0Ad2De1Js.l).warn(\"Fix XXX\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb[e.v], \" --- \", clusterDb[e.w]);\n        if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n            v = getAnchorId(e.v);\n            w = getAnchorId(e.w);\n            graph.removeEdge(e.v, e.w, e.name);\n            const specialId = e.w + \"---\" + e.v;\n            graph.setNode(specialId, {\n                domId: specialId,\n                id: specialId,\n                labelStyle: \"\",\n                labelText: edge.label,\n                padding: 0,\n                shape: \"labelRect\",\n                style: \"\"\n            });\n            const edge1 = JSON.parse(JSON.stringify(edge));\n            const edge2 = JSON.parse(JSON.stringify(edge));\n            edge1.label = \"\";\n            edge1.arrowTypeEnd = \"none\";\n            edge2.label = \"\";\n            edge1.fromCluster = e.v;\n            edge2.toCluster = e.v;\n            graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n            graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n        } else if (clusterDb[e.v] || clusterDb[e.w]) {\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n            v = getAnchorId(e.v);\n            w = getAnchorId(e.w);\n            graph.removeEdge(e.v, e.w, e.name);\n            if (v !== e.v) edge.fromCluster = e.v;\n            if (w !== e.w) edge.toCluster = e.w;\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Fix Replacing with XXX\", v, w, e.name);\n            graph.setEdge(v, w, edge, e.name);\n        }\n    });\n    (0, _mermaidB0Ad2De1Js.l).warn(\"Adjusted Graph\", _jsonJs.write(graph));\n    extractor(graph, 0);\n    (0, _mermaidB0Ad2De1Js.l).trace(clusterDb);\n};\nconst extractor = (graph, depth)=>{\n    (0, _mermaidB0Ad2De1Js.l).warn(\"extractor - \", depth, _jsonJs.write(graph), graph.children(\"D\"));\n    if (depth > 10) {\n        (0, _mermaidB0Ad2De1Js.l).error(\"Bailing out\");\n        return;\n    }\n    let nodes = graph.nodes();\n    let hasChildren = false;\n    for (const node of nodes){\n        const children = graph.children(node);\n        hasChildren = hasChildren || children.length > 0;\n    }\n    if (!hasChildren) {\n        (0, _mermaidB0Ad2De1Js.l).debug(\"Done, no node has children\", graph.nodes());\n        return;\n    }\n    (0, _mermaidB0Ad2De1Js.l).debug(\"Nodes = \", nodes, depth);\n    for (const node of nodes){\n        (0, _mermaidB0Ad2De1Js.l).debug(\"Extracting node\", node, clusterDb, clusterDb[node] && !clusterDb[node].externalConnections, !graph.parent(node), graph.node(node), graph.children(\"D\"), \" Depth \", depth);\n        if (!clusterDb[node]) (0, _mermaidB0Ad2De1Js.l).debug(\"Not a cluster\", node, depth);\n        else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n        graph.children(node) && graph.children(node).length > 0) {\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Cluster without external connections, without a parent and with children\", node, depth);\n            const graphSettings = graph.graph();\n            let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n            if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n                dir = clusterDb[node].clusterData.dir;\n                (0, _mermaidB0Ad2De1Js.l).warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n            }\n            const clusterGraph = new _indexJs1.Graph({\n                multigraph: true,\n                compound: true\n            }).setGraph({\n                rankdir: dir,\n                // Todo: set proper spacing\n                nodesep: 50,\n                ranksep: 50,\n                marginx: 8,\n                marginy: 8\n            }).setDefaultEdgeLabel(function() {\n                return {};\n            });\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Old graph before copy\", _jsonJs.write(graph));\n            copy(node, graph, clusterGraph, node);\n            graph.setNode(node, {\n                clusterNode: true,\n                id: node,\n                clusterData: clusterDb[node].clusterData,\n                labelText: clusterDb[node].labelText,\n                graph: clusterGraph\n            });\n            (0, _mermaidB0Ad2De1Js.l).warn(\"New graph after copy node: (\", node, \")\", _jsonJs.write(clusterGraph));\n            (0, _mermaidB0Ad2De1Js.l).debug(\"Old graph after copy\", _jsonJs.write(graph));\n        } else {\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Cluster ** \", node, \" **not meeting the criteria !externalConnections:\", !clusterDb[node].externalConnections, \" no parent: \", !graph.parent(node), \" children \", graph.children(node) && graph.children(node).length > 0, graph.children(\"D\"), depth);\n            (0, _mermaidB0Ad2De1Js.l).debug(clusterDb);\n        }\n    }\n    nodes = graph.nodes();\n    (0, _mermaidB0Ad2De1Js.l).warn(\"New list of nodes\", nodes);\n    for (const node of nodes){\n        const data = graph.node(node);\n        (0, _mermaidB0Ad2De1Js.l).warn(\" Now next level\", node, data);\n        if (data.clusterNode) extractor(data.graph, depth + 1);\n    }\n};\nconst sorter = (graph, nodes)=>{\n    if (nodes.length === 0) return [];\n    let result = Object.assign(nodes);\n    nodes.forEach((node)=>{\n        const children = graph.children(node);\n        const sorted = sorter(graph, children);\n        result = [\n            ...result,\n            ...sorted\n        ];\n    });\n    return result;\n};\nconst sortNodesByHierarchy = (graph)=>sorter(graph, graph.children());\nconst rect = (parent, node)=>{\n    (0, _mermaidB0Ad2De1Js.l).info(\"Creating subgraph rect for \", node.id, node);\n    const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n    const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    const useHtmlLabels = (0, _mermaidB0Ad2De1Js.n)((0, _mermaidB0Ad2De1Js.c)().flowchart.htmlLabels);\n    const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n    const text = node.labelType === \"markdown\" ? (0, _createText3Df630B5Js.c)(label, node.labelText, {\n        style: node.labelStyle,\n        useHtmlLabels\n    }) : label.node().appendChild((0, _edges49Ac43A2Js.c)(node.labelText, node.labelStyle, void 0, true));\n    let bbox = text.getBBox();\n    if ((0, _mermaidB0Ad2De1Js.n)((0, _mermaidB0Ad2De1Js.c)().flowchart.htmlLabels)) {\n        const div = text.children[0];\n        const dv = (0, _d3.select)(text);\n        bbox = div.getBoundingClientRect();\n        dv.attr(\"width\", bbox.width);\n        dv.attr(\"height\", bbox.height);\n    }\n    const padding = 0 * node.padding;\n    const halfPadding = padding / 2;\n    const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n    if (node.width <= bbox.width + padding) node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n    else node.diff = -node.padding / 2;\n    (0, _mermaidB0Ad2De1Js.l).trace(\"Data \", node, JSON.stringify(node));\n    rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n    if (useHtmlLabels) label.attr(\"transform\", // This puts the labal on top of the box instead of inside it\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\");\n    else label.attr(\"transform\", // This puts the labal on top of the box instead of inside it\n    \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\");\n    const rectBox = rect2.node().getBBox();\n    node.width = rectBox.width;\n    node.height = rectBox.height;\n    node.intersect = function(point) {\n        return (0, _edges49Ac43A2Js.i)(node, point);\n    };\n    return shapeSvg;\n};\nconst noteGroup = (parent, node)=>{\n    const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n    const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    const padding = 0 * node.padding;\n    const halfPadding = padding / 2;\n    rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n    const rectBox = rect2.node().getBBox();\n    node.width = rectBox.width;\n    node.height = rectBox.height;\n    node.intersect = function(point) {\n        return (0, _edges49Ac43A2Js.i)(node, point);\n    };\n    return shapeSvg;\n};\nconst roundedWithTitle = (parent, node)=>{\n    const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n    const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n    const innerRect = shapeSvg.append(\"rect\");\n    const text = label.node().appendChild((0, _edges49Ac43A2Js.c)(node.labelText, node.labelStyle, void 0, true));\n    let bbox = text.getBBox();\n    if ((0, _mermaidB0Ad2De1Js.n)((0, _mermaidB0Ad2De1Js.c)().flowchart.htmlLabels)) {\n        const div = text.children[0];\n        const dv = (0, _d3.select)(text);\n        bbox = div.getBoundingClientRect();\n        dv.attr(\"width\", bbox.width);\n        dv.attr(\"height\", bbox.height);\n    }\n    bbox = text.getBBox();\n    const padding = 0 * node.padding;\n    const halfPadding = padding / 2;\n    const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n    if (node.width <= bbox.width + node.padding) node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n    else node.diff = -node.padding / 2;\n    rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n    innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n    label.attr(\"transform\", \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + ((0, _mermaidB0Ad2De1Js.n)((0, _mermaidB0Ad2De1Js.c)().flowchart.htmlLabels) ? 5 : 3)) + \")\");\n    const rectBox = rect2.node().getBBox();\n    node.height = rectBox.height;\n    node.intersect = function(point) {\n        return (0, _edges49Ac43A2Js.i)(node, point);\n    };\n    return shapeSvg;\n};\nconst divider = (parent, node)=>{\n    const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n    const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    const padding = 0 * node.padding;\n    const halfPadding = padding / 2;\n    rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n    const rectBox = rect2.node().getBBox();\n    node.width = rectBox.width;\n    node.height = rectBox.height;\n    node.diff = -node.padding / 2;\n    node.intersect = function(point) {\n        return (0, _edges49Ac43A2Js.i)(node, point);\n    };\n    return shapeSvg;\n};\nconst shapes = {\n    rect,\n    roundedWithTitle,\n    noteGroup,\n    divider\n};\nlet clusterElems = {};\nconst insertCluster = (elem, node)=>{\n    (0, _mermaidB0Ad2De1Js.l).trace(\"Inserting cluster\");\n    const shape = node.shape || \"rect\";\n    clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = ()=>{\n    clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, parentCluster)=>{\n    (0, _mermaidB0Ad2De1Js.l).info(\"Graph in recursive render: XXX\", _jsonJs.write(graph), parentCluster);\n    const dir = graph.graph().rankdir;\n    (0, _mermaidB0Ad2De1Js.l).trace(\"Dir in recursive render - dir:\", dir);\n    const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n    if (!graph.nodes()) (0, _mermaidB0Ad2De1Js.l).info(\"No nodes found for\", graph);\n    else (0, _mermaidB0Ad2De1Js.l).info(\"Recursive render XXX\", graph.nodes());\n    if (graph.edges().length > 0) (0, _mermaidB0Ad2De1Js.l).trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n    const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n    const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n    const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n    const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n    await Promise.all(graph.nodes().map(async function(v) {\n        const node = graph.node(v);\n        if (parentCluster !== void 0) {\n            const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n            (0, _mermaidB0Ad2De1Js.l).info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n            graph.setNode(parentCluster.id, data);\n            if (!graph.parent(v)) {\n                (0, _mermaidB0Ad2De1Js.l).trace(\"Setting parent\", v, parentCluster.id);\n                graph.setParent(v, parentCluster.id, data);\n            }\n        }\n        (0, _mermaidB0Ad2De1Js.l).info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n        if (node && node.clusterNode) {\n            (0, _mermaidB0Ad2De1Js.l).info(\"Cluster identified\", v, node.width, graph.node(v));\n            const o = await recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n            const newEl = o.elem;\n            (0, _edges49Ac43A2Js.u)(node, newEl);\n            node.diff = o.diff || 0;\n            (0, _mermaidB0Ad2De1Js.l).info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n            (0, _edges49Ac43A2Js.s)(newEl, node);\n            (0, _mermaidB0Ad2De1Js.l).warn(\"Recursive render complete \", newEl, node);\n        } else if (graph.children(v).length > 0) {\n            (0, _mermaidB0Ad2De1Js.l).info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n            (0, _mermaidB0Ad2De1Js.l).info(findNonClusterChild(node.id, graph));\n            clusterDb[node.id] = {\n                id: findNonClusterChild(node.id, graph),\n                node\n            };\n        } else {\n            (0, _mermaidB0Ad2De1Js.l).info(\"Node - the non recursive path\", v, node.id, node);\n            await (0, _edges49Ac43A2Js.e)(nodes, graph.node(v), dir);\n        }\n    }));\n    graph.edges().forEach(function(e) {\n        const edge = graph.edge(e.v, e.w, e.name);\n        (0, _mermaidB0Ad2De1Js.l).info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n        (0, _mermaidB0Ad2De1Js.l).info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n        (0, _mermaidB0Ad2De1Js.l).info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n        (0, _edges49Ac43A2Js.f)(edgeLabels, edge);\n    });\n    graph.edges().forEach(function(e) {\n        (0, _mermaidB0Ad2De1Js.l).info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    });\n    (0, _mermaidB0Ad2De1Js.l).info(\"#############################################\");\n    (0, _mermaidB0Ad2De1Js.l).info(\"###                Layout                 ###\");\n    (0, _mermaidB0Ad2De1Js.l).info(\"#############################################\");\n    (0, _mermaidB0Ad2De1Js.l).info(graph);\n    (0, _indexJs.layout)(graph);\n    (0, _mermaidB0Ad2De1Js.l).info(\"Graph after layout:\", _jsonJs.write(graph));\n    let diff = 0;\n    sortNodesByHierarchy(graph).forEach(function(v) {\n        const node = graph.node(v);\n        (0, _mermaidB0Ad2De1Js.l).info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n        (0, _mermaidB0Ad2De1Js.l).info(\"Position \" + v + \": (\" + node.x, \",\" + node.y, \") width: \", node.width, \" height: \", node.height);\n        if (node && node.clusterNode) (0, _edges49Ac43A2Js.p)(node);\n        else if (graph.children(v).length > 0) {\n            insertCluster(clusters, node);\n            clusterDb[node.id].node = node;\n        } else (0, _edges49Ac43A2Js.p)(node);\n    });\n    graph.edges().forEach(function(e) {\n        const edge = graph.edge(e);\n        (0, _mermaidB0Ad2De1Js.l).info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n        const paths = (0, _edges49Ac43A2Js.g)(edgePaths, e, edge, clusterDb, diagramtype, graph);\n        (0, _edges49Ac43A2Js.h)(edge, paths);\n    });\n    graph.nodes().forEach(function(v) {\n        const n = graph.node(v);\n        (0, _mermaidB0Ad2De1Js.l).info(v, n.type, n.diff);\n        if (n.type === \"group\") diff = n.diff;\n    });\n    return {\n        elem,\n        diff\n    };\n};\nconst render = async (elem, graph, markers, diagramtype, id)=>{\n    (0, _edges49Ac43A2Js.a)(elem, markers, diagramtype, id);\n    (0, _edges49Ac43A2Js.b)();\n    (0, _edges49Ac43A2Js.d)();\n    clear();\n    clear$1();\n    (0, _mermaidB0Ad2De1Js.l).warn(\"Graph at first:\", _jsonJs.write(graph));\n    adjustClustersAndEdges(graph);\n    (0, _mermaidB0Ad2De1Js.l).warn(\"Graph after:\", _jsonJs.write(graph));\n    await recursiveRender(elem, graph, diagramtype);\n};\n\n},{\"dagre-d3-es/src/dagre/index.js\":\"9xp7T\",\"dagre-d3-es/src/graphlib/json.js\":\"5pdrN\",\"./edges-49ac43a2.js\":\"ayTP7\",\"./mermaid-b0ad2de1.js\":\"42V0c\",\"dagre-d3-es/src/graphlib/index.js\":\"j6NXy\",\"./createText-3df630b5.js\":\"590AZ\",\"d3\":\"ahWNw\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"5pdrN\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"write\", ()=>write);\nparcelHelpers.export(exports, \"read\", ()=>read);\nvar _lodashEs = require(\"lodash-es\");\nvar _graphJs = require(\"./graph.js\");\nfunction write(g) {\n    var json = {\n        options: {\n            directed: g.isDirected(),\n            multigraph: g.isMultigraph(),\n            compound: g.isCompound()\n        },\n        nodes: writeNodes(g),\n        edges: writeEdges(g)\n    };\n    if (!_lodashEs.isUndefined(g.graph())) json.value = _lodashEs.clone(g.graph());\n    return json;\n}\nfunction writeNodes(g) {\n    return _lodashEs.map(g.nodes(), function(v) {\n        var nodeValue = g.node(v);\n        var parent = g.parent(v);\n        var node = {\n            v: v\n        };\n        if (!_lodashEs.isUndefined(nodeValue)) node.value = nodeValue;\n        if (!_lodashEs.isUndefined(parent)) node.parent = parent;\n        return node;\n    });\n}\nfunction writeEdges(g) {\n    return _lodashEs.map(g.edges(), function(e) {\n        var edgeValue = g.edge(e);\n        var edge = {\n            v: e.v,\n            w: e.w\n        };\n        if (!_lodashEs.isUndefined(e.name)) edge.name = e.name;\n        if (!_lodashEs.isUndefined(edgeValue)) edge.value = edgeValue;\n        return edge;\n    });\n}\nfunction read(json) {\n    var g = new (0, _graphJs.Graph)(json.options).setGraph(json.value);\n    _lodashEs.each(json.nodes, function(entry) {\n        g.setNode(entry.v, entry.value);\n        if (entry.parent) g.setParent(entry.v, entry.parent);\n    });\n    _lodashEs.each(json.edges, function(entry) {\n        g.setEdge({\n            v: entry.v,\n            w: entry.w,\n            name: entry.name\n        }, entry.value);\n    });\n    return g;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"./graph.js\":\"84V0B\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequire9da7\")\n\n//# sourceMappingURL=flowDiagram-93327f21.9bd9e649.js.map\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-49ac43a2.js\";\nimport { l as log, n as evaluate, c as getConfig } from \"./mermaid-b0ad2de1.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as createText } from \"./createText-3df630b5.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = JSON.parse(JSON.stringify(edge));\n      const edge2 = JSON.parse(JSON.stringify(edge));\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", graphlibJson.write(graph));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", graphlibJson.write(graph));\n  await recursiveRender(elem, graph, diagramtype);\n};\nexport {\n  render as r\n};\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","render","_indexJs","_jsonJs","_edges49Ac43A2Js","_mermaidB0Ad2De1Js","_indexJs1","_createText3Df630B5Js","_d3","clusterDb","descendants","parents","clear$1","isDescendant","ancenstorId","l","trace","includes","edgeInCluster","edge","clusterId","info","v","w","debug","copy","graph","newGraph","rootId","warn","node","nodes","children","push","forEach","data","setNode","setParent","edges","data2","setEdge","e","error","removeNode","extractDescendants","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","parse","edge2","arrowTypeEnd","fromCluster","toCluster","write","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","Graph","multigraph","compound","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","assign","sorted","sortNodesByHierarchy","shapes","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","n","c","flowchart","htmlLabels","text","labelType","appendChild","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","y","rectBox","intersect","point","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","insertCluster","elem","clear","recursiveRender","_elem","diagramtype","parentCluster","clusters","edgePaths","edgeLabels","Promise","all","map","o","newEl","u","s","f","layout","p","paths","g","h","type","markers","a","b","d","read","_lodashEs","_graphJs","json","options","directed","isDirected","isMultigraph","isCompound","nodeValue","isUndefined","value","edgeValue","clone","each"],"version":3,"file":"flowDiagram-93327f21.9bd9e649.js.map"}