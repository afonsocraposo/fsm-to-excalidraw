{"mappings":"C,A,kC;A,uC;A,E;A,2D;A,E;A,4D;A,wD;A,S,C,C,C,C,C,C,C,C,C,E,2B,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,0D;A,+D;A,8B;A,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,E,gE;A,6D;A,+D;A,gC;A,G,E,O,E,E,C,E,+C;A,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,qD;A,yE;A,I,E,E,E,Y;A,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,C,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GC6LA,EAAA,MAAA,CAAA,EAAA,IAAA,IACE,GA9LF,IAAA,EAAA,EAAA,yBACA,EAAA,EAAA,4BACA,EAAA,EAAA,aAyFA,SAAS,EAAY,CAAW,CAAE,CAAS,CAAE,CAAU,EACrD,OAAO,EAAY,MAAA,CAAO,SAAS,IAAA,CAAK,QAAS,oBAAoB,IAAA,CAAK,IAAK,GAAG,IAAA,CAAK,IAAK,EAAY,EAAa,GAAM,MAAM,IAAA,CAAK,KAAM,EAAa,KAC3J,CACA,SAAS,EAAmB,CAAU,CAAE,CAAU,CAAE,CAAI,EACtD,IAAM,EAAc,EAAW,MA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","sources":["<anon>","node_modules/mermaid/dist/createText-3df630b5.js","node_modules/mdast-util-from-markdown/index.js","node_modules/mdast-util-from-markdown/lib/index.js","node_modules/mdast-util-to-string/index.js","node_modules/mdast-util-to-string/lib/index.js","node_modules/micromark/lib/parse.js","node_modules/micromark-util-combine-extensions/index.js","node_modules/micromark-util-chunked/index.js","node_modules/micromark/lib/initialize/content.js","node_modules/micromark-factory-space/index.js","node_modules/micromark-util-character/index.js","node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","node_modules/micromark/lib/initialize/document.js","node_modules/micromark/lib/initialize/flow.js","node_modules/micromark-core-commonmark/index.js","node_modules/micromark-core-commonmark/lib/attention.js","node_modules/micromark-util-classify-character/index.js","node_modules/micromark-util-resolve-all/index.js","node_modules/micromark-core-commonmark/lib/autolink.js","node_modules/micromark-core-commonmark/lib/blank-line.js","node_modules/micromark-core-commonmark/lib/block-quote.js","node_modules/micromark-core-commonmark/lib/character-escape.js","node_modules/micromark-core-commonmark/lib/character-reference.js","node_modules/decode-named-character-reference/index.js","node_modules/character-entities/index.js","node_modules/micromark-core-commonmark/lib/code-fenced.js","node_modules/micromark-core-commonmark/lib/code-indented.js","node_modules/micromark-core-commonmark/lib/code-text.js","node_modules/micromark-core-commonmark/lib/content.js","node_modules/micromark-util-subtokenize/index.js","node_modules/micromark-core-commonmark/lib/definition.js","node_modules/micromark-factory-destination/index.js","node_modules/micromark-factory-label/index.js","node_modules/micromark-factory-title/index.js","node_modules/micromark-factory-whitespace/index.js","node_modules/micromark-util-normalize-identifier/index.js","node_modules/micromark-core-commonmark/lib/hard-break-escape.js","node_modules/micromark-core-commonmark/lib/heading-atx.js","node_modules/micromark-core-commonmark/lib/html-flow.js","node_modules/micromark-util-html-tag-name/index.js","node_modules/micromark-core-commonmark/lib/html-text.js","node_modules/micromark-core-commonmark/lib/label-end.js","node_modules/micromark-core-commonmark/lib/label-start-image.js","node_modules/micromark-core-commonmark/lib/label-start-link.js","node_modules/micromark-core-commonmark/lib/line-ending.js","node_modules/micromark-core-commonmark/lib/list.js","node_modules/micromark-core-commonmark/lib/thematic-break.js","node_modules/micromark-core-commonmark/lib/setext-underline.js","node_modules/micromark/lib/initialize/text.js","node_modules/micromark/lib/create-tokenizer.js","node_modules/micromark/lib/constructs.js","node_modules/micromark/lib/preprocess.js","node_modules/micromark/lib/postprocess.js","node_modules/micromark-util-decode-numeric-character-reference/index.js","node_modules/micromark-util-decode-string/index.js","node_modules/unist-util-stringify-position/index.js","node_modules/unist-util-stringify-position/lib/index.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"590AZ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"c\", ()=>createText);\nvar _mermaidB0Ad2De1Js = require(\"./mermaid-b0ad2de1.js\");\nvar _mdastUtilFromMarkdown = require(\"mdast-util-from-markdown\");\nvar _tsDedent = require(\"ts-dedent\");\nfunction preprocessMarkdown(markdown) {\n    const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n    const withoutExtraSpaces = (0, _tsDedent.dedent)(withoutMultipleNewlines);\n    return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n    const preprocessedMarkdown = preprocessMarkdown(markdown);\n    const { children  } = (0, _mdastUtilFromMarkdown.fromMarkdown)(preprocessedMarkdown);\n    const lines = [\n        []\n    ];\n    let currentLine = 0;\n    function processNode(node, parentType = \"normal\") {\n        if (node.type === \"text\") {\n            const textLines = node.value.split(\"\\n\");\n            textLines.forEach((textLine, index)=>{\n                if (index !== 0) {\n                    currentLine++;\n                    lines.push([]);\n                }\n                textLine.split(\" \").forEach((word)=>{\n                    if (word) lines[currentLine].push({\n                        content: word,\n                        type: parentType\n                    });\n                });\n            });\n        } else if (node.type === \"strong\" || node.type === \"emphasis\") node.children.forEach((contentNode)=>{\n            processNode(contentNode, node.type);\n        });\n    }\n    children.forEach((treeNode)=>{\n        if (treeNode.type === \"paragraph\") treeNode.children.forEach((contentNode)=>{\n            processNode(contentNode);\n        });\n    });\n    return lines;\n}\nfunction markdownToHTML(markdown) {\n    const { children  } = (0, _mdastUtilFromMarkdown.fromMarkdown)(markdown);\n    function output(node) {\n        if (node.type === \"text\") return node.value.replace(/\\n/g, \"<br/>\");\n        else if (node.type === \"strong\") return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n        else if (node.type === \"emphasis\") return `<em>${node.children.map(output).join(\"\")}</em>`;\n        else if (node.type === \"paragraph\") return `<p>${node.children.map(output).join(\"\")}</p>`;\n        return `Unsupported markdown: ${node.type}`;\n    }\n    return children.map(output).join(\"\");\n}\nfunction applyStyle(dom, styleFn) {\n    if (styleFn) dom.attr(\"style\", styleFn);\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n    const fo = element.append(\"foreignObject\");\n    const div = fo.append(\"xhtml:div\");\n    const label = node.label;\n    const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n    div.html(`\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\");\n    applyStyle(div, node.labelStyle);\n    div.style(\"display\", \"table-cell\");\n    div.style(\"white-space\", \"nowrap\");\n    div.style(\"max-width\", width + \"px\");\n    div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n    if (addBackground) div.attr(\"class\", \"labelBkg\");\n    let bbox = div.node().getBoundingClientRect();\n    if (bbox.width === width) {\n        div.style(\"display\", \"table\");\n        div.style(\"white-space\", \"break-spaces\");\n        div.style(\"width\", width + \"px\");\n        bbox = div.node().getBoundingClientRect();\n    }\n    fo.style(\"width\", bbox.width);\n    fo.style(\"height\", bbox.height);\n    return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n    return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, text) {\n    const testElement = parentNode.append(\"text\");\n    const testSpan = createTspan(testElement, 1, lineHeight);\n    updateTextContentAndStyles(testSpan, [\n        {\n            content: text,\n            type: \"normal\"\n        }\n    ]);\n    const textLength = testSpan.node().getComputedTextLength();\n    testElement.remove();\n    return textLength;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n    const lineHeight = 1.1;\n    const labelGroup = g.append(\"g\");\n    let bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n    const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n    let lineIndex = 0;\n    structuredText.forEach((line)=>{\n        let fullStr = line.map((data)=>data.content).join(\" \");\n        let tempStr = \"\";\n        let linesUnderWidth = [];\n        let prevIndex = 0;\n        if (computeWidthOfText(labelGroup, lineHeight, fullStr) <= width) linesUnderWidth.push(fullStr);\n        else {\n            for(let i = 0; i <= fullStr.length; i++){\n                tempStr = fullStr.slice(prevIndex, i);\n                (0, _mermaidB0Ad2De1Js.l).info(tempStr, prevIndex, i);\n                if (computeWidthOfText(labelGroup, lineHeight, tempStr) > width) {\n                    const subStr = fullStr.slice(prevIndex, i);\n                    const lastSpaceIndex = subStr.lastIndexOf(\" \");\n                    if (lastSpaceIndex > -1) i = prevIndex + lastSpaceIndex + 1;\n                    linesUnderWidth.push(fullStr.slice(prevIndex, i).trim());\n                    prevIndex = i;\n                    tempStr = null;\n                }\n            }\n            if (tempStr != null) linesUnderWidth.push(tempStr);\n        }\n        const preparedLines = linesUnderWidth.map((w)=>({\n                content: w,\n                type: line.type\n            }));\n        for (const preparedLine of preparedLines){\n            let tspan = createTspan(textElement, lineIndex, lineHeight);\n            updateTextContentAndStyles(tspan, [\n                preparedLine\n            ]);\n            lineIndex++;\n        }\n    });\n    if (addBackground) {\n        const bbox = textElement.node().getBBox();\n        const padding = 2;\n        bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n        return labelGroup.node();\n    } else return textElement.node();\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n    tspan.text(\"\");\n    wrappedLine.forEach((word, index)=>{\n        const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"em\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n        if (index === 0) innerTspan.text(word.content);\n        else innerTspan.text(\" \" + word.content);\n    });\n}\nconst createText = (el, text = \"\", { style =\"\" , isTitle =false , classes =\"\" , useHtmlLabels =true , isNode =true , width , addSvgBackground =false  } = {})=>{\n    (0, _mermaidB0Ad2De1Js.l).info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n    if (useHtmlLabels) {\n        const htmlText = markdownToHTML(text);\n        const node = {\n            isNode,\n            label: (0, _mermaidB0Ad2De1Js.H)(htmlText).replace(/fa[blrs]?:fa-[\\w-]+/g, (s)=>`<i class='${s.replace(\":\", \" \")}'></i>`),\n            labelStyle: style.replace(\"fill:\", \"color:\")\n        };\n        let vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n        return vertexNode;\n    } else {\n        const structuredText = markdownToLines(text);\n        const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n        return svgLabel;\n    }\n};\n\n},{\"./mermaid-b0ad2de1.js\":\"42V0c\",\"mdast-util-from-markdown\":\"i9FLz\",\"ts-dedent\":\"azOLv\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"i9FLz\":[function(require,module,exports) {\n// Note: types exported from `index.d.ts`.\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"fromMarkdown\", ()=>(0, _indexJs.fromMarkdown));\nvar _indexJs = require(\"./lib/index.js\");\n\n},{\"./lib/index.js\":\"a4h3w\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"a4h3w\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */ /**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */ /**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */ /**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */ // To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"fromMarkdown\", ()=>fromMarkdown);\nvar _mdastUtilToString = require(\"mdast-util-to-string\");\nvar _parseJs = require(\"micromark/lib/parse.js\");\nvar _preprocessJs = require(\"micromark/lib/preprocess.js\");\nvar _postprocessJs = require(\"micromark/lib/postprocess.js\");\nvar _micromarkUtilDecodeNumericCharacterReference = require(\"micromark-util-decode-numeric-character-reference\");\nvar _micromarkUtilDecodeString = require(\"micromark-util-decode-string\");\nvar _micromarkUtilNormalizeIdentifier = require(\"micromark-util-normalize-identifier\");\nvar _decodeNamedCharacterReference = require(\"decode-named-character-reference\");\nvar _unistUtilStringifyPosition = require(\"unist-util-stringify-position\");\nconst own = {}.hasOwnProperty;\nconst fromMarkdown = /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */ /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */ function(value, encoding, options) {\n    if (typeof encoding !== \"string\") {\n        options = encoding;\n        encoding = undefined;\n    }\n    return compiler(options)((0, _postprocessJs.postprocess)((0, _parseJs.parse)(options).document().write((0, _preprocessJs.preprocess)()(value, encoding, true))));\n};\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */ function compiler(options) {\n    /** @type {Config} */ const config = {\n        transforms: [],\n        canContainEols: [\n            \"emphasis\",\n            \"fragment\",\n            \"heading\",\n            \"paragraph\",\n            \"strong\"\n        ],\n        enter: {\n            autolink: opener(link),\n            autolinkProtocol: onenterdata,\n            autolinkEmail: onenterdata,\n            atxHeading: opener(heading),\n            blockQuote: opener(blockQuote),\n            characterEscape: onenterdata,\n            characterReference: onenterdata,\n            codeFenced: opener(codeFlow),\n            codeFencedFenceInfo: buffer,\n            codeFencedFenceMeta: buffer,\n            codeIndented: opener(codeFlow, buffer),\n            codeText: opener(codeText, buffer),\n            codeTextData: onenterdata,\n            data: onenterdata,\n            codeFlowValue: onenterdata,\n            definition: opener(definition),\n            definitionDestinationString: buffer,\n            definitionLabelString: buffer,\n            definitionTitleString: buffer,\n            emphasis: opener(emphasis),\n            hardBreakEscape: opener(hardBreak),\n            hardBreakTrailing: opener(hardBreak),\n            htmlFlow: opener(html, buffer),\n            htmlFlowData: onenterdata,\n            htmlText: opener(html, buffer),\n            htmlTextData: onenterdata,\n            image: opener(image),\n            label: buffer,\n            link: opener(link),\n            listItem: opener(listItem),\n            listItemValue: onenterlistitemvalue,\n            listOrdered: opener(list, onenterlistordered),\n            listUnordered: opener(list),\n            paragraph: opener(paragraph),\n            reference: onenterreference,\n            referenceString: buffer,\n            resourceDestinationString: buffer,\n            resourceTitleString: buffer,\n            setextHeading: opener(heading),\n            strong: opener(strong),\n            thematicBreak: opener(thematicBreak)\n        },\n        exit: {\n            atxHeading: closer(),\n            atxHeadingSequence: onexitatxheadingsequence,\n            autolink: closer(),\n            autolinkEmail: onexitautolinkemail,\n            autolinkProtocol: onexitautolinkprotocol,\n            blockQuote: closer(),\n            characterEscapeValue: onexitdata,\n            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n            characterReferenceValue: onexitcharacterreferencevalue,\n            codeFenced: closer(onexitcodefenced),\n            codeFencedFence: onexitcodefencedfence,\n            codeFencedFenceInfo: onexitcodefencedfenceinfo,\n            codeFencedFenceMeta: onexitcodefencedfencemeta,\n            codeFlowValue: onexitdata,\n            codeIndented: closer(onexitcodeindented),\n            codeText: closer(onexitcodetext),\n            codeTextData: onexitdata,\n            data: onexitdata,\n            definition: closer(),\n            definitionDestinationString: onexitdefinitiondestinationstring,\n            definitionLabelString: onexitdefinitionlabelstring,\n            definitionTitleString: onexitdefinitiontitlestring,\n            emphasis: closer(),\n            hardBreakEscape: closer(onexithardbreak),\n            hardBreakTrailing: closer(onexithardbreak),\n            htmlFlow: closer(onexithtmlflow),\n            htmlFlowData: onexitdata,\n            htmlText: closer(onexithtmltext),\n            htmlTextData: onexitdata,\n            image: closer(onexitimage),\n            label: onexitlabel,\n            labelText: onexitlabeltext,\n            lineEnding: onexitlineending,\n            link: closer(onexitlink),\n            listItem: closer(),\n            listOrdered: closer(),\n            listUnordered: closer(),\n            paragraph: closer(),\n            referenceString: onexitreferencestring,\n            resourceDestinationString: onexitresourcedestinationstring,\n            resourceTitleString: onexitresourcetitlestring,\n            resource: onexitresource,\n            setextHeading: closer(onexitsetextheading),\n            setextHeadingLineSequence: onexitsetextheadinglinesequence,\n            setextHeadingText: onexitsetextheadingtext,\n            strong: closer(),\n            thematicBreak: closer()\n        }\n    };\n    configure(config, (options || {}).mdastExtensions || []);\n    /** @type {CompileData} */ const data = {};\n    return compile;\n    /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */ function compile(events) {\n        /** @type {Root} */ let tree = {\n            type: \"root\",\n            children: []\n        };\n        /** @type {Omit<CompileContext, 'sliceSerialize'>} */ const context = {\n            stack: [\n                tree\n            ],\n            tokenStack: [],\n            config,\n            enter,\n            exit,\n            buffer,\n            resume,\n            setData,\n            getData\n        };\n        /** @type {Array<number>} */ const listStack = [];\n        let index = -1;\n        while(++index < events.length)// We preprocess lists to add `listItem` tokens, and to infer whether\n        // items the list itself are spread out.\n        if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n            if (events[index][0] === \"enter\") listStack.push(index);\n            else {\n                const tail = listStack.pop();\n                index = prepareList(events, tail, index);\n            }\n        }\n        index = -1;\n        while(++index < events.length){\n            const handler = config[events[index][0]];\n            if (own.call(handler, events[index][1].type)) handler[events[index][1].type].call(Object.assign({\n                sliceSerialize: events[index][2].sliceSerialize\n            }, context), events[index][1]);\n        }\n        // Handle tokens still being open.\n        if (context.tokenStack.length > 0) {\n            const tail = context.tokenStack[context.tokenStack.length - 1];\n            const handler = tail[1] || defaultOnError;\n            handler.call(context, undefined, tail[0]);\n        }\n        // Figure out `root` position.\n        tree.position = {\n            start: point(events.length > 0 ? events[0][1].start : {\n                line: 1,\n                column: 1,\n                offset: 0\n            }),\n            end: point(events.length > 0 ? events[events.length - 2][1].end : {\n                line: 1,\n                column: 1,\n                offset: 0\n            })\n        };\n        // Call transforms.\n        index = -1;\n        while(++index < config.transforms.length)tree = config.transforms[index](tree) || tree;\n        return tree;\n    }\n    /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */ function prepareList(events, start, length) {\n        let index = start - 1;\n        let containerBalance = -1;\n        let listSpread = false;\n        /** @type {Token | undefined} */ let listItem;\n        /** @type {number | undefined} */ let lineIndex;\n        /** @type {number | undefined} */ let firstBlankLineIndex;\n        /** @type {boolean | undefined} */ let atMarker;\n        while(++index <= length){\n            const event = events[index];\n            if (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\" || event[1].type === \"blockQuote\") {\n                if (event[0] === \"enter\") containerBalance++;\n                else containerBalance--;\n                atMarker = undefined;\n            } else if (event[1].type === \"lineEndingBlank\") {\n                if (event[0] === \"enter\") {\n                    if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) firstBlankLineIndex = index;\n                    atMarker = undefined;\n                }\n            } else if (event[1].type === \"linePrefix\" || event[1].type === \"listItemValue\" || event[1].type === \"listItemMarker\" || event[1].type === \"listItemPrefix\" || event[1].type === \"listItemPrefixWhitespace\") ;\n            else atMarker = undefined;\n            if (!containerBalance && event[0] === \"enter\" && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === \"exit\" && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n                if (listItem) {\n                    let tailIndex = index;\n                    lineIndex = undefined;\n                    while(tailIndex--){\n                        const tailEvent = events[tailIndex];\n                        if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n                            if (tailEvent[0] === \"exit\") continue;\n                            if (lineIndex) {\n                                events[lineIndex][1].type = \"lineEndingBlank\";\n                                listSpread = true;\n                            }\n                            tailEvent[1].type = \"lineEnding\";\n                            lineIndex = tailIndex;\n                        } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") ;\n                        else break;\n                    }\n                    if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) listItem._spread = true;\n                    // Fix position.\n                    listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n                    events.splice(lineIndex || index, 0, [\n                        \"exit\",\n                        listItem,\n                        event[2]\n                    ]);\n                    index++;\n                    length++;\n                }\n                // Create a new list item.\n                if (event[1].type === \"listItemPrefix\") {\n                    listItem = {\n                        type: \"listItem\",\n                        _spread: false,\n                        start: Object.assign({}, event[1].start),\n                        // @ts-expect-error: we’ll add `end` in a second.\n                        end: undefined\n                    };\n                    // @ts-expect-error: `listItem` is most definitely defined, TS...\n                    events.splice(index, 0, [\n                        \"enter\",\n                        listItem,\n                        event[2]\n                    ]);\n                    index++;\n                    length++;\n                    firstBlankLineIndex = undefined;\n                    atMarker = true;\n                }\n            }\n        }\n        events[start][1]._spread = listSpread;\n        return length;\n    }\n    /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */ function setData(key, value) {\n        data[key] = value;\n    }\n    /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */ function getData(key) {\n        return data[key];\n    }\n    /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */ function opener(create, and) {\n        return open;\n        /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */ function open(token) {\n            enter.call(this, create(token), token);\n            if (and) and.call(this, token);\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @returns {void}\n   */ function buffer() {\n        this.stack.push({\n            type: \"fragment\",\n            children: []\n        });\n    }\n    /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */ function enter(node, token, errorHandler) {\n        const parent = this.stack[this.stack.length - 1];\n        // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n        parent.children.push(node);\n        this.stack.push(node);\n        this.tokenStack.push([\n            token,\n            errorHandler\n        ]);\n        // @ts-expect-error: `end` will be patched later.\n        node.position = {\n            start: point(token.start)\n        };\n        return node;\n    }\n    /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */ function closer(and) {\n        return close;\n        /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */ function close(token) {\n            if (and) and.call(this, token);\n            exit.call(this, token);\n        }\n    }\n    /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */ function exit(token, onExitError) {\n        const node = this.stack.pop();\n        const open = this.tokenStack.pop();\n        if (!open) throw new Error(\"Cannot close `\" + token.type + \"` (\" + (0, _unistUtilStringifyPosition.stringifyPosition)({\n            start: token.start,\n            end: token.end\n        }) + \"): it’s not open\");\n        else if (open[0].type !== token.type) {\n            if (onExitError) onExitError.call(this, token, open[0]);\n            else {\n                const handler = open[1] || defaultOnError;\n                handler.call(this, token, open[0]);\n            }\n        }\n        node.position.end = point(token.end);\n        return node;\n    }\n    /**\n   * @this {CompileContext}\n   * @returns {string}\n   */ function resume() {\n        return (0, _mdastUtilToString.toString)(this.stack.pop());\n    }\n    //\n    // Handlers.\n    //\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onenterlistordered() {\n        setData(\"expectingFirstListItemValue\", true);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onenterlistitemvalue(token) {\n        if (getData(\"expectingFirstListItemValue\")) {\n            const ancestor = this.stack[this.stack.length - 2];\n            ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n            setData(\"expectingFirstListItemValue\");\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodefencedfenceinfo() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.lang = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodefencedfencemeta() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.meta = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodefencedfence() {\n        // Exit if this is the closing fence.\n        if (getData(\"flowCodeInside\")) return;\n        this.buffer();\n        setData(\"flowCodeInside\", true);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodefenced() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, \"\");\n        setData(\"flowCodeInside\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodeindented() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.value = data.replace(/(\\r?\\n|\\r)$/g, \"\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitdefinitionlabelstring(token) {\n        const label = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.label = label;\n        node.identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitdefinitiontitlestring() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.title = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitdefinitiondestinationstring() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.url = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitatxheadingsequence(token) {\n        const node = this.stack[this.stack.length - 1];\n        if (!node.depth) {\n            const depth = this.sliceSerialize(token).length;\n            node.depth = depth;\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitsetextheadingtext() {\n        setData(\"setextHeadingSlurpLineEnding\", true);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitsetextheadinglinesequence(token) {\n        const node = this.stack[this.stack.length - 1];\n        node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitsetextheading() {\n        setData(\"setextHeadingSlurpLineEnding\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onenterdata(token) {\n        const node = this.stack[this.stack.length - 1];\n        let tail = node.children[node.children.length - 1];\n        if (!tail || tail.type !== \"text\") {\n            // Add a new text node.\n            tail = text();\n            // @ts-expect-error: we’ll add `end` later.\n            tail.position = {\n                start: point(token.start)\n            };\n            // @ts-expect-error: Assume `parent` accepts `text`.\n            node.children.push(tail);\n        }\n        this.stack.push(tail);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitdata(token) {\n        const tail = this.stack.pop();\n        tail.value += this.sliceSerialize(token);\n        tail.position.end = point(token.end);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitlineending(token) {\n        const context = this.stack[this.stack.length - 1];\n        // If we’re at a hard break, include the line ending in there.\n        if (getData(\"atHardBreak\")) {\n            const tail = context.children[context.children.length - 1];\n            tail.position.end = point(token.end);\n            setData(\"atHardBreak\");\n            return;\n        }\n        if (!getData(\"setextHeadingSlurpLineEnding\") && config.canContainEols.includes(context.type)) {\n            onenterdata.call(this, token);\n            onexitdata.call(this, token);\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexithardbreak() {\n        setData(\"atHardBreak\", true);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexithtmlflow() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.value = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexithtmltext() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.value = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcodetext() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.value = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitlink() {\n        const node = this.stack[this.stack.length - 1];\n        // Note: there are also `identifier` and `label` fields on this link node!\n        // These are used / cleaned here.\n        // To do: clean.\n        if (getData(\"inReference\")) {\n            /** @type {ReferenceType} */ const referenceType = getData(\"referenceType\") || \"shortcut\";\n            node.type += \"Reference\";\n            // @ts-expect-error: mutate.\n            node.referenceType = referenceType;\n            // @ts-expect-error: mutate.\n            delete node.url;\n            delete node.title;\n        } else {\n            // @ts-expect-error: mutate.\n            delete node.identifier;\n            // @ts-expect-error: mutate.\n            delete node.label;\n        }\n        setData(\"referenceType\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitimage() {\n        const node = this.stack[this.stack.length - 1];\n        // Note: there are also `identifier` and `label` fields on this link node!\n        // These are used / cleaned here.\n        // To do: clean.\n        if (getData(\"inReference\")) {\n            /** @type {ReferenceType} */ const referenceType = getData(\"referenceType\") || \"shortcut\";\n            node.type += \"Reference\";\n            // @ts-expect-error: mutate.\n            node.referenceType = referenceType;\n            // @ts-expect-error: mutate.\n            delete node.url;\n            delete node.title;\n        } else {\n            // @ts-expect-error: mutate.\n            delete node.identifier;\n            // @ts-expect-error: mutate.\n            delete node.label;\n        }\n        setData(\"referenceType\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitlabeltext(token) {\n        const string = this.sliceSerialize(token);\n        const ancestor = this.stack[this.stack.length - 2];\n        // @ts-expect-error: stash this on the node, as it might become a reference\n        // later.\n        ancestor.label = (0, _micromarkUtilDecodeString.decodeString)(string);\n        // @ts-expect-error: same as above.\n        ancestor.identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(string).toLowerCase();\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitlabel() {\n        const fragment = this.stack[this.stack.length - 1];\n        const value = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        // Assume a reference.\n        setData(\"inReference\", true);\n        if (node.type === \"link\") {\n            /** @type {Array<StaticPhrasingContent>} */ // @ts-expect-error: Assume static phrasing content.\n            const children = fragment.children;\n            node.children = children;\n        } else node.alt = value;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitresourcedestinationstring() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.url = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitresourcetitlestring() {\n        const data = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        node.title = data;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitresource() {\n        setData(\"inReference\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onenterreference() {\n        setData(\"referenceType\", \"collapsed\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitreferencestring(token) {\n        const label = this.resume();\n        const node = this.stack[this.stack.length - 1];\n        // @ts-expect-error: stash this on the node, as it might become a reference\n        // later.\n        node.label = label;\n        // @ts-expect-error: same as above.\n        node.identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\n        setData(\"referenceType\", \"full\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcharacterreferencemarker(token) {\n        setData(\"characterReferenceType\", token.type);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitcharacterreferencevalue(token) {\n        const data = this.sliceSerialize(token);\n        const type = getData(\"characterReferenceType\");\n        /** @type {string} */ let value;\n        if (type) {\n            value = (0, _micromarkUtilDecodeNumericCharacterReference.decodeNumericCharacterReference)(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n            setData(\"characterReferenceType\");\n        } else {\n            const result = (0, _decodeNamedCharacterReference.decodeNamedCharacterReference)(data);\n            value = result;\n        }\n        const tail = this.stack.pop();\n        tail.value += value;\n        tail.position.end = point(token.end);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitautolinkprotocol(token) {\n        onexitdata.call(this, token);\n        const node = this.stack[this.stack.length - 1];\n        node.url = this.sliceSerialize(token);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */ function onexitautolinkemail(token) {\n        onexitdata.call(this, token);\n        const node = this.stack[this.stack.length - 1];\n        node.url = \"mailto:\" + this.sliceSerialize(token);\n    }\n    //\n    // Creaters.\n    //\n    /** @returns {Blockquote} */ function blockQuote() {\n        return {\n            type: \"blockquote\",\n            children: []\n        };\n    }\n    /** @returns {Code} */ function codeFlow() {\n        return {\n            type: \"code\",\n            lang: null,\n            meta: null,\n            value: \"\"\n        };\n    }\n    /** @returns {InlineCode} */ function codeText() {\n        return {\n            type: \"inlineCode\",\n            value: \"\"\n        };\n    }\n    /** @returns {Definition} */ function definition() {\n        return {\n            type: \"definition\",\n            identifier: \"\",\n            label: null,\n            title: null,\n            url: \"\"\n        };\n    }\n    /** @returns {Emphasis} */ function emphasis() {\n        return {\n            type: \"emphasis\",\n            children: []\n        };\n    }\n    /** @returns {Heading} */ function heading() {\n        // @ts-expect-error `depth` will be set later.\n        return {\n            type: \"heading\",\n            depth: undefined,\n            children: []\n        };\n    }\n    /** @returns {Break} */ function hardBreak() {\n        return {\n            type: \"break\"\n        };\n    }\n    /** @returns {HTML} */ function html() {\n        return {\n            type: \"html\",\n            value: \"\"\n        };\n    }\n    /** @returns {Image} */ function image() {\n        return {\n            type: \"image\",\n            title: null,\n            url: \"\",\n            alt: null\n        };\n    }\n    /** @returns {Link} */ function link() {\n        return {\n            type: \"link\",\n            title: null,\n            url: \"\",\n            children: []\n        };\n    }\n    /**\n   * @param {Token} token\n   * @returns {List}\n   */ function list(token) {\n        return {\n            type: \"list\",\n            ordered: token.type === \"listOrdered\",\n            start: null,\n            spread: token._spread,\n            children: []\n        };\n    }\n    /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */ function listItem(token) {\n        return {\n            type: \"listItem\",\n            spread: token._spread,\n            checked: null,\n            children: []\n        };\n    }\n    /** @returns {Paragraph} */ function paragraph() {\n        return {\n            type: \"paragraph\",\n            children: []\n        };\n    }\n    /** @returns {Strong} */ function strong() {\n        return {\n            type: \"strong\",\n            children: []\n        };\n    }\n    /** @returns {Text} */ function text() {\n        return {\n            type: \"text\",\n            value: \"\"\n        };\n    }\n    /** @returns {ThematicBreak} */ function thematicBreak() {\n        return {\n            type: \"thematicBreak\"\n        };\n    }\n}\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */ function point(d) {\n    return {\n        line: d.line,\n        column: d.column,\n        offset: d.offset\n    };\n}\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */ function configure(combined, extensions) {\n    let index = -1;\n    while(++index < extensions.length){\n        const value = extensions[index];\n        if (Array.isArray(value)) configure(combined, value);\n        else extension(combined, value);\n    }\n}\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */ function extension(combined, extension) {\n    /** @type {keyof Extension} */ let key;\n    for(key in extension)if (own.call(extension, key)) {\n        if (key === \"canContainEols\") {\n            const right = extension[key];\n            if (right) combined[key].push(...right);\n        } else if (key === \"transforms\") {\n            const right = extension[key];\n            if (right) combined[key].push(...right);\n        } else if (key === \"enter\" || key === \"exit\") {\n            const right = extension[key];\n            if (right) Object.assign(combined[key], right);\n        }\n    }\n}\n/** @type {OnEnterError} */ function defaultOnError(left, right) {\n    if (left) throw new Error(\"Cannot close `\" + left.type + \"` (\" + (0, _unistUtilStringifyPosition.stringifyPosition)({\n        start: left.start,\n        end: left.end\n    }) + \"): a different token (`\" + right.type + \"`, \" + (0, _unistUtilStringifyPosition.stringifyPosition)({\n        start: right.start,\n        end: right.end\n    }) + \") is open\");\n    else throw new Error(\"Cannot close document, a token (`\" + right.type + \"`, \" + (0, _unistUtilStringifyPosition.stringifyPosition)({\n        start: right.start,\n        end: right.end\n    }) + \") is still open\");\n}\n\n},{\"mdast-util-to-string\":\"6EP6J\",\"micromark/lib/parse.js\":\"bC62H\",\"micromark/lib/preprocess.js\":\"2F8ys\",\"micromark/lib/postprocess.js\":\"1RlOo\",\"micromark-util-decode-numeric-character-reference\":\"dEuCB\",\"micromark-util-decode-string\":\"h4ErJ\",\"micromark-util-normalize-identifier\":\"e2XYl\",\"decode-named-character-reference\":\"aLMfA\",\"unist-util-stringify-position\":\"3goVY\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"6EP6J\":[function(require,module,exports) {\n/**\n * @typedef {import('./lib/index.js').Options} Options\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"toString\", ()=>(0, _indexJs.toString));\nvar _indexJs = require(\"./lib/index.js\");\n\n},{\"./lib/index.js\":\"gE2gk\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"gE2gk\":[function(require,module,exports) {\n/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */ /** @type {Options} */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */ parcelHelpers.export(exports, \"toString\", ()=>toString);\nconst emptyOptions = {};\nfunction toString(value, options) {\n    const settings = options || emptyOptions;\n    const includeImageAlt = typeof settings.includeImageAlt === \"boolean\" ? settings.includeImageAlt : true;\n    const includeHtml = typeof settings.includeHtml === \"boolean\" ? settings.includeHtml : true;\n    return one(value, includeImageAlt, includeHtml);\n}\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */ function one(value, includeImageAlt, includeHtml) {\n    if (node(value)) {\n        if (\"value\" in value) return value.type === \"html\" && !includeHtml ? \"\" : value.value;\n        if (includeImageAlt && \"alt\" in value && value.alt) return value.alt;\n        if (\"children\" in value) return all(value.children, includeImageAlt, includeHtml);\n    }\n    if (Array.isArray(value)) return all(value, includeImageAlt, includeHtml);\n    return \"\";\n}\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */ function all(values, includeImageAlt, includeHtml) {\n    /** @type {Array<string>} */ const result = [];\n    let index = -1;\n    while(++index < values.length)result[index] = one(values[index], includeImageAlt, includeHtml);\n    return result.join(\"\");\n}\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */ function node(value) {\n    return Boolean(value && typeof value === \"object\");\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bC62H\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */ parcelHelpers.export(exports, \"parse\", ()=>parse);\nvar _micromarkUtilCombineExtensions = require(\"micromark-util-combine-extensions\");\nvar _contentJs = require(\"./initialize/content.js\");\nvar _documentJs = require(\"./initialize/document.js\");\nvar _flowJs = require(\"./initialize/flow.js\");\nvar _textJs = require(\"./initialize/text.js\");\nvar _createTokenizerJs = require(\"./create-tokenizer.js\");\nvar _constructsJs = require(\"./constructs.js\");\nfunction parse(options) {\n    const settings = options || {};\n    const constructs = /** @type {FullNormalizedExtension} */ (0, _micromarkUtilCombineExtensions.combineExtensions)([\n        _constructsJs,\n        ...settings.extensions || []\n    ]);\n    /** @type {ParseContext} */ const parser = {\n        defined: [],\n        lazy: {},\n        constructs,\n        content: create((0, _contentJs.content)),\n        document: create((0, _documentJs.document)),\n        flow: create((0, _flowJs.flow)),\n        string: create((0, _textJs.string)),\n        text: create((0, _textJs.text))\n    };\n    return parser;\n    /**\n   * @param {InitialConstruct} initial\n   */ function create(initial) {\n        return creator;\n        /** @type {Create} */ function creator(from) {\n            return (0, _createTokenizerJs.createTokenizer)(parser, initial, from);\n        }\n    }\n}\n\n},{\"micromark-util-combine-extensions\":\"bW8Hu\",\"./initialize/content.js\":\"gECMx\",\"./initialize/document.js\":\"b1Ak5\",\"./initialize/flow.js\":\"i0uZt\",\"./initialize/text.js\":\"75KlL\",\"./create-tokenizer.js\":\"hT0RM\",\"./constructs.js\":\"ivY6o\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bW8Hu\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */ parcelHelpers.export(exports, \"combineExtensions\", ()=>combineExtensions);\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */ parcelHelpers.export(exports, \"combineHtmlExtensions\", ()=>combineHtmlExtensions);\nvar _micromarkUtilChunked = require(\"micromark-util-chunked\");\nconst hasOwnProperty = {}.hasOwnProperty;\nfunction combineExtensions(extensions) {\n    /** @type {NormalizedExtension} */ const all = {};\n    let index = -1;\n    while(++index < extensions.length)syntaxExtension(all, extensions[index]);\n    return all;\n}\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */ function syntaxExtension(all, extension) {\n    /** @type {keyof Extension} */ let hook;\n    for(hook in extension){\n        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n        /** @type {Record<string, unknown>} */ const left = maybe || (all[hook] = {});\n        /** @type {Record<string, unknown> | undefined} */ const right = extension[hook];\n        /** @type {string} */ let code;\n        if (right) for(code in right){\n            if (!hasOwnProperty.call(left, code)) left[code] = [];\n            const value = right[code];\n            constructs(// @ts-expect-error Looks like a list.\n            left[code], Array.isArray(value) ? value : value ? [\n                value\n            ] : []);\n        }\n    }\n}\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */ function constructs(existing, list) {\n    let index = -1;\n    /** @type {Array<unknown>} */ const before = [];\n    while(++index < list.length)(list[index].add === \"after\" ? existing : before).push(list[index]);\n    (0, _micromarkUtilChunked.splice)(existing, 0, 0, before);\n}\nfunction combineHtmlExtensions(htmlExtensions) {\n    /** @type {HtmlExtension} */ const handlers = {};\n    let index = -1;\n    while(++index < htmlExtensions.length)htmlExtension(handlers, htmlExtensions[index]);\n    return handlers;\n}\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */ function htmlExtension(all, extension) {\n    /** @type {keyof HtmlExtension} */ let hook;\n    for(hook in extension){\n        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n        const left = maybe || (all[hook] = {});\n        const right = extension[hook];\n        /** @type {keyof Handles} */ let type;\n        if (right) for(type in right)// @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type];\n    }\n}\n\n},{\"micromark-util-chunked\":\"aCCQY\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"aCCQY\":[function(require,module,exports) {\n/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"splice\", ()=>splice);\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */ parcelHelpers.export(exports, \"push\", ()=>push);\nfunction splice(list, start, remove, items) {\n    const end = list.length;\n    let chunkStart = 0;\n    /** @type {Array<unknown>} */ let parameters;\n    // Make start between zero and `end` (included).\n    if (start < 0) start = -start > end ? 0 : end + start;\n    else start = start > end ? end : start;\n    remove = remove > 0 ? remove : 0;\n    // No need to chunk the items if there’s only a couple (10k) items.\n    if (items.length < 10000) {\n        parameters = Array.from(items);\n        parameters.unshift(start, remove);\n        // @ts-expect-error Hush, it’s fine.\n        list.splice(...parameters);\n    } else {\n        // Delete `remove` items starting from `start`\n        if (remove) list.splice(start, remove);\n        // Insert the items in chunks to not cause stack overflows.\n        while(chunkStart < items.length){\n            parameters = items.slice(chunkStart, chunkStart + 10000);\n            parameters.unshift(start, 0);\n            // @ts-expect-error Hush, it’s fine.\n            list.splice(...parameters);\n            chunkStart += 10000;\n            start += 10000;\n        }\n    }\n}\nfunction push(list, items) {\n    if (list.length > 0) {\n        splice(list, list.length, 0, items);\n        return list;\n    }\n    return items;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"gECMx\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"content\", ()=>content);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst content = {\n    tokenize: initializeContent\n};\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */ function initializeContent(effects) {\n    const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n    /** @type {Token} */ let previous;\n    return contentStart;\n    /** @type {State} */ function afterContentStartConstruct(code) {\n        if (code === null) {\n            effects.consume(code);\n            return;\n        }\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return (0, _micromarkFactorySpace.factorySpace)(effects, contentStart, \"linePrefix\");\n    }\n    /** @type {State} */ function paragraphInitial(code) {\n        effects.enter(\"paragraph\");\n        return lineStart(code);\n    }\n    /** @type {State} */ function lineStart(code) {\n        const token = effects.enter(\"chunkText\", {\n            contentType: \"text\",\n            previous\n        });\n        if (previous) previous.next = token;\n        previous = token;\n        return data(code);\n    }\n    /** @type {State} */ function data(code) {\n        if (code === null) {\n            effects.exit(\"chunkText\");\n            effects.exit(\"paragraph\");\n            effects.consume(code);\n            return;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.consume(code);\n            effects.exit(\"chunkText\");\n            return lineStart;\n        }\n        // Data.\n        effects.consume(code);\n        return data;\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"iStdw\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */ parcelHelpers.export(exports, \"factorySpace\", ()=>factorySpace);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nfunction factorySpace(effects, ok, type, max) {\n    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n    let size = 0;\n    return start;\n    /** @type {State} */ function start(code) {\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.enter(type);\n            return prefix(code);\n        }\n        return ok(code);\n    }\n    /** @type {State} */ function prefix(code) {\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code) && size++ < limit) {\n            effects.consume(code);\n            return prefix;\n        }\n        effects.exit(type);\n        return ok(code);\n    }\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"cUjFI\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"asciiAlpha\", ()=>asciiAlpha);\nparcelHelpers.export(exports, \"asciiAlphanumeric\", ()=>asciiAlphanumeric);\nparcelHelpers.export(exports, \"asciiAtext\", ()=>asciiAtext);\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ parcelHelpers.export(exports, \"asciiControl\", ()=>asciiControl);\nparcelHelpers.export(exports, \"asciiDigit\", ()=>asciiDigit);\nparcelHelpers.export(exports, \"asciiHexDigit\", ()=>asciiHexDigit);\nparcelHelpers.export(exports, \"asciiPunctuation\", ()=>asciiPunctuation);\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ parcelHelpers.export(exports, \"markdownLineEnding\", ()=>markdownLineEnding);\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ parcelHelpers.export(exports, \"markdownLineEndingOrSpace\", ()=>markdownLineEndingOrSpace);\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */ parcelHelpers.export(exports, \"markdownSpace\", ()=>markdownSpace);\nparcelHelpers.export(exports, \"unicodePunctuation\", ()=>unicodePunctuation);\nparcelHelpers.export(exports, \"unicodeWhitespace\", ()=>unicodeWhitespace);\nvar _unicodePunctuationRegexJs = require(\"./lib/unicode-punctuation-regex.js\");\nconst asciiAlpha = regexCheck(/[A-Za-z]/);\nconst asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\nconst asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\nfunction asciiControl(code) {\n    return(// Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127));\n}\nconst asciiDigit = regexCheck(/\\d/);\nconst asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\nconst asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\nfunction markdownLineEnding(code) {\n    return code !== null && code < -2;\n}\nfunction markdownLineEndingOrSpace(code) {\n    return code !== null && (code < 0 || code === 32);\n}\nfunction markdownSpace(code) {\n    return code === -2 || code === -1 || code === 32;\n}\nconst unicodePunctuation = regexCheck((0, _unicodePunctuationRegexJs.unicodePunctuationRegex));\nconst unicodeWhitespace = regexCheck(/\\s/);\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */ function regexCheck(regex) {\n    return check;\n    /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */ function check(code) {\n        return code !== null && regex.test(String.fromCharCode(code));\n    }\n}\n\n},{\"./lib/unicode-punctuation-regex.js\":\"bHQQP\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bHQQP\":[function(require,module,exports) {\n// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n/**\n * Regular expression that matches a unicode punctuation character.\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"unicodePunctuationRegex\", ()=>unicodePunctuationRegex);\nconst unicodePunctuationRegex = /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"b1Ak5\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ /**\n * @typedef {[Construct, ContainerState]} StackItem\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"document\", ()=>document);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nvar _micromarkUtilChunked = require(\"micromark-util-chunked\");\nconst document = {\n    tokenize: initializeDocument\n};\n/** @type {Construct} */ const containerConstruct = {\n    tokenize: tokenizeContainer\n};\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */ function initializeDocument(effects) {\n    const self = this;\n    /** @type {Array<StackItem>} */ const stack = [];\n    let continued = 0;\n    /** @type {TokenizeContext | undefined} */ let childFlow;\n    /** @type {Token | undefined} */ let childToken;\n    /** @type {number} */ let lineStartOffset;\n    return start;\n    /** @type {State} */ function start(code) {\n        // First we iterate through the open blocks, starting with the root\n        // document, and descending through last children down to the last open\n        // block.\n        // Each block imposes a condition that the line must satisfy if the block is\n        // to remain open.\n        // For example, a block quote requires a `>` character.\n        // A paragraph requires a non-blank line.\n        // In this phase we may match all or just some of the open blocks.\n        // But we cannot close unmatched blocks yet, because we may have a lazy\n        // continuation line.\n        if (continued < stack.length) {\n            const item = stack[continued];\n            self.containerState = item[1];\n            return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n        }\n        // Done.\n        return checkNewContainers(code);\n    }\n    /** @type {State} */ function documentContinue(code) {\n        continued++;\n        // Note: this field is called `_closeFlow` but it also closes containers.\n        // Perhaps a good idea to rename it but it’s already used in the wild by\n        // extensions.\n        if (self.containerState._closeFlow) {\n            self.containerState._closeFlow = undefined;\n            if (childFlow) closeFlow();\n            // Note: this algorithm for moving events around is similar to the\n            // algorithm when dealing with lazy lines in `writeToChild`.\n            const indexBeforeExits = self.events.length;\n            let indexBeforeFlow = indexBeforeExits;\n            /** @type {Point | undefined} */ let point;\n            // Find the flow chunk.\n            while(indexBeforeFlow--)if (self.events[indexBeforeFlow][0] === \"exit\" && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n                point = self.events[indexBeforeFlow][1].end;\n                break;\n            }\n            exitContainers(continued);\n            // Fix positions.\n            let index = indexBeforeExits;\n            while(index < self.events.length){\n                self.events[index][1].end = Object.assign({}, point);\n                index++;\n            }\n            // Inject the exits earlier (they’re still also at the end).\n            (0, _micromarkUtilChunked.splice)(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n            // Discard the duplicate exits.\n            self.events.length = index;\n            return checkNewContainers(code);\n        }\n        return start(code);\n    }\n    /** @type {State} */ function checkNewContainers(code) {\n        // Next, after consuming the continuation markers for existing blocks, we\n        // look for new block starts (e.g. `>` for a block quote).\n        // If we encounter a new block start, we close any blocks unmatched in\n        // step 1 before creating the new block as a child of the last matched\n        // block.\n        if (continued === stack.length) {\n            // No need to `check` whether there’s a container, of `exitContainers`\n            // would be moot.\n            // We can instead immediately `attempt` to parse one.\n            if (!childFlow) return documentContinued(code);\n            // If we have concrete content, such as block HTML or fenced code,\n            // we can’t have containers “pierce” into them, so we can immediately\n            // start.\n            if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) return flowStart(code);\n            // If we do have flow, it could still be a blank line,\n            // but we’d be interrupting it w/ a new container if there’s a current\n            // construct.\n            // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n            // needed in micromark-extension-gfm-table@1.0.6).\n            self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n        }\n        // Check if there is a new container.\n        self.containerState = {};\n        return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n    }\n    /** @type {State} */ function thereIsANewContainer(code) {\n        if (childFlow) closeFlow();\n        exitContainers(continued);\n        return documentContinued(code);\n    }\n    /** @type {State} */ function thereIsNoNewContainer(code) {\n        self.parser.lazy[self.now().line] = continued !== stack.length;\n        lineStartOffset = self.now().offset;\n        return flowStart(code);\n    }\n    /** @type {State} */ function documentContinued(code) {\n        // Try new containers.\n        self.containerState = {};\n        return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n    }\n    /** @type {State} */ function containerContinue(code) {\n        continued++;\n        stack.push([\n            self.currentConstruct,\n            self.containerState\n        ]);\n        // Try another.\n        return documentContinued(code);\n    }\n    /** @type {State} */ function flowStart(code) {\n        if (code === null) {\n            if (childFlow) closeFlow();\n            exitContainers(0);\n            effects.consume(code);\n            return;\n        }\n        childFlow = childFlow || self.parser.flow(self.now());\n        effects.enter(\"chunkFlow\", {\n            contentType: \"flow\",\n            previous: childToken,\n            _tokenizer: childFlow\n        });\n        return flowContinue(code);\n    }\n    /** @type {State} */ function flowContinue(code) {\n        if (code === null) {\n            writeToChild(effects.exit(\"chunkFlow\"), true);\n            exitContainers(0);\n            effects.consume(code);\n            return;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.consume(code);\n            writeToChild(effects.exit(\"chunkFlow\"));\n            // Get ready for the next line.\n            continued = 0;\n            self.interrupt = undefined;\n            return start;\n        }\n        effects.consume(code);\n        return flowContinue;\n    }\n    /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */ function writeToChild(token, eof) {\n        const stream = self.sliceStream(token);\n        if (eof) stream.push(null);\n        token.previous = childToken;\n        if (childToken) childToken.next = token;\n        childToken = token;\n        childFlow.defineSkip(token.start);\n        childFlow.write(stream);\n        // Alright, so we just added a lazy line:\n        //\n        // ```markdown\n        // > a\n        // b.\n        //\n        // Or:\n        //\n        // > ~~~c\n        // d\n        //\n        // Or:\n        //\n        // > | e |\n        // f\n        // ```\n        //\n        // The construct in the second example (fenced code) does not accept lazy\n        // lines, so it marked itself as done at the end of its first line, and\n        // then the content construct parses `d`.\n        // Most constructs in markdown match on the first line: if the first line\n        // forms a construct, a non-lazy line can’t “unmake” it.\n        //\n        // The construct in the third example is potentially a GFM table, and\n        // those are *weird*.\n        // It *could* be a table, from the first line, if the following line\n        // matches a condition.\n        // In this case, that second line is lazy, which “unmakes” the first line\n        // and turns the whole into one content block.\n        //\n        // We’ve now parsed the non-lazy and the lazy line, and can figure out\n        // whether the lazy line started a new flow block.\n        // If it did, we exit the current containers between the two flow blocks.\n        if (self.parser.lazy[token.start.line]) {\n            let index = childFlow.events.length;\n            while(index--){\n                if (// The token starts before the line ending…\n                childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n                (!childFlow.events[index][1].end || // …or ends after it.\n                childFlow.events[index][1].end.offset > lineStartOffset)) // Exit: there’s still something open, which means it’s a lazy line\n                // part of something.\n                return;\n            }\n            // Note: this algorithm for moving events around is similar to the\n            // algorithm when closing flow in `documentContinue`.\n            const indexBeforeExits = self.events.length;\n            let indexBeforeFlow = indexBeforeExits;\n            /** @type {boolean | undefined} */ let seen;\n            /** @type {Point | undefined} */ let point;\n            // Find the previous chunk (the one before the lazy line).\n            while(indexBeforeFlow--)if (self.events[indexBeforeFlow][0] === \"exit\" && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n                if (seen) {\n                    point = self.events[indexBeforeFlow][1].end;\n                    break;\n                }\n                seen = true;\n            }\n            exitContainers(continued);\n            // Fix positions.\n            index = indexBeforeExits;\n            while(index < self.events.length){\n                self.events[index][1].end = Object.assign({}, point);\n                index++;\n            }\n            // Inject the exits earlier (they’re still also at the end).\n            (0, _micromarkUtilChunked.splice)(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n            // Discard the duplicate exits.\n            self.events.length = index;\n        }\n    }\n    /**\n   * @param {number} size\n   * @returns {void}\n   */ function exitContainers(size) {\n        let index = stack.length;\n        // Exit open containers.\n        while(index-- > size){\n            const entry = stack[index];\n            self.containerState = entry[1];\n            entry[0].exit.call(self, effects);\n        }\n        stack.length = size;\n    }\n    function closeFlow() {\n        childFlow.write([\n            null\n        ]);\n        childToken = undefined;\n        childFlow = undefined;\n        self.containerState._closeFlow = undefined;\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeContainer(effects, ok, nok) {\n    // Always populated by defaults.\n    return (0, _micromarkFactorySpace.factorySpace)(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : 4);\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"micromark-util-chunked\":\"aCCQY\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"i0uZt\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"flow\", ()=>flow);\nvar _micromarkCoreCommonmark = require(\"micromark-core-commonmark\");\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst flow = {\n    tokenize: initializeFlow\n};\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */ function initializeFlow(effects) {\n    const self = this;\n    const initial = effects.attempt(// Try to parse a blank line.\n    (0, _micromarkCoreCommonmark.blankLine), atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(this.parser.constructs.flowInitial, afterConstruct, (0, _micromarkFactorySpace.factorySpace)(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt((0, _micromarkCoreCommonmark.content), afterConstruct)), \"linePrefix\")));\n    return initial;\n    /** @type {State} */ function atBlankEnding(code) {\n        if (code === null) {\n            effects.consume(code);\n            return;\n        }\n        effects.enter(\"lineEndingBlank\");\n        effects.consume(code);\n        effects.exit(\"lineEndingBlank\");\n        self.currentConstruct = undefined;\n        return initial;\n    }\n    /** @type {State} */ function afterConstruct(code) {\n        if (code === null) {\n            effects.consume(code);\n            return;\n        }\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        self.currentConstruct = undefined;\n        return initial;\n    }\n}\n\n},{\"micromark-core-commonmark\":\"82deD\",\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"82deD\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"attention\", ()=>(0, _attentionJs.attention));\nparcelHelpers.export(exports, \"autolink\", ()=>(0, _autolinkJs.autolink));\nparcelHelpers.export(exports, \"blankLine\", ()=>(0, _blankLineJs.blankLine));\nparcelHelpers.export(exports, \"blockQuote\", ()=>(0, _blockQuoteJs.blockQuote));\nparcelHelpers.export(exports, \"characterEscape\", ()=>(0, _characterEscapeJs.characterEscape));\nparcelHelpers.export(exports, \"characterReference\", ()=>(0, _characterReferenceJs.characterReference));\nparcelHelpers.export(exports, \"codeFenced\", ()=>(0, _codeFencedJs.codeFenced));\nparcelHelpers.export(exports, \"codeIndented\", ()=>(0, _codeIndentedJs.codeIndented));\nparcelHelpers.export(exports, \"codeText\", ()=>(0, _codeTextJs.codeText));\nparcelHelpers.export(exports, \"content\", ()=>(0, _contentJs.content));\nparcelHelpers.export(exports, \"definition\", ()=>(0, _definitionJs.definition));\nparcelHelpers.export(exports, \"hardBreakEscape\", ()=>(0, _hardBreakEscapeJs.hardBreakEscape));\nparcelHelpers.export(exports, \"headingAtx\", ()=>(0, _headingAtxJs.headingAtx));\nparcelHelpers.export(exports, \"htmlFlow\", ()=>(0, _htmlFlowJs.htmlFlow));\nparcelHelpers.export(exports, \"htmlText\", ()=>(0, _htmlTextJs.htmlText));\nparcelHelpers.export(exports, \"labelEnd\", ()=>(0, _labelEndJs.labelEnd));\nparcelHelpers.export(exports, \"labelStartImage\", ()=>(0, _labelStartImageJs.labelStartImage));\nparcelHelpers.export(exports, \"labelStartLink\", ()=>(0, _labelStartLinkJs.labelStartLink));\nparcelHelpers.export(exports, \"lineEnding\", ()=>(0, _lineEndingJs.lineEnding));\nparcelHelpers.export(exports, \"list\", ()=>(0, _listJs.list));\nparcelHelpers.export(exports, \"setextUnderline\", ()=>(0, _setextUnderlineJs.setextUnderline));\nparcelHelpers.export(exports, \"thematicBreak\", ()=>(0, _thematicBreakJs.thematicBreak));\nvar _attentionJs = require(\"./lib/attention.js\");\nvar _autolinkJs = require(\"./lib/autolink.js\");\nvar _blankLineJs = require(\"./lib/blank-line.js\");\nvar _blockQuoteJs = require(\"./lib/block-quote.js\");\nvar _characterEscapeJs = require(\"./lib/character-escape.js\");\nvar _characterReferenceJs = require(\"./lib/character-reference.js\");\nvar _codeFencedJs = require(\"./lib/code-fenced.js\");\nvar _codeIndentedJs = require(\"./lib/code-indented.js\");\nvar _codeTextJs = require(\"./lib/code-text.js\");\nvar _contentJs = require(\"./lib/content.js\");\nvar _definitionJs = require(\"./lib/definition.js\");\nvar _hardBreakEscapeJs = require(\"./lib/hard-break-escape.js\");\nvar _headingAtxJs = require(\"./lib/heading-atx.js\");\nvar _htmlFlowJs = require(\"./lib/html-flow.js\");\nvar _htmlTextJs = require(\"./lib/html-text.js\");\nvar _labelEndJs = require(\"./lib/label-end.js\");\nvar _labelStartImageJs = require(\"./lib/label-start-image.js\");\nvar _labelStartLinkJs = require(\"./lib/label-start-link.js\");\nvar _lineEndingJs = require(\"./lib/line-ending.js\");\nvar _listJs = require(\"./lib/list.js\");\nvar _setextUnderlineJs = require(\"./lib/setext-underline.js\");\nvar _thematicBreakJs = require(\"./lib/thematic-break.js\");\n\n},{\"./lib/attention.js\":\"FoNXV\",\"./lib/autolink.js\":\"4tvaX\",\"./lib/blank-line.js\":\"g0Dph\",\"./lib/block-quote.js\":\"7qu5S\",\"./lib/character-escape.js\":\"8RR4h\",\"./lib/character-reference.js\":\"kp7no\",\"./lib/code-fenced.js\":\"76L0b\",\"./lib/code-indented.js\":\"ddGIR\",\"./lib/code-text.js\":\"ewpZK\",\"./lib/content.js\":\"kA8bg\",\"./lib/definition.js\":\"eTH6C\",\"./lib/hard-break-escape.js\":\"2b9qH\",\"./lib/heading-atx.js\":\"8M2Ug\",\"./lib/html-flow.js\":\"hM4I8\",\"./lib/html-text.js\":\"19uFK\",\"./lib/label-end.js\":\"ihGwx\",\"./lib/label-start-image.js\":\"c63yJ\",\"./lib/label-start-link.js\":\"iBcHU\",\"./lib/line-ending.js\":\"8qDyu\",\"./lib/list.js\":\"dwZDM\",\"./lib/setext-underline.js\":\"c6hKr\",\"./lib/thematic-break.js\":\"9s528\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"FoNXV\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"attention\", ()=>attention);\nvar _micromarkUtilChunked = require(\"micromark-util-chunked\");\nvar _micromarkUtilClassifyCharacter = require(\"micromark-util-classify-character\");\nvar _micromarkUtilResolveAll = require(\"micromark-util-resolve-all\");\nconst attention = {\n    name: \"attention\",\n    tokenize: tokenizeAttention,\n    resolveAll: resolveAllAttention\n};\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */ function resolveAllAttention(events, context) {\n    let index = -1;\n    /** @type {number} */ let open;\n    /** @type {Token} */ let group;\n    /** @type {Token} */ let text;\n    /** @type {Token} */ let openingSequence;\n    /** @type {Token} */ let closingSequence;\n    /** @type {number} */ let use;\n    /** @type {Array<Event>} */ let nextEvents;\n    /** @type {number} */ let offset;\n    // Walk through all events.\n    //\n    // Note: performance of this is fine on an mb of normal markdown, but it’s\n    // a bottleneck for malicious stuff.\n    while(++index < events.length)// Find a token that can close.\n    if (events[index][0] === \"enter\" && events[index][1].type === \"attentionSequence\" && events[index][1]._close) {\n        open = index;\n        // Now walk back to find an opener.\n        while(open--)// Find a token that can open the closer.\n        if (events[open][0] === \"exit\" && events[open][1].type === \"attentionSequence\" && events[open][1]._open && // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n            // If the opening can close or the closing can open,\n            // and the close size *is not* a multiple of three,\n            // but the sum of the opening and closing size *is* multiple of three,\n            // then don’t match.\n            if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) continue;\n            // Number of markers to use from the sequence.\n            use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n            const start = Object.assign({}, events[open][1].end);\n            const end = Object.assign({}, events[index][1].start);\n            movePoint(start, -use);\n            movePoint(end, use);\n            openingSequence = {\n                type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n                start,\n                end: Object.assign({}, events[open][1].end)\n            };\n            closingSequence = {\n                type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n                start: Object.assign({}, events[index][1].start),\n                end\n            };\n            text = {\n                type: use > 1 ? \"strongText\" : \"emphasisText\",\n                start: Object.assign({}, events[open][1].end),\n                end: Object.assign({}, events[index][1].start)\n            };\n            group = {\n                type: use > 1 ? \"strong\" : \"emphasis\",\n                start: Object.assign({}, openingSequence.start),\n                end: Object.assign({}, closingSequence.end)\n            };\n            events[open][1].end = Object.assign({}, openingSequence.start);\n            events[index][1].start = Object.assign({}, closingSequence.end);\n            nextEvents = [];\n            // If there are more markers in the opening, add them before.\n            if (events[open][1].end.offset - events[open][1].start.offset) nextEvents = (0, _micromarkUtilChunked.push)(nextEvents, [\n                [\n                    \"enter\",\n                    events[open][1],\n                    context\n                ],\n                [\n                    \"exit\",\n                    events[open][1],\n                    context\n                ]\n            ]);\n            // Opening.\n            nextEvents = (0, _micromarkUtilChunked.push)(nextEvents, [\n                [\n                    \"enter\",\n                    group,\n                    context\n                ],\n                [\n                    \"enter\",\n                    openingSequence,\n                    context\n                ],\n                [\n                    \"exit\",\n                    openingSequence,\n                    context\n                ],\n                [\n                    \"enter\",\n                    text,\n                    context\n                ]\n            ]);\n            // Always populated by defaults.\n            // Between.\n            nextEvents = (0, _micromarkUtilChunked.push)(nextEvents, (0, _micromarkUtilResolveAll.resolveAll)(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n            // Closing.\n            nextEvents = (0, _micromarkUtilChunked.push)(nextEvents, [\n                [\n                    \"exit\",\n                    text,\n                    context\n                ],\n                [\n                    \"enter\",\n                    closingSequence,\n                    context\n                ],\n                [\n                    \"exit\",\n                    closingSequence,\n                    context\n                ],\n                [\n                    \"exit\",\n                    group,\n                    context\n                ]\n            ]);\n            // If there are more markers in the closing, add them after.\n            if (events[index][1].end.offset - events[index][1].start.offset) {\n                offset = 2;\n                nextEvents = (0, _micromarkUtilChunked.push)(nextEvents, [\n                    [\n                        \"enter\",\n                        events[index][1],\n                        context\n                    ],\n                    [\n                        \"exit\",\n                        events[index][1],\n                        context\n                    ]\n                ]);\n            } else offset = 0;\n            (0, _micromarkUtilChunked.splice)(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - offset - 2;\n            break;\n        }\n    }\n    // Remove remaining sequences.\n    index = -1;\n    while(++index < events.length)if (events[index][1].type === \"attentionSequence\") events[index][1].type = \"data\";\n    return events;\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeAttention(effects, ok) {\n    const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n    const previous = this.previous;\n    const before = (0, _micromarkUtilClassifyCharacter.classifyCharacter)(previous);\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        marker = code;\n        effects.enter(\"attentionSequence\");\n        return inside(code);\n    }\n    /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === marker) {\n            effects.consume(code);\n            return inside;\n        }\n        const token = effects.exit(\"attentionSequence\");\n        // To do: next major: move this to resolver, just like `markdown-rs`.\n        const after = (0, _micromarkUtilClassifyCharacter.classifyCharacter)(code);\n        // Always populated by defaults.\n        const open = !after || after === 2 && before || attentionMarkers.includes(code);\n        const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n        token._open = Boolean(marker === 42 ? open : open && (before || !close));\n        token._close = Boolean(marker === 42 ? close : close && (after || !open));\n        return ok(code);\n    }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */ function movePoint(point, offset) {\n    point.column += offset;\n    point.offset += offset;\n    point._bufferIndex += offset;\n}\n\n},{\"micromark-util-chunked\":\"aCCQY\",\"micromark-util-classify-character\":\"c374Y\",\"micromark-util-resolve-all\":\"1064n\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"c374Y\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */ parcelHelpers.export(exports, \"classifyCharacter\", ()=>classifyCharacter);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nfunction classifyCharacter(code) {\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code) || (0, _micromarkUtilCharacter.unicodeWhitespace)(code)) return 1;\n    if ((0, _micromarkUtilCharacter.unicodePunctuation)(code)) return 2;\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"1064n\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */ /**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"resolveAll\", ()=>resolveAll);\nfunction resolveAll(constructs, events, context) {\n    /** @type {Array<Resolver>} */ const called = [];\n    let index = -1;\n    while(++index < constructs.length){\n        const resolve = constructs[index].resolveAll;\n        if (resolve && !called.includes(resolve)) {\n            events = resolve(events, context);\n            called.push(resolve);\n        }\n    }\n    return events;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"4tvaX\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"autolink\", ()=>autolink);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst autolink = {\n    name: \"autolink\",\n    tokenize: tokenizeAutolink\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeAutolink(effects, ok, nok) {\n    let size = 0;\n    return start;\n    /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"autolink\");\n        effects.enter(\"autolinkMarker\");\n        effects.consume(code);\n        effects.exit(\"autolinkMarker\");\n        effects.enter(\"autolinkProtocol\");\n        return open;\n    }\n    /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            return schemeOrEmailAtext;\n        }\n        return emailAtext(code);\n    }\n    /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function schemeOrEmailAtext(code) {\n        // ASCII alphanumeric and `+`, `-`, and `.`.\n        if (code === 43 || code === 45 || code === 46 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\n            // Count the previous alphabetical from `open` too.\n            size = 1;\n            return schemeInsideOrEmailAtext(code);\n        }\n        return emailAtext(code);\n    }\n    /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function schemeInsideOrEmailAtext(code) {\n        if (code === 58) {\n            effects.consume(code);\n            size = 0;\n            return urlInside;\n        }\n        // ASCII alphanumeric and `+`, `-`, and `.`.\n        if ((code === 43 || code === 45 || code === 46 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) && size++ < 32) {\n            effects.consume(code);\n            return schemeInsideOrEmailAtext;\n        }\n        size = 0;\n        return emailAtext(code);\n    }\n    /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function urlInside(code) {\n        if (code === 62) {\n            effects.exit(\"autolinkProtocol\");\n            effects.enter(\"autolinkMarker\");\n            effects.consume(code);\n            effects.exit(\"autolinkMarker\");\n            effects.exit(\"autolink\");\n            return ok;\n        }\n        // ASCII control, space, or `<`.\n        if (code === null || code === 32 || code === 60 || (0, _micromarkUtilCharacter.asciiControl)(code)) return nok(code);\n        effects.consume(code);\n        return urlInside;\n    }\n    /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function emailAtext(code) {\n        if (code === 64) {\n            effects.consume(code);\n            return emailAtSignOrDot;\n        }\n        if ((0, _micromarkUtilCharacter.asciiAtext)(code)) {\n            effects.consume(code);\n            return emailAtext;\n        }\n        return nok(code);\n    }\n    /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */ function emailAtSignOrDot(code) {\n        return (0, _micromarkUtilCharacter.asciiAlphanumeric)(code) ? emailLabel(code) : nok(code);\n    }\n    /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */ function emailLabel(code) {\n        if (code === 46) {\n            effects.consume(code);\n            size = 0;\n            return emailAtSignOrDot;\n        }\n        if (code === 62) {\n            // Exit, then change the token type.\n            effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n            effects.enter(\"autolinkMarker\");\n            effects.consume(code);\n            effects.exit(\"autolinkMarker\");\n            effects.exit(\"autolink\");\n            return ok;\n        }\n        return emailValue(code);\n    }\n    /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */ function emailValue(code) {\n        // ASCII alphanumeric or `-`.\n        if ((code === 45 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) && size++ < 63) {\n            const next = code === 45 ? emailValue : emailLabel;\n            effects.consume(code);\n            return next;\n        }\n        return nok(code);\n    }\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"g0Dph\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"blankLine\", ()=>blankLine);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst blankLine = {\n    tokenize: tokenizeBlankLine,\n    partial: true\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeBlankLine(effects, ok, nok) {\n    return start;\n    /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, after, \"linePrefix\")(code) : after(code);\n    }\n    /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? ok(code) : nok(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"7qu5S\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"blockQuote\", ()=>blockQuote);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst blockQuote = {\n    name: \"blockQuote\",\n    tokenize: tokenizeBlockQuoteStart,\n    continuation: {\n        tokenize: tokenizeBlockQuoteContinuation\n    },\n    exit\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeBlockQuoteStart(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === 62) {\n            const state = self.containerState;\n            if (!state.open) {\n                effects.enter(\"blockQuote\", {\n                    _container: true\n                });\n                state.open = true;\n            }\n            effects.enter(\"blockQuotePrefix\");\n            effects.enter(\"blockQuoteMarker\");\n            effects.consume(code);\n            effects.exit(\"blockQuoteMarker\");\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.enter(\"blockQuotePrefixWhitespace\");\n            effects.consume(code);\n            effects.exit(\"blockQuotePrefixWhitespace\");\n            effects.exit(\"blockQuotePrefix\");\n            return ok;\n        }\n        effects.exit(\"blockQuotePrefix\");\n        return ok(code);\n    }\n}\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeBlockQuoteContinuation(effects, ok, nok) {\n    const self = this;\n    return contStart;\n    /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function contStart(code) {\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) // Always populated by defaults.\n        return (0, _micromarkFactorySpace.factorySpace)(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : 4)(code);\n        return contBefore(code);\n    }\n    /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function contBefore(code) {\n        return effects.attempt(blockQuote, ok, nok)(code);\n    }\n}\n/** @type {Exiter} */ function exit(effects) {\n    effects.exit(\"blockQuote\");\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"8RR4h\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"characterEscape\", ()=>characterEscape);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst characterEscape = {\n    name: \"characterEscape\",\n    tokenize: tokenizeCharacterEscape\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeCharacterEscape(effects, ok, nok) {\n    return start;\n    /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"characterEscape\");\n        effects.enter(\"escapeMarker\");\n        effects.consume(code);\n        effects.exit(\"escapeMarker\");\n        return inside;\n    }\n    /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        // ASCII punctuation.\n        if ((0, _micromarkUtilCharacter.asciiPunctuation)(code)) {\n            effects.enter(\"characterEscapeValue\");\n            effects.consume(code);\n            effects.exit(\"characterEscapeValue\");\n            effects.exit(\"characterEscape\");\n            return ok;\n        }\n        return nok(code);\n    }\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"kp7no\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"characterReference\", ()=>characterReference);\nvar _decodeNamedCharacterReference = require(\"decode-named-character-reference\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst characterReference = {\n    name: \"characterReference\",\n    tokenize: tokenizeCharacterReference\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeCharacterReference(effects, ok, nok) {\n    const self = this;\n    let size = 0;\n    /** @type {number} */ let max;\n    /** @type {(code: Code) => boolean} */ let test;\n    return start;\n    /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"characterReference\");\n        effects.enter(\"characterReferenceMarker\");\n        effects.consume(code);\n        effects.exit(\"characterReferenceMarker\");\n        return open;\n    }\n    /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === 35) {\n            effects.enter(\"characterReferenceMarkerNumeric\");\n            effects.consume(code);\n            effects.exit(\"characterReferenceMarkerNumeric\");\n            return numeric;\n        }\n        effects.enter(\"characterReferenceValue\");\n        max = 31;\n        test = (0, _micromarkUtilCharacter.asciiAlphanumeric);\n        return value(code);\n    }\n    /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function numeric(code) {\n        if (code === 88 || code === 120) {\n            effects.enter(\"characterReferenceMarkerHexadecimal\");\n            effects.consume(code);\n            effects.exit(\"characterReferenceMarkerHexadecimal\");\n            effects.enter(\"characterReferenceValue\");\n            max = 6;\n            test = (0, _micromarkUtilCharacter.asciiHexDigit);\n            return value;\n        }\n        effects.enter(\"characterReferenceValue\");\n        max = 7;\n        test = (0, _micromarkUtilCharacter.asciiDigit);\n        return value(code);\n    }\n    /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function value(code) {\n        if (code === 59 && size) {\n            const token = effects.exit(\"characterReferenceValue\");\n            if (test === (0, _micromarkUtilCharacter.asciiAlphanumeric) && !(0, _decodeNamedCharacterReference.decodeNamedCharacterReference)(self.sliceSerialize(token))) return nok(code);\n            // To do: `markdown-rs` uses a different name:\n            // `CharacterReferenceMarkerSemi`.\n            effects.enter(\"characterReferenceMarker\");\n            effects.consume(code);\n            effects.exit(\"characterReferenceMarker\");\n            effects.exit(\"characterReference\");\n            return ok;\n        }\n        if (test(code) && size++ < max) {\n            effects.consume(code);\n            return value;\n        }\n        return nok(code);\n    }\n}\n\n},{\"decode-named-character-reference\":\"aLMfA\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"aLMfA\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */ parcelHelpers.export(exports, \"decodeNamedCharacterReference\", ()=>decodeNamedCharacterReference);\nvar _characterEntities = require(\"character-entities\");\nconst own = {}.hasOwnProperty;\nfunction decodeNamedCharacterReference(value) {\n    return own.call((0, _characterEntities.characterEntities), value) ? (0, _characterEntities.characterEntities)[value] : false;\n}\n\n},{\"character-entities\":\"ctfcd\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"ctfcd\":[function(require,module,exports) {\n/**\n * Map of named character references.\n *\n * @type {Record<string, string>}\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"characterEntities\", ()=>characterEntities);\nconst characterEntities = {\n    AElig: \"\\xc6\",\n    AMP: \"&\",\n    Aacute: \"\\xc1\",\n    Abreve: \"Ă\",\n    Acirc: \"\\xc2\",\n    Acy: \"А\",\n    Afr: \"\\uD835\\uDD04\",\n    Agrave: \"\\xc0\",\n    Alpha: \"Α\",\n    Amacr: \"Ā\",\n    And: \"⩓\",\n    Aogon: \"Ą\",\n    Aopf: \"\\uD835\\uDD38\",\n    ApplyFunction: \"⁡\",\n    Aring: \"\\xc5\",\n    Ascr: \"\\uD835\\uDC9C\",\n    Assign: \"≔\",\n    Atilde: \"\\xc3\",\n    Auml: \"\\xc4\",\n    Backslash: \"∖\",\n    Barv: \"⫧\",\n    Barwed: \"⌆\",\n    Bcy: \"Б\",\n    Because: \"∵\",\n    Bernoullis: \"ℬ\",\n    Beta: \"Β\",\n    Bfr: \"\\uD835\\uDD05\",\n    Bopf: \"\\uD835\\uDD39\",\n    Breve: \"˘\",\n    Bscr: \"ℬ\",\n    Bumpeq: \"≎\",\n    CHcy: \"Ч\",\n    COPY: \"\\xa9\",\n    Cacute: \"Ć\",\n    Cap: \"⋒\",\n    CapitalDifferentialD: \"ⅅ\",\n    Cayleys: \"ℭ\",\n    Ccaron: \"Č\",\n    Ccedil: \"\\xc7\",\n    Ccirc: \"Ĉ\",\n    Cconint: \"∰\",\n    Cdot: \"Ċ\",\n    Cedilla: \"\\xb8\",\n    CenterDot: \"\\xb7\",\n    Cfr: \"ℭ\",\n    Chi: \"Χ\",\n    CircleDot: \"⊙\",\n    CircleMinus: \"⊖\",\n    CirclePlus: \"⊕\",\n    CircleTimes: \"⊗\",\n    ClockwiseContourIntegral: \"∲\",\n    CloseCurlyDoubleQuote: \"”\",\n    CloseCurlyQuote: \"’\",\n    Colon: \"∷\",\n    Colone: \"⩴\",\n    Congruent: \"≡\",\n    Conint: \"∯\",\n    ContourIntegral: \"∮\",\n    Copf: \"ℂ\",\n    Coproduct: \"∐\",\n    CounterClockwiseContourIntegral: \"∳\",\n    Cross: \"⨯\",\n    Cscr: \"\\uD835\\uDC9E\",\n    Cup: \"⋓\",\n    CupCap: \"≍\",\n    DD: \"ⅅ\",\n    DDotrahd: \"⤑\",\n    DJcy: \"Ђ\",\n    DScy: \"Ѕ\",\n    DZcy: \"Џ\",\n    Dagger: \"‡\",\n    Darr: \"↡\",\n    Dashv: \"⫤\",\n    Dcaron: \"Ď\",\n    Dcy: \"Д\",\n    Del: \"∇\",\n    Delta: \"Δ\",\n    Dfr: \"\\uD835\\uDD07\",\n    DiacriticalAcute: \"\\xb4\",\n    DiacriticalDot: \"˙\",\n    DiacriticalDoubleAcute: \"˝\",\n    DiacriticalGrave: \"`\",\n    DiacriticalTilde: \"˜\",\n    Diamond: \"⋄\",\n    DifferentialD: \"ⅆ\",\n    Dopf: \"\\uD835\\uDD3B\",\n    Dot: \"\\xa8\",\n    DotDot: \"⃜\",\n    DotEqual: \"≐\",\n    DoubleContourIntegral: \"∯\",\n    DoubleDot: \"\\xa8\",\n    DoubleDownArrow: \"⇓\",\n    DoubleLeftArrow: \"⇐\",\n    DoubleLeftRightArrow: \"⇔\",\n    DoubleLeftTee: \"⫤\",\n    DoubleLongLeftArrow: \"⟸\",\n    DoubleLongLeftRightArrow: \"⟺\",\n    DoubleLongRightArrow: \"⟹\",\n    DoubleRightArrow: \"⇒\",\n    DoubleRightTee: \"⊨\",\n    DoubleUpArrow: \"⇑\",\n    DoubleUpDownArrow: \"⇕\",\n    DoubleVerticalBar: \"∥\",\n    DownArrow: \"↓\",\n    DownArrowBar: \"⤓\",\n    DownArrowUpArrow: \"⇵\",\n    DownBreve: \"̑\",\n    DownLeftRightVector: \"⥐\",\n    DownLeftTeeVector: \"⥞\",\n    DownLeftVector: \"↽\",\n    DownLeftVectorBar: \"⥖\",\n    DownRightTeeVector: \"⥟\",\n    DownRightVector: \"⇁\",\n    DownRightVectorBar: \"⥗\",\n    DownTee: \"⊤\",\n    DownTeeArrow: \"↧\",\n    Downarrow: \"⇓\",\n    Dscr: \"\\uD835\\uDC9F\",\n    Dstrok: \"Đ\",\n    ENG: \"Ŋ\",\n    ETH: \"\\xd0\",\n    Eacute: \"\\xc9\",\n    Ecaron: \"Ě\",\n    Ecirc: \"\\xca\",\n    Ecy: \"Э\",\n    Edot: \"Ė\",\n    Efr: \"\\uD835\\uDD08\",\n    Egrave: \"\\xc8\",\n    Element: \"∈\",\n    Emacr: \"Ē\",\n    EmptySmallSquare: \"◻\",\n    EmptyVerySmallSquare: \"▫\",\n    Eogon: \"Ę\",\n    Eopf: \"\\uD835\\uDD3C\",\n    Epsilon: \"Ε\",\n    Equal: \"⩵\",\n    EqualTilde: \"≂\",\n    Equilibrium: \"⇌\",\n    Escr: \"ℰ\",\n    Esim: \"⩳\",\n    Eta: \"Η\",\n    Euml: \"\\xcb\",\n    Exists: \"∃\",\n    ExponentialE: \"ⅇ\",\n    Fcy: \"Ф\",\n    Ffr: \"\\uD835\\uDD09\",\n    FilledSmallSquare: \"◼\",\n    FilledVerySmallSquare: \"▪\",\n    Fopf: \"\\uD835\\uDD3D\",\n    ForAll: \"∀\",\n    Fouriertrf: \"ℱ\",\n    Fscr: \"ℱ\",\n    GJcy: \"Ѓ\",\n    GT: \">\",\n    Gamma: \"Γ\",\n    Gammad: \"Ϝ\",\n    Gbreve: \"Ğ\",\n    Gcedil: \"Ģ\",\n    Gcirc: \"Ĝ\",\n    Gcy: \"Г\",\n    Gdot: \"Ġ\",\n    Gfr: \"\\uD835\\uDD0A\",\n    Gg: \"⋙\",\n    Gopf: \"\\uD835\\uDD3E\",\n    GreaterEqual: \"≥\",\n    GreaterEqualLess: \"⋛\",\n    GreaterFullEqual: \"≧\",\n    GreaterGreater: \"⪢\",\n    GreaterLess: \"≷\",\n    GreaterSlantEqual: \"⩾\",\n    GreaterTilde: \"≳\",\n    Gscr: \"\\uD835\\uDCA2\",\n    Gt: \"≫\",\n    HARDcy: \"Ъ\",\n    Hacek: \"ˇ\",\n    Hat: \"^\",\n    Hcirc: \"Ĥ\",\n    Hfr: \"ℌ\",\n    HilbertSpace: \"ℋ\",\n    Hopf: \"ℍ\",\n    HorizontalLine: \"─\",\n    Hscr: \"ℋ\",\n    Hstrok: \"Ħ\",\n    HumpDownHump: \"≎\",\n    HumpEqual: \"≏\",\n    IEcy: \"Е\",\n    IJlig: \"Ĳ\",\n    IOcy: \"Ё\",\n    Iacute: \"\\xcd\",\n    Icirc: \"\\xce\",\n    Icy: \"И\",\n    Idot: \"İ\",\n    Ifr: \"ℑ\",\n    Igrave: \"\\xcc\",\n    Im: \"ℑ\",\n    Imacr: \"Ī\",\n    ImaginaryI: \"ⅈ\",\n    Implies: \"⇒\",\n    Int: \"∬\",\n    Integral: \"∫\",\n    Intersection: \"⋂\",\n    InvisibleComma: \"⁣\",\n    InvisibleTimes: \"⁢\",\n    Iogon: \"Į\",\n    Iopf: \"\\uD835\\uDD40\",\n    Iota: \"Ι\",\n    Iscr: \"ℐ\",\n    Itilde: \"Ĩ\",\n    Iukcy: \"І\",\n    Iuml: \"\\xcf\",\n    Jcirc: \"Ĵ\",\n    Jcy: \"Й\",\n    Jfr: \"\\uD835\\uDD0D\",\n    Jopf: \"\\uD835\\uDD41\",\n    Jscr: \"\\uD835\\uDCA5\",\n    Jsercy: \"Ј\",\n    Jukcy: \"Є\",\n    KHcy: \"Х\",\n    KJcy: \"Ќ\",\n    Kappa: \"Κ\",\n    Kcedil: \"Ķ\",\n    Kcy: \"К\",\n    Kfr: \"\\uD835\\uDD0E\",\n    Kopf: \"\\uD835\\uDD42\",\n    Kscr: \"\\uD835\\uDCA6\",\n    LJcy: \"Љ\",\n    LT: \"<\",\n    Lacute: \"Ĺ\",\n    Lambda: \"Λ\",\n    Lang: \"⟪\",\n    Laplacetrf: \"ℒ\",\n    Larr: \"↞\",\n    Lcaron: \"Ľ\",\n    Lcedil: \"Ļ\",\n    Lcy: \"Л\",\n    LeftAngleBracket: \"⟨\",\n    LeftArrow: \"←\",\n    LeftArrowBar: \"⇤\",\n    LeftArrowRightArrow: \"⇆\",\n    LeftCeiling: \"⌈\",\n    LeftDoubleBracket: \"⟦\",\n    LeftDownTeeVector: \"⥡\",\n    LeftDownVector: \"⇃\",\n    LeftDownVectorBar: \"⥙\",\n    LeftFloor: \"⌊\",\n    LeftRightArrow: \"↔\",\n    LeftRightVector: \"⥎\",\n    LeftTee: \"⊣\",\n    LeftTeeArrow: \"↤\",\n    LeftTeeVector: \"⥚\",\n    LeftTriangle: \"⊲\",\n    LeftTriangleBar: \"⧏\",\n    LeftTriangleEqual: \"⊴\",\n    LeftUpDownVector: \"⥑\",\n    LeftUpTeeVector: \"⥠\",\n    LeftUpVector: \"↿\",\n    LeftUpVectorBar: \"⥘\",\n    LeftVector: \"↼\",\n    LeftVectorBar: \"⥒\",\n    Leftarrow: \"⇐\",\n    Leftrightarrow: \"⇔\",\n    LessEqualGreater: \"⋚\",\n    LessFullEqual: \"≦\",\n    LessGreater: \"≶\",\n    LessLess: \"⪡\",\n    LessSlantEqual: \"⩽\",\n    LessTilde: \"≲\",\n    Lfr: \"\\uD835\\uDD0F\",\n    Ll: \"⋘\",\n    Lleftarrow: \"⇚\",\n    Lmidot: \"Ŀ\",\n    LongLeftArrow: \"⟵\",\n    LongLeftRightArrow: \"⟷\",\n    LongRightArrow: \"⟶\",\n    Longleftarrow: \"⟸\",\n    Longleftrightarrow: \"⟺\",\n    Longrightarrow: \"⟹\",\n    Lopf: \"\\uD835\\uDD43\",\n    LowerLeftArrow: \"↙\",\n    LowerRightArrow: \"↘\",\n    Lscr: \"ℒ\",\n    Lsh: \"↰\",\n    Lstrok: \"Ł\",\n    Lt: \"≪\",\n    Map: \"⤅\",\n    Mcy: \"М\",\n    MediumSpace: \" \",\n    Mellintrf: \"ℳ\",\n    Mfr: \"\\uD835\\uDD10\",\n    MinusPlus: \"∓\",\n    Mopf: \"\\uD835\\uDD44\",\n    Mscr: \"ℳ\",\n    Mu: \"Μ\",\n    NJcy: \"Њ\",\n    Nacute: \"Ń\",\n    Ncaron: \"Ň\",\n    Ncedil: \"Ņ\",\n    Ncy: \"Н\",\n    NegativeMediumSpace: \"​\",\n    NegativeThickSpace: \"​\",\n    NegativeThinSpace: \"​\",\n    NegativeVeryThinSpace: \"​\",\n    NestedGreaterGreater: \"≫\",\n    NestedLessLess: \"≪\",\n    NewLine: \"\\n\",\n    Nfr: \"\\uD835\\uDD11\",\n    NoBreak: \"⁠\",\n    NonBreakingSpace: \"\\xa0\",\n    Nopf: \"ℕ\",\n    Not: \"⫬\",\n    NotCongruent: \"≢\",\n    NotCupCap: \"≭\",\n    NotDoubleVerticalBar: \"∦\",\n    NotElement: \"∉\",\n    NotEqual: \"≠\",\n    NotEqualTilde: \"≂̸\",\n    NotExists: \"∄\",\n    NotGreater: \"≯\",\n    NotGreaterEqual: \"≱\",\n    NotGreaterFullEqual: \"≧̸\",\n    NotGreaterGreater: \"≫̸\",\n    NotGreaterLess: \"≹\",\n    NotGreaterSlantEqual: \"⩾̸\",\n    NotGreaterTilde: \"≵\",\n    NotHumpDownHump: \"≎̸\",\n    NotHumpEqual: \"≏̸\",\n    NotLeftTriangle: \"⋪\",\n    NotLeftTriangleBar: \"⧏̸\",\n    NotLeftTriangleEqual: \"⋬\",\n    NotLess: \"≮\",\n    NotLessEqual: \"≰\",\n    NotLessGreater: \"≸\",\n    NotLessLess: \"≪̸\",\n    NotLessSlantEqual: \"⩽̸\",\n    NotLessTilde: \"≴\",\n    NotNestedGreaterGreater: \"⪢̸\",\n    NotNestedLessLess: \"⪡̸\",\n    NotPrecedes: \"⊀\",\n    NotPrecedesEqual: \"⪯̸\",\n    NotPrecedesSlantEqual: \"⋠\",\n    NotReverseElement: \"∌\",\n    NotRightTriangle: \"⋫\",\n    NotRightTriangleBar: \"⧐̸\",\n    NotRightTriangleEqual: \"⋭\",\n    NotSquareSubset: \"⊏̸\",\n    NotSquareSubsetEqual: \"⋢\",\n    NotSquareSuperset: \"⊐̸\",\n    NotSquareSupersetEqual: \"⋣\",\n    NotSubset: \"⊂⃒\",\n    NotSubsetEqual: \"⊈\",\n    NotSucceeds: \"⊁\",\n    NotSucceedsEqual: \"⪰̸\",\n    NotSucceedsSlantEqual: \"⋡\",\n    NotSucceedsTilde: \"≿̸\",\n    NotSuperset: \"⊃⃒\",\n    NotSupersetEqual: \"⊉\",\n    NotTilde: \"≁\",\n    NotTildeEqual: \"≄\",\n    NotTildeFullEqual: \"≇\",\n    NotTildeTilde: \"≉\",\n    NotVerticalBar: \"∤\",\n    Nscr: \"\\uD835\\uDCA9\",\n    Ntilde: \"\\xd1\",\n    Nu: \"Ν\",\n    OElig: \"Œ\",\n    Oacute: \"\\xd3\",\n    Ocirc: \"\\xd4\",\n    Ocy: \"О\",\n    Odblac: \"Ő\",\n    Ofr: \"\\uD835\\uDD12\",\n    Ograve: \"\\xd2\",\n    Omacr: \"Ō\",\n    Omega: \"Ω\",\n    Omicron: \"Ο\",\n    Oopf: \"\\uD835\\uDD46\",\n    OpenCurlyDoubleQuote: \"“\",\n    OpenCurlyQuote: \"‘\",\n    Or: \"⩔\",\n    Oscr: \"\\uD835\\uDCAA\",\n    Oslash: \"\\xd8\",\n    Otilde: \"\\xd5\",\n    Otimes: \"⨷\",\n    Ouml: \"\\xd6\",\n    OverBar: \"‾\",\n    OverBrace: \"⏞\",\n    OverBracket: \"⎴\",\n    OverParenthesis: \"⏜\",\n    PartialD: \"∂\",\n    Pcy: \"П\",\n    Pfr: \"\\uD835\\uDD13\",\n    Phi: \"Φ\",\n    Pi: \"Π\",\n    PlusMinus: \"\\xb1\",\n    Poincareplane: \"ℌ\",\n    Popf: \"ℙ\",\n    Pr: \"⪻\",\n    Precedes: \"≺\",\n    PrecedesEqual: \"⪯\",\n    PrecedesSlantEqual: \"≼\",\n    PrecedesTilde: \"≾\",\n    Prime: \"″\",\n    Product: \"∏\",\n    Proportion: \"∷\",\n    Proportional: \"∝\",\n    Pscr: \"\\uD835\\uDCAB\",\n    Psi: \"Ψ\",\n    QUOT: '\"',\n    Qfr: \"\\uD835\\uDD14\",\n    Qopf: \"ℚ\",\n    Qscr: \"\\uD835\\uDCAC\",\n    RBarr: \"⤐\",\n    REG: \"\\xae\",\n    Racute: \"Ŕ\",\n    Rang: \"⟫\",\n    Rarr: \"↠\",\n    Rarrtl: \"⤖\",\n    Rcaron: \"Ř\",\n    Rcedil: \"Ŗ\",\n    Rcy: \"Р\",\n    Re: \"ℜ\",\n    ReverseElement: \"∋\",\n    ReverseEquilibrium: \"⇋\",\n    ReverseUpEquilibrium: \"⥯\",\n    Rfr: \"ℜ\",\n    Rho: \"Ρ\",\n    RightAngleBracket: \"⟩\",\n    RightArrow: \"→\",\n    RightArrowBar: \"⇥\",\n    RightArrowLeftArrow: \"⇄\",\n    RightCeiling: \"⌉\",\n    RightDoubleBracket: \"⟧\",\n    RightDownTeeVector: \"⥝\",\n    RightDownVector: \"⇂\",\n    RightDownVectorBar: \"⥕\",\n    RightFloor: \"⌋\",\n    RightTee: \"⊢\",\n    RightTeeArrow: \"↦\",\n    RightTeeVector: \"⥛\",\n    RightTriangle: \"⊳\",\n    RightTriangleBar: \"⧐\",\n    RightTriangleEqual: \"⊵\",\n    RightUpDownVector: \"⥏\",\n    RightUpTeeVector: \"⥜\",\n    RightUpVector: \"↾\",\n    RightUpVectorBar: \"⥔\",\n    RightVector: \"⇀\",\n    RightVectorBar: \"⥓\",\n    Rightarrow: \"⇒\",\n    Ropf: \"ℝ\",\n    RoundImplies: \"⥰\",\n    Rrightarrow: \"⇛\",\n    Rscr: \"ℛ\",\n    Rsh: \"↱\",\n    RuleDelayed: \"⧴\",\n    SHCHcy: \"Щ\",\n    SHcy: \"Ш\",\n    SOFTcy: \"Ь\",\n    Sacute: \"Ś\",\n    Sc: \"⪼\",\n    Scaron: \"Š\",\n    Scedil: \"Ş\",\n    Scirc: \"Ŝ\",\n    Scy: \"С\",\n    Sfr: \"\\uD835\\uDD16\",\n    ShortDownArrow: \"↓\",\n    ShortLeftArrow: \"←\",\n    ShortRightArrow: \"→\",\n    ShortUpArrow: \"↑\",\n    Sigma: \"Σ\",\n    SmallCircle: \"∘\",\n    Sopf: \"\\uD835\\uDD4A\",\n    Sqrt: \"√\",\n    Square: \"□\",\n    SquareIntersection: \"⊓\",\n    SquareSubset: \"⊏\",\n    SquareSubsetEqual: \"⊑\",\n    SquareSuperset: \"⊐\",\n    SquareSupersetEqual: \"⊒\",\n    SquareUnion: \"⊔\",\n    Sscr: \"\\uD835\\uDCAE\",\n    Star: \"⋆\",\n    Sub: \"⋐\",\n    Subset: \"⋐\",\n    SubsetEqual: \"⊆\",\n    Succeeds: \"≻\",\n    SucceedsEqual: \"⪰\",\n    SucceedsSlantEqual: \"≽\",\n    SucceedsTilde: \"≿\",\n    SuchThat: \"∋\",\n    Sum: \"∑\",\n    Sup: \"⋑\",\n    Superset: \"⊃\",\n    SupersetEqual: \"⊇\",\n    Supset: \"⋑\",\n    THORN: \"\\xde\",\n    TRADE: \"™\",\n    TSHcy: \"Ћ\",\n    TScy: \"Ц\",\n    Tab: \"\t\",\n    Tau: \"Τ\",\n    Tcaron: \"Ť\",\n    Tcedil: \"Ţ\",\n    Tcy: \"Т\",\n    Tfr: \"\\uD835\\uDD17\",\n    Therefore: \"∴\",\n    Theta: \"Θ\",\n    ThickSpace: \"  \",\n    ThinSpace: \" \",\n    Tilde: \"∼\",\n    TildeEqual: \"≃\",\n    TildeFullEqual: \"≅\",\n    TildeTilde: \"≈\",\n    Topf: \"\\uD835\\uDD4B\",\n    TripleDot: \"⃛\",\n    Tscr: \"\\uD835\\uDCAF\",\n    Tstrok: \"Ŧ\",\n    Uacute: \"\\xda\",\n    Uarr: \"↟\",\n    Uarrocir: \"⥉\",\n    Ubrcy: \"Ў\",\n    Ubreve: \"Ŭ\",\n    Ucirc: \"\\xdb\",\n    Ucy: \"У\",\n    Udblac: \"Ű\",\n    Ufr: \"\\uD835\\uDD18\",\n    Ugrave: \"\\xd9\",\n    Umacr: \"Ū\",\n    UnderBar: \"_\",\n    UnderBrace: \"⏟\",\n    UnderBracket: \"⎵\",\n    UnderParenthesis: \"⏝\",\n    Union: \"⋃\",\n    UnionPlus: \"⊎\",\n    Uogon: \"Ų\",\n    Uopf: \"\\uD835\\uDD4C\",\n    UpArrow: \"↑\",\n    UpArrowBar: \"⤒\",\n    UpArrowDownArrow: \"⇅\",\n    UpDownArrow: \"↕\",\n    UpEquilibrium: \"⥮\",\n    UpTee: \"⊥\",\n    UpTeeArrow: \"↥\",\n    Uparrow: \"⇑\",\n    Updownarrow: \"⇕\",\n    UpperLeftArrow: \"↖\",\n    UpperRightArrow: \"↗\",\n    Upsi: \"ϒ\",\n    Upsilon: \"Υ\",\n    Uring: \"Ů\",\n    Uscr: \"\\uD835\\uDCB0\",\n    Utilde: \"Ũ\",\n    Uuml: \"\\xdc\",\n    VDash: \"⊫\",\n    Vbar: \"⫫\",\n    Vcy: \"В\",\n    Vdash: \"⊩\",\n    Vdashl: \"⫦\",\n    Vee: \"⋁\",\n    Verbar: \"‖\",\n    Vert: \"‖\",\n    VerticalBar: \"∣\",\n    VerticalLine: \"|\",\n    VerticalSeparator: \"❘\",\n    VerticalTilde: \"≀\",\n    VeryThinSpace: \" \",\n    Vfr: \"\\uD835\\uDD19\",\n    Vopf: \"\\uD835\\uDD4D\",\n    Vscr: \"\\uD835\\uDCB1\",\n    Vvdash: \"⊪\",\n    Wcirc: \"Ŵ\",\n    Wedge: \"⋀\",\n    Wfr: \"\\uD835\\uDD1A\",\n    Wopf: \"\\uD835\\uDD4E\",\n    Wscr: \"\\uD835\\uDCB2\",\n    Xfr: \"\\uD835\\uDD1B\",\n    Xi: \"Ξ\",\n    Xopf: \"\\uD835\\uDD4F\",\n    Xscr: \"\\uD835\\uDCB3\",\n    YAcy: \"Я\",\n    YIcy: \"Ї\",\n    YUcy: \"Ю\",\n    Yacute: \"\\xdd\",\n    Ycirc: \"Ŷ\",\n    Ycy: \"Ы\",\n    Yfr: \"\\uD835\\uDD1C\",\n    Yopf: \"\\uD835\\uDD50\",\n    Yscr: \"\\uD835\\uDCB4\",\n    Yuml: \"Ÿ\",\n    ZHcy: \"Ж\",\n    Zacute: \"Ź\",\n    Zcaron: \"Ž\",\n    Zcy: \"З\",\n    Zdot: \"Ż\",\n    ZeroWidthSpace: \"​\",\n    Zeta: \"Ζ\",\n    Zfr: \"ℨ\",\n    Zopf: \"ℤ\",\n    Zscr: \"\\uD835\\uDCB5\",\n    aacute: \"\\xe1\",\n    abreve: \"ă\",\n    ac: \"∾\",\n    acE: \"∾̳\",\n    acd: \"∿\",\n    acirc: \"\\xe2\",\n    acute: \"\\xb4\",\n    acy: \"а\",\n    aelig: \"\\xe6\",\n    af: \"⁡\",\n    afr: \"\\uD835\\uDD1E\",\n    agrave: \"\\xe0\",\n    alefsym: \"ℵ\",\n    aleph: \"ℵ\",\n    alpha: \"α\",\n    amacr: \"ā\",\n    amalg: \"⨿\",\n    amp: \"&\",\n    and: \"∧\",\n    andand: \"⩕\",\n    andd: \"⩜\",\n    andslope: \"⩘\",\n    andv: \"⩚\",\n    ang: \"∠\",\n    ange: \"⦤\",\n    angle: \"∠\",\n    angmsd: \"∡\",\n    angmsdaa: \"⦨\",\n    angmsdab: \"⦩\",\n    angmsdac: \"⦪\",\n    angmsdad: \"⦫\",\n    angmsdae: \"⦬\",\n    angmsdaf: \"⦭\",\n    angmsdag: \"⦮\",\n    angmsdah: \"⦯\",\n    angrt: \"∟\",\n    angrtvb: \"⊾\",\n    angrtvbd: \"⦝\",\n    angsph: \"∢\",\n    angst: \"\\xc5\",\n    angzarr: \"⍼\",\n    aogon: \"ą\",\n    aopf: \"\\uD835\\uDD52\",\n    ap: \"≈\",\n    apE: \"⩰\",\n    apacir: \"⩯\",\n    ape: \"≊\",\n    apid: \"≋\",\n    apos: \"'\",\n    approx: \"≈\",\n    approxeq: \"≊\",\n    aring: \"\\xe5\",\n    ascr: \"\\uD835\\uDCB6\",\n    ast: \"*\",\n    asymp: \"≈\",\n    asympeq: \"≍\",\n    atilde: \"\\xe3\",\n    auml: \"\\xe4\",\n    awconint: \"∳\",\n    awint: \"⨑\",\n    bNot: \"⫭\",\n    backcong: \"≌\",\n    backepsilon: \"϶\",\n    backprime: \"‵\",\n    backsim: \"∽\",\n    backsimeq: \"⋍\",\n    barvee: \"⊽\",\n    barwed: \"⌅\",\n    barwedge: \"⌅\",\n    bbrk: \"⎵\",\n    bbrktbrk: \"⎶\",\n    bcong: \"≌\",\n    bcy: \"б\",\n    bdquo: \"„\",\n    becaus: \"∵\",\n    because: \"∵\",\n    bemptyv: \"⦰\",\n    bepsi: \"϶\",\n    bernou: \"ℬ\",\n    beta: \"β\",\n    beth: \"ℶ\",\n    between: \"≬\",\n    bfr: \"\\uD835\\uDD1F\",\n    bigcap: \"⋂\",\n    bigcirc: \"◯\",\n    bigcup: \"⋃\",\n    bigodot: \"⨀\",\n    bigoplus: \"⨁\",\n    bigotimes: \"⨂\",\n    bigsqcup: \"⨆\",\n    bigstar: \"★\",\n    bigtriangledown: \"▽\",\n    bigtriangleup: \"△\",\n    biguplus: \"⨄\",\n    bigvee: \"⋁\",\n    bigwedge: \"⋀\",\n    bkarow: \"⤍\",\n    blacklozenge: \"⧫\",\n    blacksquare: \"▪\",\n    blacktriangle: \"▴\",\n    blacktriangledown: \"▾\",\n    blacktriangleleft: \"◂\",\n    blacktriangleright: \"▸\",\n    blank: \"␣\",\n    blk12: \"▒\",\n    blk14: \"░\",\n    blk34: \"▓\",\n    block: \"█\",\n    bne: \"=⃥\",\n    bnequiv: \"≡⃥\",\n    bnot: \"⌐\",\n    bopf: \"\\uD835\\uDD53\",\n    bot: \"⊥\",\n    bottom: \"⊥\",\n    bowtie: \"⋈\",\n    boxDL: \"╗\",\n    boxDR: \"╔\",\n    boxDl: \"╖\",\n    boxDr: \"╓\",\n    boxH: \"═\",\n    boxHD: \"╦\",\n    boxHU: \"╩\",\n    boxHd: \"╤\",\n    boxHu: \"╧\",\n    boxUL: \"╝\",\n    boxUR: \"╚\",\n    boxUl: \"╜\",\n    boxUr: \"╙\",\n    boxV: \"║\",\n    boxVH: \"╬\",\n    boxVL: \"╣\",\n    boxVR: \"╠\",\n    boxVh: \"╫\",\n    boxVl: \"╢\",\n    boxVr: \"╟\",\n    boxbox: \"⧉\",\n    boxdL: \"╕\",\n    boxdR: \"╒\",\n    boxdl: \"┐\",\n    boxdr: \"┌\",\n    boxh: \"─\",\n    boxhD: \"╥\",\n    boxhU: \"╨\",\n    boxhd: \"┬\",\n    boxhu: \"┴\",\n    boxminus: \"⊟\",\n    boxplus: \"⊞\",\n    boxtimes: \"⊠\",\n    boxuL: \"╛\",\n    boxuR: \"╘\",\n    boxul: \"┘\",\n    boxur: \"└\",\n    boxv: \"│\",\n    boxvH: \"╪\",\n    boxvL: \"╡\",\n    boxvR: \"╞\",\n    boxvh: \"┼\",\n    boxvl: \"┤\",\n    boxvr: \"├\",\n    bprime: \"‵\",\n    breve: \"˘\",\n    brvbar: \"\\xa6\",\n    bscr: \"\\uD835\\uDCB7\",\n    bsemi: \"⁏\",\n    bsim: \"∽\",\n    bsime: \"⋍\",\n    bsol: \"\\\\\",\n    bsolb: \"⧅\",\n    bsolhsub: \"⟈\",\n    bull: \"•\",\n    bullet: \"•\",\n    bump: \"≎\",\n    bumpE: \"⪮\",\n    bumpe: \"≏\",\n    bumpeq: \"≏\",\n    cacute: \"ć\",\n    cap: \"∩\",\n    capand: \"⩄\",\n    capbrcup: \"⩉\",\n    capcap: \"⩋\",\n    capcup: \"⩇\",\n    capdot: \"⩀\",\n    caps: \"∩︀\",\n    caret: \"⁁\",\n    caron: \"ˇ\",\n    ccaps: \"⩍\",\n    ccaron: \"č\",\n    ccedil: \"\\xe7\",\n    ccirc: \"ĉ\",\n    ccups: \"⩌\",\n    ccupssm: \"⩐\",\n    cdot: \"ċ\",\n    cedil: \"\\xb8\",\n    cemptyv: \"⦲\",\n    cent: \"\\xa2\",\n    centerdot: \"\\xb7\",\n    cfr: \"\\uD835\\uDD20\",\n    chcy: \"ч\",\n    check: \"✓\",\n    checkmark: \"✓\",\n    chi: \"χ\",\n    cir: \"○\",\n    cirE: \"⧃\",\n    circ: \"ˆ\",\n    circeq: \"≗\",\n    circlearrowleft: \"↺\",\n    circlearrowright: \"↻\",\n    circledR: \"\\xae\",\n    circledS: \"Ⓢ\",\n    circledast: \"⊛\",\n    circledcirc: \"⊚\",\n    circleddash: \"⊝\",\n    cire: \"≗\",\n    cirfnint: \"⨐\",\n    cirmid: \"⫯\",\n    cirscir: \"⧂\",\n    clubs: \"♣\",\n    clubsuit: \"♣\",\n    colon: \":\",\n    colone: \"≔\",\n    coloneq: \"≔\",\n    comma: \",\",\n    commat: \"@\",\n    comp: \"∁\",\n    compfn: \"∘\",\n    complement: \"∁\",\n    complexes: \"ℂ\",\n    cong: \"≅\",\n    congdot: \"⩭\",\n    conint: \"∮\",\n    copf: \"\\uD835\\uDD54\",\n    coprod: \"∐\",\n    copy: \"\\xa9\",\n    copysr: \"℗\",\n    crarr: \"↵\",\n    cross: \"✗\",\n    cscr: \"\\uD835\\uDCB8\",\n    csub: \"⫏\",\n    csube: \"⫑\",\n    csup: \"⫐\",\n    csupe: \"⫒\",\n    ctdot: \"⋯\",\n    cudarrl: \"⤸\",\n    cudarrr: \"⤵\",\n    cuepr: \"⋞\",\n    cuesc: \"⋟\",\n    cularr: \"↶\",\n    cularrp: \"⤽\",\n    cup: \"∪\",\n    cupbrcap: \"⩈\",\n    cupcap: \"⩆\",\n    cupcup: \"⩊\",\n    cupdot: \"⊍\",\n    cupor: \"⩅\",\n    cups: \"∪︀\",\n    curarr: \"↷\",\n    curarrm: \"⤼\",\n    curlyeqprec: \"⋞\",\n    curlyeqsucc: \"⋟\",\n    curlyvee: \"⋎\",\n    curlywedge: \"⋏\",\n    curren: \"\\xa4\",\n    curvearrowleft: \"↶\",\n    curvearrowright: \"↷\",\n    cuvee: \"⋎\",\n    cuwed: \"⋏\",\n    cwconint: \"∲\",\n    cwint: \"∱\",\n    cylcty: \"⌭\",\n    dArr: \"⇓\",\n    dHar: \"⥥\",\n    dagger: \"†\",\n    daleth: \"ℸ\",\n    darr: \"↓\",\n    dash: \"‐\",\n    dashv: \"⊣\",\n    dbkarow: \"⤏\",\n    dblac: \"˝\",\n    dcaron: \"ď\",\n    dcy: \"д\",\n    dd: \"ⅆ\",\n    ddagger: \"‡\",\n    ddarr: \"⇊\",\n    ddotseq: \"⩷\",\n    deg: \"\\xb0\",\n    delta: \"δ\",\n    demptyv: \"⦱\",\n    dfisht: \"⥿\",\n    dfr: \"\\uD835\\uDD21\",\n    dharl: \"⇃\",\n    dharr: \"⇂\",\n    diam: \"⋄\",\n    diamond: \"⋄\",\n    diamondsuit: \"♦\",\n    diams: \"♦\",\n    die: \"\\xa8\",\n    digamma: \"ϝ\",\n    disin: \"⋲\",\n    div: \"\\xf7\",\n    divide: \"\\xf7\",\n    divideontimes: \"⋇\",\n    divonx: \"⋇\",\n    djcy: \"ђ\",\n    dlcorn: \"⌞\",\n    dlcrop: \"⌍\",\n    dollar: \"$\",\n    dopf: \"\\uD835\\uDD55\",\n    dot: \"˙\",\n    doteq: \"≐\",\n    doteqdot: \"≑\",\n    dotminus: \"∸\",\n    dotplus: \"∔\",\n    dotsquare: \"⊡\",\n    doublebarwedge: \"⌆\",\n    downarrow: \"↓\",\n    downdownarrows: \"⇊\",\n    downharpoonleft: \"⇃\",\n    downharpoonright: \"⇂\",\n    drbkarow: \"⤐\",\n    drcorn: \"⌟\",\n    drcrop: \"⌌\",\n    dscr: \"\\uD835\\uDCB9\",\n    dscy: \"ѕ\",\n    dsol: \"⧶\",\n    dstrok: \"đ\",\n    dtdot: \"⋱\",\n    dtri: \"▿\",\n    dtrif: \"▾\",\n    duarr: \"⇵\",\n    duhar: \"⥯\",\n    dwangle: \"⦦\",\n    dzcy: \"џ\",\n    dzigrarr: \"⟿\",\n    eDDot: \"⩷\",\n    eDot: \"≑\",\n    eacute: \"\\xe9\",\n    easter: \"⩮\",\n    ecaron: \"ě\",\n    ecir: \"≖\",\n    ecirc: \"\\xea\",\n    ecolon: \"≕\",\n    ecy: \"э\",\n    edot: \"ė\",\n    ee: \"ⅇ\",\n    efDot: \"≒\",\n    efr: \"\\uD835\\uDD22\",\n    eg: \"⪚\",\n    egrave: \"\\xe8\",\n    egs: \"⪖\",\n    egsdot: \"⪘\",\n    el: \"⪙\",\n    elinters: \"⏧\",\n    ell: \"ℓ\",\n    els: \"⪕\",\n    elsdot: \"⪗\",\n    emacr: \"ē\",\n    empty: \"∅\",\n    emptyset: \"∅\",\n    emptyv: \"∅\",\n    emsp13: \" \",\n    emsp14: \" \",\n    emsp: \" \",\n    eng: \"ŋ\",\n    ensp: \" \",\n    eogon: \"ę\",\n    eopf: \"\\uD835\\uDD56\",\n    epar: \"⋕\",\n    eparsl: \"⧣\",\n    eplus: \"⩱\",\n    epsi: \"ε\",\n    epsilon: \"ε\",\n    epsiv: \"ϵ\",\n    eqcirc: \"≖\",\n    eqcolon: \"≕\",\n    eqsim: \"≂\",\n    eqslantgtr: \"⪖\",\n    eqslantless: \"⪕\",\n    equals: \"=\",\n    equest: \"≟\",\n    equiv: \"≡\",\n    equivDD: \"⩸\",\n    eqvparsl: \"⧥\",\n    erDot: \"≓\",\n    erarr: \"⥱\",\n    escr: \"ℯ\",\n    esdot: \"≐\",\n    esim: \"≂\",\n    eta: \"η\",\n    eth: \"\\xf0\",\n    euml: \"\\xeb\",\n    euro: \"€\",\n    excl: \"!\",\n    exist: \"∃\",\n    expectation: \"ℰ\",\n    exponentiale: \"ⅇ\",\n    fallingdotseq: \"≒\",\n    fcy: \"ф\",\n    female: \"♀\",\n    ffilig: \"ﬃ\",\n    fflig: \"ﬀ\",\n    ffllig: \"ﬄ\",\n    ffr: \"\\uD835\\uDD23\",\n    filig: \"ﬁ\",\n    fjlig: \"fj\",\n    flat: \"♭\",\n    fllig: \"ﬂ\",\n    fltns: \"▱\",\n    fnof: \"ƒ\",\n    fopf: \"\\uD835\\uDD57\",\n    forall: \"∀\",\n    fork: \"⋔\",\n    forkv: \"⫙\",\n    fpartint: \"⨍\",\n    frac12: \"\\xbd\",\n    frac13: \"⅓\",\n    frac14: \"\\xbc\",\n    frac15: \"⅕\",\n    frac16: \"⅙\",\n    frac18: \"⅛\",\n    frac23: \"⅔\",\n    frac25: \"⅖\",\n    frac34: \"\\xbe\",\n    frac35: \"⅗\",\n    frac38: \"⅜\",\n    frac45: \"⅘\",\n    frac56: \"⅚\",\n    frac58: \"⅝\",\n    frac78: \"⅞\",\n    frasl: \"⁄\",\n    frown: \"⌢\",\n    fscr: \"\\uD835\\uDCBB\",\n    gE: \"≧\",\n    gEl: \"⪌\",\n    gacute: \"ǵ\",\n    gamma: \"γ\",\n    gammad: \"ϝ\",\n    gap: \"⪆\",\n    gbreve: \"ğ\",\n    gcirc: \"ĝ\",\n    gcy: \"г\",\n    gdot: \"ġ\",\n    ge: \"≥\",\n    gel: \"⋛\",\n    geq: \"≥\",\n    geqq: \"≧\",\n    geqslant: \"⩾\",\n    ges: \"⩾\",\n    gescc: \"⪩\",\n    gesdot: \"⪀\",\n    gesdoto: \"⪂\",\n    gesdotol: \"⪄\",\n    gesl: \"⋛︀\",\n    gesles: \"⪔\",\n    gfr: \"\\uD835\\uDD24\",\n    gg: \"≫\",\n    ggg: \"⋙\",\n    gimel: \"ℷ\",\n    gjcy: \"ѓ\",\n    gl: \"≷\",\n    glE: \"⪒\",\n    gla: \"⪥\",\n    glj: \"⪤\",\n    gnE: \"≩\",\n    gnap: \"⪊\",\n    gnapprox: \"⪊\",\n    gne: \"⪈\",\n    gneq: \"⪈\",\n    gneqq: \"≩\",\n    gnsim: \"⋧\",\n    gopf: \"\\uD835\\uDD58\",\n    grave: \"`\",\n    gscr: \"ℊ\",\n    gsim: \"≳\",\n    gsime: \"⪎\",\n    gsiml: \"⪐\",\n    gt: \">\",\n    gtcc: \"⪧\",\n    gtcir: \"⩺\",\n    gtdot: \"⋗\",\n    gtlPar: \"⦕\",\n    gtquest: \"⩼\",\n    gtrapprox: \"⪆\",\n    gtrarr: \"⥸\",\n    gtrdot: \"⋗\",\n    gtreqless: \"⋛\",\n    gtreqqless: \"⪌\",\n    gtrless: \"≷\",\n    gtrsim: \"≳\",\n    gvertneqq: \"≩︀\",\n    gvnE: \"≩︀\",\n    hArr: \"⇔\",\n    hairsp: \" \",\n    half: \"\\xbd\",\n    hamilt: \"ℋ\",\n    hardcy: \"ъ\",\n    harr: \"↔\",\n    harrcir: \"⥈\",\n    harrw: \"↭\",\n    hbar: \"ℏ\",\n    hcirc: \"ĥ\",\n    hearts: \"♥\",\n    heartsuit: \"♥\",\n    hellip: \"…\",\n    hercon: \"⊹\",\n    hfr: \"\\uD835\\uDD25\",\n    hksearow: \"⤥\",\n    hkswarow: \"⤦\",\n    hoarr: \"⇿\",\n    homtht: \"∻\",\n    hookleftarrow: \"↩\",\n    hookrightarrow: \"↪\",\n    hopf: \"\\uD835\\uDD59\",\n    horbar: \"―\",\n    hscr: \"\\uD835\\uDCBD\",\n    hslash: \"ℏ\",\n    hstrok: \"ħ\",\n    hybull: \"⁃\",\n    hyphen: \"‐\",\n    iacute: \"\\xed\",\n    ic: \"⁣\",\n    icirc: \"\\xee\",\n    icy: \"и\",\n    iecy: \"е\",\n    iexcl: \"\\xa1\",\n    iff: \"⇔\",\n    ifr: \"\\uD835\\uDD26\",\n    igrave: \"\\xec\",\n    ii: \"ⅈ\",\n    iiiint: \"⨌\",\n    iiint: \"∭\",\n    iinfin: \"⧜\",\n    iiota: \"℩\",\n    ijlig: \"ĳ\",\n    imacr: \"ī\",\n    image: \"ℑ\",\n    imagline: \"ℐ\",\n    imagpart: \"ℑ\",\n    imath: \"ı\",\n    imof: \"⊷\",\n    imped: \"Ƶ\",\n    in: \"∈\",\n    incare: \"℅\",\n    infin: \"∞\",\n    infintie: \"⧝\",\n    inodot: \"ı\",\n    int: \"∫\",\n    intcal: \"⊺\",\n    integers: \"ℤ\",\n    intercal: \"⊺\",\n    intlarhk: \"⨗\",\n    intprod: \"⨼\",\n    iocy: \"ё\",\n    iogon: \"į\",\n    iopf: \"\\uD835\\uDD5A\",\n    iota: \"ι\",\n    iprod: \"⨼\",\n    iquest: \"\\xbf\",\n    iscr: \"\\uD835\\uDCBE\",\n    isin: \"∈\",\n    isinE: \"⋹\",\n    isindot: \"⋵\",\n    isins: \"⋴\",\n    isinsv: \"⋳\",\n    isinv: \"∈\",\n    it: \"⁢\",\n    itilde: \"ĩ\",\n    iukcy: \"і\",\n    iuml: \"\\xef\",\n    jcirc: \"ĵ\",\n    jcy: \"й\",\n    jfr: \"\\uD835\\uDD27\",\n    jmath: \"ȷ\",\n    jopf: \"\\uD835\\uDD5B\",\n    jscr: \"\\uD835\\uDCBF\",\n    jsercy: \"ј\",\n    jukcy: \"є\",\n    kappa: \"κ\",\n    kappav: \"ϰ\",\n    kcedil: \"ķ\",\n    kcy: \"к\",\n    kfr: \"\\uD835\\uDD28\",\n    kgreen: \"ĸ\",\n    khcy: \"х\",\n    kjcy: \"ќ\",\n    kopf: \"\\uD835\\uDD5C\",\n    kscr: \"\\uD835\\uDCC0\",\n    lAarr: \"⇚\",\n    lArr: \"⇐\",\n    lAtail: \"⤛\",\n    lBarr: \"⤎\",\n    lE: \"≦\",\n    lEg: \"⪋\",\n    lHar: \"⥢\",\n    lacute: \"ĺ\",\n    laemptyv: \"⦴\",\n    lagran: \"ℒ\",\n    lambda: \"λ\",\n    lang: \"⟨\",\n    langd: \"⦑\",\n    langle: \"⟨\",\n    lap: \"⪅\",\n    laquo: \"\\xab\",\n    larr: \"←\",\n    larrb: \"⇤\",\n    larrbfs: \"⤟\",\n    larrfs: \"⤝\",\n    larrhk: \"↩\",\n    larrlp: \"↫\",\n    larrpl: \"⤹\",\n    larrsim: \"⥳\",\n    larrtl: \"↢\",\n    lat: \"⪫\",\n    latail: \"⤙\",\n    late: \"⪭\",\n    lates: \"⪭︀\",\n    lbarr: \"⤌\",\n    lbbrk: \"❲\",\n    lbrace: \"{\",\n    lbrack: \"[\",\n    lbrke: \"⦋\",\n    lbrksld: \"⦏\",\n    lbrkslu: \"⦍\",\n    lcaron: \"ľ\",\n    lcedil: \"ļ\",\n    lceil: \"⌈\",\n    lcub: \"{\",\n    lcy: \"л\",\n    ldca: \"⤶\",\n    ldquo: \"“\",\n    ldquor: \"„\",\n    ldrdhar: \"⥧\",\n    ldrushar: \"⥋\",\n    ldsh: \"↲\",\n    le: \"≤\",\n    leftarrow: \"←\",\n    leftarrowtail: \"↢\",\n    leftharpoondown: \"↽\",\n    leftharpoonup: \"↼\",\n    leftleftarrows: \"⇇\",\n    leftrightarrow: \"↔\",\n    leftrightarrows: \"⇆\",\n    leftrightharpoons: \"⇋\",\n    leftrightsquigarrow: \"↭\",\n    leftthreetimes: \"⋋\",\n    leg: \"⋚\",\n    leq: \"≤\",\n    leqq: \"≦\",\n    leqslant: \"⩽\",\n    les: \"⩽\",\n    lescc: \"⪨\",\n    lesdot: \"⩿\",\n    lesdoto: \"⪁\",\n    lesdotor: \"⪃\",\n    lesg: \"⋚︀\",\n    lesges: \"⪓\",\n    lessapprox: \"⪅\",\n    lessdot: \"⋖\",\n    lesseqgtr: \"⋚\",\n    lesseqqgtr: \"⪋\",\n    lessgtr: \"≶\",\n    lesssim: \"≲\",\n    lfisht: \"⥼\",\n    lfloor: \"⌊\",\n    lfr: \"\\uD835\\uDD29\",\n    lg: \"≶\",\n    lgE: \"⪑\",\n    lhard: \"↽\",\n    lharu: \"↼\",\n    lharul: \"⥪\",\n    lhblk: \"▄\",\n    ljcy: \"љ\",\n    ll: \"≪\",\n    llarr: \"⇇\",\n    llcorner: \"⌞\",\n    llhard: \"⥫\",\n    lltri: \"◺\",\n    lmidot: \"ŀ\",\n    lmoust: \"⎰\",\n    lmoustache: \"⎰\",\n    lnE: \"≨\",\n    lnap: \"⪉\",\n    lnapprox: \"⪉\",\n    lne: \"⪇\",\n    lneq: \"⪇\",\n    lneqq: \"≨\",\n    lnsim: \"⋦\",\n    loang: \"⟬\",\n    loarr: \"⇽\",\n    lobrk: \"⟦\",\n    longleftarrow: \"⟵\",\n    longleftrightarrow: \"⟷\",\n    longmapsto: \"⟼\",\n    longrightarrow: \"⟶\",\n    looparrowleft: \"↫\",\n    looparrowright: \"↬\",\n    lopar: \"⦅\",\n    lopf: \"\\uD835\\uDD5D\",\n    loplus: \"⨭\",\n    lotimes: \"⨴\",\n    lowast: \"∗\",\n    lowbar: \"_\",\n    loz: \"◊\",\n    lozenge: \"◊\",\n    lozf: \"⧫\",\n    lpar: \"(\",\n    lparlt: \"⦓\",\n    lrarr: \"⇆\",\n    lrcorner: \"⌟\",\n    lrhar: \"⇋\",\n    lrhard: \"⥭\",\n    lrm: \"‎\",\n    lrtri: \"⊿\",\n    lsaquo: \"‹\",\n    lscr: \"\\uD835\\uDCC1\",\n    lsh: \"↰\",\n    lsim: \"≲\",\n    lsime: \"⪍\",\n    lsimg: \"⪏\",\n    lsqb: \"[\",\n    lsquo: \"‘\",\n    lsquor: \"‚\",\n    lstrok: \"ł\",\n    lt: \"<\",\n    ltcc: \"⪦\",\n    ltcir: \"⩹\",\n    ltdot: \"⋖\",\n    lthree: \"⋋\",\n    ltimes: \"⋉\",\n    ltlarr: \"⥶\",\n    ltquest: \"⩻\",\n    ltrPar: \"⦖\",\n    ltri: \"◃\",\n    ltrie: \"⊴\",\n    ltrif: \"◂\",\n    lurdshar: \"⥊\",\n    luruhar: \"⥦\",\n    lvertneqq: \"≨︀\",\n    lvnE: \"≨︀\",\n    mDDot: \"∺\",\n    macr: \"\\xaf\",\n    male: \"♂\",\n    malt: \"✠\",\n    maltese: \"✠\",\n    map: \"↦\",\n    mapsto: \"↦\",\n    mapstodown: \"↧\",\n    mapstoleft: \"↤\",\n    mapstoup: \"↥\",\n    marker: \"▮\",\n    mcomma: \"⨩\",\n    mcy: \"м\",\n    mdash: \"—\",\n    measuredangle: \"∡\",\n    mfr: \"\\uD835\\uDD2A\",\n    mho: \"℧\",\n    micro: \"\\xb5\",\n    mid: \"∣\",\n    midast: \"*\",\n    midcir: \"⫰\",\n    middot: \"\\xb7\",\n    minus: \"−\",\n    minusb: \"⊟\",\n    minusd: \"∸\",\n    minusdu: \"⨪\",\n    mlcp: \"⫛\",\n    mldr: \"…\",\n    mnplus: \"∓\",\n    models: \"⊧\",\n    mopf: \"\\uD835\\uDD5E\",\n    mp: \"∓\",\n    mscr: \"\\uD835\\uDCC2\",\n    mstpos: \"∾\",\n    mu: \"μ\",\n    multimap: \"⊸\",\n    mumap: \"⊸\",\n    nGg: \"⋙̸\",\n    nGt: \"≫⃒\",\n    nGtv: \"≫̸\",\n    nLeftarrow: \"⇍\",\n    nLeftrightarrow: \"⇎\",\n    nLl: \"⋘̸\",\n    nLt: \"≪⃒\",\n    nLtv: \"≪̸\",\n    nRightarrow: \"⇏\",\n    nVDash: \"⊯\",\n    nVdash: \"⊮\",\n    nabla: \"∇\",\n    nacute: \"ń\",\n    nang: \"∠⃒\",\n    nap: \"≉\",\n    napE: \"⩰̸\",\n    napid: \"≋̸\",\n    napos: \"ŉ\",\n    napprox: \"≉\",\n    natur: \"♮\",\n    natural: \"♮\",\n    naturals: \"ℕ\",\n    nbsp: \"\\xa0\",\n    nbump: \"≎̸\",\n    nbumpe: \"≏̸\",\n    ncap: \"⩃\",\n    ncaron: \"ň\",\n    ncedil: \"ņ\",\n    ncong: \"≇\",\n    ncongdot: \"⩭̸\",\n    ncup: \"⩂\",\n    ncy: \"н\",\n    ndash: \"–\",\n    ne: \"≠\",\n    neArr: \"⇗\",\n    nearhk: \"⤤\",\n    nearr: \"↗\",\n    nearrow: \"↗\",\n    nedot: \"≐̸\",\n    nequiv: \"≢\",\n    nesear: \"⤨\",\n    nesim: \"≂̸\",\n    nexist: \"∄\",\n    nexists: \"∄\",\n    nfr: \"\\uD835\\uDD2B\",\n    ngE: \"≧̸\",\n    nge: \"≱\",\n    ngeq: \"≱\",\n    ngeqq: \"≧̸\",\n    ngeqslant: \"⩾̸\",\n    nges: \"⩾̸\",\n    ngsim: \"≵\",\n    ngt: \"≯\",\n    ngtr: \"≯\",\n    nhArr: \"⇎\",\n    nharr: \"↮\",\n    nhpar: \"⫲\",\n    ni: \"∋\",\n    nis: \"⋼\",\n    nisd: \"⋺\",\n    niv: \"∋\",\n    njcy: \"њ\",\n    nlArr: \"⇍\",\n    nlE: \"≦̸\",\n    nlarr: \"↚\",\n    nldr: \"‥\",\n    nle: \"≰\",\n    nleftarrow: \"↚\",\n    nleftrightarrow: \"↮\",\n    nleq: \"≰\",\n    nleqq: \"≦̸\",\n    nleqslant: \"⩽̸\",\n    nles: \"⩽̸\",\n    nless: \"≮\",\n    nlsim: \"≴\",\n    nlt: \"≮\",\n    nltri: \"⋪\",\n    nltrie: \"⋬\",\n    nmid: \"∤\",\n    nopf: \"\\uD835\\uDD5F\",\n    not: \"\\xac\",\n    notin: \"∉\",\n    notinE: \"⋹̸\",\n    notindot: \"⋵̸\",\n    notinva: \"∉\",\n    notinvb: \"⋷\",\n    notinvc: \"⋶\",\n    notni: \"∌\",\n    notniva: \"∌\",\n    notnivb: \"⋾\",\n    notnivc: \"⋽\",\n    npar: \"∦\",\n    nparallel: \"∦\",\n    nparsl: \"⫽⃥\",\n    npart: \"∂̸\",\n    npolint: \"⨔\",\n    npr: \"⊀\",\n    nprcue: \"⋠\",\n    npre: \"⪯̸\",\n    nprec: \"⊀\",\n    npreceq: \"⪯̸\",\n    nrArr: \"⇏\",\n    nrarr: \"↛\",\n    nrarrc: \"⤳̸\",\n    nrarrw: \"↝̸\",\n    nrightarrow: \"↛\",\n    nrtri: \"⋫\",\n    nrtrie: \"⋭\",\n    nsc: \"⊁\",\n    nsccue: \"⋡\",\n    nsce: \"⪰̸\",\n    nscr: \"\\uD835\\uDCC3\",\n    nshortmid: \"∤\",\n    nshortparallel: \"∦\",\n    nsim: \"≁\",\n    nsime: \"≄\",\n    nsimeq: \"≄\",\n    nsmid: \"∤\",\n    nspar: \"∦\",\n    nsqsube: \"⋢\",\n    nsqsupe: \"⋣\",\n    nsub: \"⊄\",\n    nsubE: \"⫅̸\",\n    nsube: \"⊈\",\n    nsubset: \"⊂⃒\",\n    nsubseteq: \"⊈\",\n    nsubseteqq: \"⫅̸\",\n    nsucc: \"⊁\",\n    nsucceq: \"⪰̸\",\n    nsup: \"⊅\",\n    nsupE: \"⫆̸\",\n    nsupe: \"⊉\",\n    nsupset: \"⊃⃒\",\n    nsupseteq: \"⊉\",\n    nsupseteqq: \"⫆̸\",\n    ntgl: \"≹\",\n    ntilde: \"\\xf1\",\n    ntlg: \"≸\",\n    ntriangleleft: \"⋪\",\n    ntrianglelefteq: \"⋬\",\n    ntriangleright: \"⋫\",\n    ntrianglerighteq: \"⋭\",\n    nu: \"ν\",\n    num: \"#\",\n    numero: \"№\",\n    numsp: \" \",\n    nvDash: \"⊭\",\n    nvHarr: \"⤄\",\n    nvap: \"≍⃒\",\n    nvdash: \"⊬\",\n    nvge: \"≥⃒\",\n    nvgt: \">⃒\",\n    nvinfin: \"⧞\",\n    nvlArr: \"⤂\",\n    nvle: \"≤⃒\",\n    nvlt: \"<⃒\",\n    nvltrie: \"⊴⃒\",\n    nvrArr: \"⤃\",\n    nvrtrie: \"⊵⃒\",\n    nvsim: \"∼⃒\",\n    nwArr: \"⇖\",\n    nwarhk: \"⤣\",\n    nwarr: \"↖\",\n    nwarrow: \"↖\",\n    nwnear: \"⤧\",\n    oS: \"Ⓢ\",\n    oacute: \"\\xf3\",\n    oast: \"⊛\",\n    ocir: \"⊚\",\n    ocirc: \"\\xf4\",\n    ocy: \"о\",\n    odash: \"⊝\",\n    odblac: \"ő\",\n    odiv: \"⨸\",\n    odot: \"⊙\",\n    odsold: \"⦼\",\n    oelig: \"œ\",\n    ofcir: \"⦿\",\n    ofr: \"\\uD835\\uDD2C\",\n    ogon: \"˛\",\n    ograve: \"\\xf2\",\n    ogt: \"⧁\",\n    ohbar: \"⦵\",\n    ohm: \"Ω\",\n    oint: \"∮\",\n    olarr: \"↺\",\n    olcir: \"⦾\",\n    olcross: \"⦻\",\n    oline: \"‾\",\n    olt: \"⧀\",\n    omacr: \"ō\",\n    omega: \"ω\",\n    omicron: \"ο\",\n    omid: \"⦶\",\n    ominus: \"⊖\",\n    oopf: \"\\uD835\\uDD60\",\n    opar: \"⦷\",\n    operp: \"⦹\",\n    oplus: \"⊕\",\n    or: \"∨\",\n    orarr: \"↻\",\n    ord: \"⩝\",\n    order: \"ℴ\",\n    orderof: \"ℴ\",\n    ordf: \"\\xaa\",\n    ordm: \"\\xba\",\n    origof: \"⊶\",\n    oror: \"⩖\",\n    orslope: \"⩗\",\n    orv: \"⩛\",\n    oscr: \"ℴ\",\n    oslash: \"\\xf8\",\n    osol: \"⊘\",\n    otilde: \"\\xf5\",\n    otimes: \"⊗\",\n    otimesas: \"⨶\",\n    ouml: \"\\xf6\",\n    ovbar: \"⌽\",\n    par: \"∥\",\n    para: \"\\xb6\",\n    parallel: \"∥\",\n    parsim: \"⫳\",\n    parsl: \"⫽\",\n    part: \"∂\",\n    pcy: \"п\",\n    percnt: \"%\",\n    period: \".\",\n    permil: \"‰\",\n    perp: \"⊥\",\n    pertenk: \"‱\",\n    pfr: \"\\uD835\\uDD2D\",\n    phi: \"φ\",\n    phiv: \"ϕ\",\n    phmmat: \"ℳ\",\n    phone: \"☎\",\n    pi: \"π\",\n    pitchfork: \"⋔\",\n    piv: \"ϖ\",\n    planck: \"ℏ\",\n    planckh: \"ℎ\",\n    plankv: \"ℏ\",\n    plus: \"+\",\n    plusacir: \"⨣\",\n    plusb: \"⊞\",\n    pluscir: \"⨢\",\n    plusdo: \"∔\",\n    plusdu: \"⨥\",\n    pluse: \"⩲\",\n    plusmn: \"\\xb1\",\n    plussim: \"⨦\",\n    plustwo: \"⨧\",\n    pm: \"\\xb1\",\n    pointint: \"⨕\",\n    popf: \"\\uD835\\uDD61\",\n    pound: \"\\xa3\",\n    pr: \"≺\",\n    prE: \"⪳\",\n    prap: \"⪷\",\n    prcue: \"≼\",\n    pre: \"⪯\",\n    prec: \"≺\",\n    precapprox: \"⪷\",\n    preccurlyeq: \"≼\",\n    preceq: \"⪯\",\n    precnapprox: \"⪹\",\n    precneqq: \"⪵\",\n    precnsim: \"⋨\",\n    precsim: \"≾\",\n    prime: \"′\",\n    primes: \"ℙ\",\n    prnE: \"⪵\",\n    prnap: \"⪹\",\n    prnsim: \"⋨\",\n    prod: \"∏\",\n    profalar: \"⌮\",\n    profline: \"⌒\",\n    profsurf: \"⌓\",\n    prop: \"∝\",\n    propto: \"∝\",\n    prsim: \"≾\",\n    prurel: \"⊰\",\n    pscr: \"\\uD835\\uDCC5\",\n    psi: \"ψ\",\n    puncsp: \" \",\n    qfr: \"\\uD835\\uDD2E\",\n    qint: \"⨌\",\n    qopf: \"\\uD835\\uDD62\",\n    qprime: \"⁗\",\n    qscr: \"\\uD835\\uDCC6\",\n    quaternions: \"ℍ\",\n    quatint: \"⨖\",\n    quest: \"?\",\n    questeq: \"≟\",\n    quot: '\"',\n    rAarr: \"⇛\",\n    rArr: \"⇒\",\n    rAtail: \"⤜\",\n    rBarr: \"⤏\",\n    rHar: \"⥤\",\n    race: \"∽̱\",\n    racute: \"ŕ\",\n    radic: \"√\",\n    raemptyv: \"⦳\",\n    rang: \"⟩\",\n    rangd: \"⦒\",\n    range: \"⦥\",\n    rangle: \"⟩\",\n    raquo: \"\\xbb\",\n    rarr: \"→\",\n    rarrap: \"⥵\",\n    rarrb: \"⇥\",\n    rarrbfs: \"⤠\",\n    rarrc: \"⤳\",\n    rarrfs: \"⤞\",\n    rarrhk: \"↪\",\n    rarrlp: \"↬\",\n    rarrpl: \"⥅\",\n    rarrsim: \"⥴\",\n    rarrtl: \"↣\",\n    rarrw: \"↝\",\n    ratail: \"⤚\",\n    ratio: \"∶\",\n    rationals: \"ℚ\",\n    rbarr: \"⤍\",\n    rbbrk: \"❳\",\n    rbrace: \"}\",\n    rbrack: \"]\",\n    rbrke: \"⦌\",\n    rbrksld: \"⦎\",\n    rbrkslu: \"⦐\",\n    rcaron: \"ř\",\n    rcedil: \"ŗ\",\n    rceil: \"⌉\",\n    rcub: \"}\",\n    rcy: \"р\",\n    rdca: \"⤷\",\n    rdldhar: \"⥩\",\n    rdquo: \"”\",\n    rdquor: \"”\",\n    rdsh: \"↳\",\n    real: \"ℜ\",\n    realine: \"ℛ\",\n    realpart: \"ℜ\",\n    reals: \"ℝ\",\n    rect: \"▭\",\n    reg: \"\\xae\",\n    rfisht: \"⥽\",\n    rfloor: \"⌋\",\n    rfr: \"\\uD835\\uDD2F\",\n    rhard: \"⇁\",\n    rharu: \"⇀\",\n    rharul: \"⥬\",\n    rho: \"ρ\",\n    rhov: \"ϱ\",\n    rightarrow: \"→\",\n    rightarrowtail: \"↣\",\n    rightharpoondown: \"⇁\",\n    rightharpoonup: \"⇀\",\n    rightleftarrows: \"⇄\",\n    rightleftharpoons: \"⇌\",\n    rightrightarrows: \"⇉\",\n    rightsquigarrow: \"↝\",\n    rightthreetimes: \"⋌\",\n    ring: \"˚\",\n    risingdotseq: \"≓\",\n    rlarr: \"⇄\",\n    rlhar: \"⇌\",\n    rlm: \"‏\",\n    rmoust: \"⎱\",\n    rmoustache: \"⎱\",\n    rnmid: \"⫮\",\n    roang: \"⟭\",\n    roarr: \"⇾\",\n    robrk: \"⟧\",\n    ropar: \"⦆\",\n    ropf: \"\\uD835\\uDD63\",\n    roplus: \"⨮\",\n    rotimes: \"⨵\",\n    rpar: \")\",\n    rpargt: \"⦔\",\n    rppolint: \"⨒\",\n    rrarr: \"⇉\",\n    rsaquo: \"›\",\n    rscr: \"\\uD835\\uDCC7\",\n    rsh: \"↱\",\n    rsqb: \"]\",\n    rsquo: \"’\",\n    rsquor: \"’\",\n    rthree: \"⋌\",\n    rtimes: \"⋊\",\n    rtri: \"▹\",\n    rtrie: \"⊵\",\n    rtrif: \"▸\",\n    rtriltri: \"⧎\",\n    ruluhar: \"⥨\",\n    rx: \"℞\",\n    sacute: \"ś\",\n    sbquo: \"‚\",\n    sc: \"≻\",\n    scE: \"⪴\",\n    scap: \"⪸\",\n    scaron: \"š\",\n    sccue: \"≽\",\n    sce: \"⪰\",\n    scedil: \"ş\",\n    scirc: \"ŝ\",\n    scnE: \"⪶\",\n    scnap: \"⪺\",\n    scnsim: \"⋩\",\n    scpolint: \"⨓\",\n    scsim: \"≿\",\n    scy: \"с\",\n    sdot: \"⋅\",\n    sdotb: \"⊡\",\n    sdote: \"⩦\",\n    seArr: \"⇘\",\n    searhk: \"⤥\",\n    searr: \"↘\",\n    searrow: \"↘\",\n    sect: \"\\xa7\",\n    semi: \";\",\n    seswar: \"⤩\",\n    setminus: \"∖\",\n    setmn: \"∖\",\n    sext: \"✶\",\n    sfr: \"\\uD835\\uDD30\",\n    sfrown: \"⌢\",\n    sharp: \"♯\",\n    shchcy: \"щ\",\n    shcy: \"ш\",\n    shortmid: \"∣\",\n    shortparallel: \"∥\",\n    shy: \"\\xad\",\n    sigma: \"σ\",\n    sigmaf: \"ς\",\n    sigmav: \"ς\",\n    sim: \"∼\",\n    simdot: \"⩪\",\n    sime: \"≃\",\n    simeq: \"≃\",\n    simg: \"⪞\",\n    simgE: \"⪠\",\n    siml: \"⪝\",\n    simlE: \"⪟\",\n    simne: \"≆\",\n    simplus: \"⨤\",\n    simrarr: \"⥲\",\n    slarr: \"←\",\n    smallsetminus: \"∖\",\n    smashp: \"⨳\",\n    smeparsl: \"⧤\",\n    smid: \"∣\",\n    smile: \"⌣\",\n    smt: \"⪪\",\n    smte: \"⪬\",\n    smtes: \"⪬︀\",\n    softcy: \"ь\",\n    sol: \"/\",\n    solb: \"⧄\",\n    solbar: \"⌿\",\n    sopf: \"\\uD835\\uDD64\",\n    spades: \"♠\",\n    spadesuit: \"♠\",\n    spar: \"∥\",\n    sqcap: \"⊓\",\n    sqcaps: \"⊓︀\",\n    sqcup: \"⊔\",\n    sqcups: \"⊔︀\",\n    sqsub: \"⊏\",\n    sqsube: \"⊑\",\n    sqsubset: \"⊏\",\n    sqsubseteq: \"⊑\",\n    sqsup: \"⊐\",\n    sqsupe: \"⊒\",\n    sqsupset: \"⊐\",\n    sqsupseteq: \"⊒\",\n    squ: \"□\",\n    square: \"□\",\n    squarf: \"▪\",\n    squf: \"▪\",\n    srarr: \"→\",\n    sscr: \"\\uD835\\uDCC8\",\n    ssetmn: \"∖\",\n    ssmile: \"⌣\",\n    sstarf: \"⋆\",\n    star: \"☆\",\n    starf: \"★\",\n    straightepsilon: \"ϵ\",\n    straightphi: \"ϕ\",\n    strns: \"\\xaf\",\n    sub: \"⊂\",\n    subE: \"⫅\",\n    subdot: \"⪽\",\n    sube: \"⊆\",\n    subedot: \"⫃\",\n    submult: \"⫁\",\n    subnE: \"⫋\",\n    subne: \"⊊\",\n    subplus: \"⪿\",\n    subrarr: \"⥹\",\n    subset: \"⊂\",\n    subseteq: \"⊆\",\n    subseteqq: \"⫅\",\n    subsetneq: \"⊊\",\n    subsetneqq: \"⫋\",\n    subsim: \"⫇\",\n    subsub: \"⫕\",\n    subsup: \"⫓\",\n    succ: \"≻\",\n    succapprox: \"⪸\",\n    succcurlyeq: \"≽\",\n    succeq: \"⪰\",\n    succnapprox: \"⪺\",\n    succneqq: \"⪶\",\n    succnsim: \"⋩\",\n    succsim: \"≿\",\n    sum: \"∑\",\n    sung: \"♪\",\n    sup1: \"\\xb9\",\n    sup2: \"\\xb2\",\n    sup3: \"\\xb3\",\n    sup: \"⊃\",\n    supE: \"⫆\",\n    supdot: \"⪾\",\n    supdsub: \"⫘\",\n    supe: \"⊇\",\n    supedot: \"⫄\",\n    suphsol: \"⟉\",\n    suphsub: \"⫗\",\n    suplarr: \"⥻\",\n    supmult: \"⫂\",\n    supnE: \"⫌\",\n    supne: \"⊋\",\n    supplus: \"⫀\",\n    supset: \"⊃\",\n    supseteq: \"⊇\",\n    supseteqq: \"⫆\",\n    supsetneq: \"⊋\",\n    supsetneqq: \"⫌\",\n    supsim: \"⫈\",\n    supsub: \"⫔\",\n    supsup: \"⫖\",\n    swArr: \"⇙\",\n    swarhk: \"⤦\",\n    swarr: \"↙\",\n    swarrow: \"↙\",\n    swnwar: \"⤪\",\n    szlig: \"\\xdf\",\n    target: \"⌖\",\n    tau: \"τ\",\n    tbrk: \"⎴\",\n    tcaron: \"ť\",\n    tcedil: \"ţ\",\n    tcy: \"т\",\n    tdot: \"⃛\",\n    telrec: \"⌕\",\n    tfr: \"\\uD835\\uDD31\",\n    there4: \"∴\",\n    therefore: \"∴\",\n    theta: \"θ\",\n    thetasym: \"ϑ\",\n    thetav: \"ϑ\",\n    thickapprox: \"≈\",\n    thicksim: \"∼\",\n    thinsp: \" \",\n    thkap: \"≈\",\n    thksim: \"∼\",\n    thorn: \"\\xfe\",\n    tilde: \"˜\",\n    times: \"\\xd7\",\n    timesb: \"⊠\",\n    timesbar: \"⨱\",\n    timesd: \"⨰\",\n    tint: \"∭\",\n    toea: \"⤨\",\n    top: \"⊤\",\n    topbot: \"⌶\",\n    topcir: \"⫱\",\n    topf: \"\\uD835\\uDD65\",\n    topfork: \"⫚\",\n    tosa: \"⤩\",\n    tprime: \"‴\",\n    trade: \"™\",\n    triangle: \"▵\",\n    triangledown: \"▿\",\n    triangleleft: \"◃\",\n    trianglelefteq: \"⊴\",\n    triangleq: \"≜\",\n    triangleright: \"▹\",\n    trianglerighteq: \"⊵\",\n    tridot: \"◬\",\n    trie: \"≜\",\n    triminus: \"⨺\",\n    triplus: \"⨹\",\n    trisb: \"⧍\",\n    tritime: \"⨻\",\n    trpezium: \"⏢\",\n    tscr: \"\\uD835\\uDCC9\",\n    tscy: \"ц\",\n    tshcy: \"ћ\",\n    tstrok: \"ŧ\",\n    twixt: \"≬\",\n    twoheadleftarrow: \"↞\",\n    twoheadrightarrow: \"↠\",\n    uArr: \"⇑\",\n    uHar: \"⥣\",\n    uacute: \"\\xfa\",\n    uarr: \"↑\",\n    ubrcy: \"ў\",\n    ubreve: \"ŭ\",\n    ucirc: \"\\xfb\",\n    ucy: \"у\",\n    udarr: \"⇅\",\n    udblac: \"ű\",\n    udhar: \"⥮\",\n    ufisht: \"⥾\",\n    ufr: \"\\uD835\\uDD32\",\n    ugrave: \"\\xf9\",\n    uharl: \"↿\",\n    uharr: \"↾\",\n    uhblk: \"▀\",\n    ulcorn: \"⌜\",\n    ulcorner: \"⌜\",\n    ulcrop: \"⌏\",\n    ultri: \"◸\",\n    umacr: \"ū\",\n    uml: \"\\xa8\",\n    uogon: \"ų\",\n    uopf: \"\\uD835\\uDD66\",\n    uparrow: \"↑\",\n    updownarrow: \"↕\",\n    upharpoonleft: \"↿\",\n    upharpoonright: \"↾\",\n    uplus: \"⊎\",\n    upsi: \"υ\",\n    upsih: \"ϒ\",\n    upsilon: \"υ\",\n    upuparrows: \"⇈\",\n    urcorn: \"⌝\",\n    urcorner: \"⌝\",\n    urcrop: \"⌎\",\n    uring: \"ů\",\n    urtri: \"◹\",\n    uscr: \"\\uD835\\uDCCA\",\n    utdot: \"⋰\",\n    utilde: \"ũ\",\n    utri: \"▵\",\n    utrif: \"▴\",\n    uuarr: \"⇈\",\n    uuml: \"\\xfc\",\n    uwangle: \"⦧\",\n    vArr: \"⇕\",\n    vBar: \"⫨\",\n    vBarv: \"⫩\",\n    vDash: \"⊨\",\n    vangrt: \"⦜\",\n    varepsilon: \"ϵ\",\n    varkappa: \"ϰ\",\n    varnothing: \"∅\",\n    varphi: \"ϕ\",\n    varpi: \"ϖ\",\n    varpropto: \"∝\",\n    varr: \"↕\",\n    varrho: \"ϱ\",\n    varsigma: \"ς\",\n    varsubsetneq: \"⊊︀\",\n    varsubsetneqq: \"⫋︀\",\n    varsupsetneq: \"⊋︀\",\n    varsupsetneqq: \"⫌︀\",\n    vartheta: \"ϑ\",\n    vartriangleleft: \"⊲\",\n    vartriangleright: \"⊳\",\n    vcy: \"в\",\n    vdash: \"⊢\",\n    vee: \"∨\",\n    veebar: \"⊻\",\n    veeeq: \"≚\",\n    vellip: \"⋮\",\n    verbar: \"|\",\n    vert: \"|\",\n    vfr: \"\\uD835\\uDD33\",\n    vltri: \"⊲\",\n    vnsub: \"⊂⃒\",\n    vnsup: \"⊃⃒\",\n    vopf: \"\\uD835\\uDD67\",\n    vprop: \"∝\",\n    vrtri: \"⊳\",\n    vscr: \"\\uD835\\uDCCB\",\n    vsubnE: \"⫋︀\",\n    vsubne: \"⊊︀\",\n    vsupnE: \"⫌︀\",\n    vsupne: \"⊋︀\",\n    vzigzag: \"⦚\",\n    wcirc: \"ŵ\",\n    wedbar: \"⩟\",\n    wedge: \"∧\",\n    wedgeq: \"≙\",\n    weierp: \"℘\",\n    wfr: \"\\uD835\\uDD34\",\n    wopf: \"\\uD835\\uDD68\",\n    wp: \"℘\",\n    wr: \"≀\",\n    wreath: \"≀\",\n    wscr: \"\\uD835\\uDCCC\",\n    xcap: \"⋂\",\n    xcirc: \"◯\",\n    xcup: \"⋃\",\n    xdtri: \"▽\",\n    xfr: \"\\uD835\\uDD35\",\n    xhArr: \"⟺\",\n    xharr: \"⟷\",\n    xi: \"ξ\",\n    xlArr: \"⟸\",\n    xlarr: \"⟵\",\n    xmap: \"⟼\",\n    xnis: \"⋻\",\n    xodot: \"⨀\",\n    xopf: \"\\uD835\\uDD69\",\n    xoplus: \"⨁\",\n    xotime: \"⨂\",\n    xrArr: \"⟹\",\n    xrarr: \"⟶\",\n    xscr: \"\\uD835\\uDCCD\",\n    xsqcup: \"⨆\",\n    xuplus: \"⨄\",\n    xutri: \"△\",\n    xvee: \"⋁\",\n    xwedge: \"⋀\",\n    yacute: \"\\xfd\",\n    yacy: \"я\",\n    ycirc: \"ŷ\",\n    ycy: \"ы\",\n    yen: \"\\xa5\",\n    yfr: \"\\uD835\\uDD36\",\n    yicy: \"ї\",\n    yopf: \"\\uD835\\uDD6A\",\n    yscr: \"\\uD835\\uDCCE\",\n    yucy: \"ю\",\n    yuml: \"\\xff\",\n    zacute: \"ź\",\n    zcaron: \"ž\",\n    zcy: \"з\",\n    zdot: \"ż\",\n    zeetrf: \"ℨ\",\n    zeta: \"ζ\",\n    zfr: \"\\uD835\\uDD37\",\n    zhcy: \"ж\",\n    zigrarr: \"⇝\",\n    zopf: \"\\uD835\\uDD6B\",\n    zscr: \"\\uD835\\uDCCF\",\n    zwj: \"‍\",\n    zwnj: \"‌\"\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"76L0b\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"codeFenced\", ()=>codeFenced);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n/** @type {Construct} */ const nonLazyContinuation = {\n    tokenize: tokenizeNonLazyContinuation,\n    partial: true\n};\nconst codeFenced = {\n    name: \"codeFenced\",\n    tokenize: tokenizeCodeFenced,\n    concrete: true\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeCodeFenced(effects, ok, nok) {\n    const self = this;\n    /** @type {Construct} */ const closeStart = {\n        tokenize: tokenizeCloseStart,\n        partial: true\n    };\n    let initialPrefix = 0;\n    let sizeOpen = 0;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse whitespace like `markdown-rs`.\n        return beforeSequenceOpen(code);\n    }\n    /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function beforeSequenceOpen(code) {\n        const tail = self.events[self.events.length - 1];\n        initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n        marker = code;\n        effects.enter(\"codeFenced\");\n        effects.enter(\"codeFencedFence\");\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === marker) {\n            sizeOpen++;\n            effects.consume(code);\n            return sequenceOpen;\n        }\n        if (sizeOpen < 3) return nok(code);\n        effects.exit(\"codeFencedFenceSequence\");\n        return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n    }\n    /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function infoBefore(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"codeFencedFence\");\n            return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n        }\n        effects.enter(\"codeFencedFenceInfo\");\n        effects.enter(\"chunkString\", {\n            contentType: \"string\"\n        });\n        return info(code);\n    }\n    /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function info(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"chunkString\");\n            effects.exit(\"codeFencedFenceInfo\");\n            return infoBefore(code);\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.exit(\"chunkString\");\n            effects.exit(\"codeFencedFenceInfo\");\n            return (0, _micromarkFactorySpace.factorySpace)(effects, metaBefore, \"whitespace\")(code);\n        }\n        if (code === 96 && code === marker) return nok(code);\n        effects.consume(code);\n        return info;\n    }\n    /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function metaBefore(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) return infoBefore(code);\n        effects.enter(\"codeFencedFenceMeta\");\n        effects.enter(\"chunkString\", {\n            contentType: \"string\"\n        });\n        return meta(code);\n    }\n    /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function meta(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"chunkString\");\n            effects.exit(\"codeFencedFenceMeta\");\n            return infoBefore(code);\n        }\n        if (code === 96 && code === marker) return nok(code);\n        effects.consume(code);\n        return meta;\n    }\n    /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function atNonLazyBreak(code) {\n        return effects.attempt(closeStart, after, contentBefore)(code);\n    }\n    /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentBefore(code) {\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return contentStart;\n    }\n    /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentStart(code) {\n        return initialPrefix > 0 && (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n    }\n    /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function beforeContentChunk(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n        effects.enter(\"codeFlowValue\");\n        return contentChunk(code);\n    }\n    /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */ function contentChunk(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"codeFlowValue\");\n            return beforeContentChunk(code);\n        }\n        effects.consume(code);\n        return contentChunk;\n    }\n    /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        effects.exit(\"codeFenced\");\n        return ok(code);\n    }\n    /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */ function tokenizeCloseStart(effects, ok, nok) {\n        let size = 0;\n        return startBefore;\n        /**\n     *\n     *\n     * @type {State}\n     */ function startBefore(code) {\n            effects.enter(\"lineEnding\");\n            effects.consume(code);\n            effects.exit(\"lineEnding\");\n            return start;\n        }\n        /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function start(code) {\n            // Always populated by defaults.\n            // To do: `enter` here or in next state?\n            effects.enter(\"codeFencedFence\");\n            return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : 4)(code) : beforeSequenceClose(code);\n        }\n        /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function beforeSequenceClose(code) {\n            if (code === marker) {\n                effects.enter(\"codeFencedFenceSequence\");\n                return sequenceClose(code);\n            }\n            return nok(code);\n        }\n        /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function sequenceClose(code) {\n            if (code === marker) {\n                size++;\n                effects.consume(code);\n                return sequenceClose;\n            }\n            if (size >= sizeOpen) {\n                effects.exit(\"codeFencedFenceSequence\");\n                return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n            }\n            return nok(code);\n        }\n        /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */ function sequenceCloseAfter(code) {\n            if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n                effects.exit(\"codeFencedFence\");\n                return ok(code);\n            }\n            return nok(code);\n        }\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeNonLazyContinuation(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   *\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === null) return nok(code);\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return lineStart;\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function lineStart(code) {\n        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"ddGIR\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"codeIndented\", ()=>codeIndented);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst codeIndented = {\n    name: \"codeIndented\",\n    tokenize: tokenizeCodeIndented\n};\n/** @type {Construct} */ const furtherStart = {\n    tokenize: tokenizeFurtherStart,\n    partial: true\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeCodeIndented(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: manually check if interrupting like `markdown-rs`.\n        effects.enter(\"codeIndented\");\n        // To do: use an improved `space_or_tab` function like `markdown-rs`,\n        // so that we can drop the next state.\n        return (0, _micromarkFactorySpace.factorySpace)(effects, afterPrefix, \"linePrefix\", 5)(code);\n    }\n    /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n    }\n    /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === null) return after(code);\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) return effects.attempt(furtherStart, atBreak, after)(code);\n        effects.enter(\"codeFlowValue\");\n        return inside(code);\n    }\n    /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"codeFlowValue\");\n            return atBreak(code);\n        }\n        effects.consume(code);\n        return inside;\n    }\n    /** @type {State} */ function after(code) {\n        effects.exit(\"codeIndented\");\n        // To do: allow interrupting like `markdown-rs`.\n        // Feel free to interrupt.\n        // tokenizer.interrupt = false\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeFurtherStart(effects, ok, nok) {\n    const self = this;\n    return furtherStart;\n    /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */ function furtherStart(code) {\n        // To do: improve `lazy` / `pierce` handling.\n        // If this is a lazy line, it can’t be code.\n        if (self.parser.lazy[self.now().line]) return nok(code);\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.enter(\"lineEnding\");\n            effects.consume(code);\n            effects.exit(\"lineEnding\");\n            return furtherStart;\n        }\n        // To do: the code here in `micromark-js` is a bit different from\n        // `markdown-rs` because there it can attempt spaces.\n        // We can’t yet.\n        //\n        // To do: use an improved `space_or_tab` function like `markdown-rs`,\n        // so that we can drop the next state.\n        return (0, _micromarkFactorySpace.factorySpace)(effects, afterPrefix, \"linePrefix\", 5)(code);\n    }\n    /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? furtherStart(code) : nok(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"ewpZK\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"codeText\", ()=>codeText);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst codeText = {\n    name: \"codeText\",\n    tokenize: tokenizeCodeText,\n    resolve: resolveCodeText,\n    previous\n};\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */ function resolveCodeText(events) {\n    let tailExitIndex = events.length - 4;\n    let headEnterIndex = 3;\n    /** @type {number} */ let index;\n    /** @type {number | undefined} */ let enter;\n    // If we start and end with an EOL or a space.\n    if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === \"space\") && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === \"space\")) {\n        index = headEnterIndex;\n        // And we have data.\n        while(++index < tailExitIndex)if (events[index][1].type === \"codeTextData\") {\n            // Then we have padding.\n            events[headEnterIndex][1].type = \"codeTextPadding\";\n            events[tailExitIndex][1].type = \"codeTextPadding\";\n            headEnterIndex += 2;\n            tailExitIndex -= 2;\n            break;\n        }\n    }\n    // Merge adjacent spaces and data.\n    index = headEnterIndex - 1;\n    tailExitIndex++;\n    while(++index <= tailExitIndex){\n        if (enter === undefined) {\n            if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") enter = index;\n        } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n            events[enter][1].type = \"codeTextData\";\n            if (index !== enter + 2) {\n                events[enter][1].end = events[index - 1][1].end;\n                events.splice(enter + 2, index - enter - 2);\n                tailExitIndex -= index - enter - 2;\n                index = enter + 2;\n            }\n            enter = undefined;\n        }\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */ function previous(code) {\n    // If there is a previous code, there will always be a tail.\n    return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeCodeText(effects, ok, nok) {\n    const self = this;\n    let sizeOpen = 0;\n    /** @type {number} */ let size;\n    /** @type {Token} */ let token;\n    return start;\n    /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"codeText\");\n        effects.enter(\"codeTextSequence\");\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === 96) {\n            effects.consume(code);\n            sizeOpen++;\n            return sequenceOpen;\n        }\n        effects.exit(\"codeTextSequence\");\n        return between(code);\n    }\n    /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */ function between(code) {\n        // EOF.\n        if (code === null) return nok(code);\n        // To do: next major: don’t do spaces in resolve, but when compiling,\n        // like `markdown-rs`.\n        // Tabs don’t work, and virtual spaces don’t make sense.\n        if (code === 32) {\n            effects.enter(\"space\");\n            effects.consume(code);\n            effects.exit(\"space\");\n            return between;\n        }\n        // Closing fence? Could also be data.\n        if (code === 96) {\n            token = effects.enter(\"codeTextSequence\");\n            size = 0;\n            return sequenceClose(code);\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.enter(\"lineEnding\");\n            effects.consume(code);\n            effects.exit(\"lineEnding\");\n            return between;\n        }\n        // Data.\n        effects.enter(\"codeTextData\");\n        return data(code);\n    }\n    /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function data(code) {\n        if (code === null || code === 32 || code === 96 || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"codeTextData\");\n            return between(code);\n        }\n        effects.consume(code);\n        return data;\n    }\n    /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceClose(code) {\n        // More.\n        if (code === 96) {\n            effects.consume(code);\n            size++;\n            return sequenceClose;\n        }\n        // Done!\n        if (size === sizeOpen) {\n            effects.exit(\"codeTextSequence\");\n            effects.exit(\"codeText\");\n            return ok(code);\n        }\n        // More or less accents: mark as data.\n        token.type = \"codeTextData\";\n        return data(code);\n    }\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"kA8bg\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"content\", ()=>content);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nvar _micromarkUtilSubtokenize = require(\"micromark-util-subtokenize\");\nconst content = {\n    tokenize: tokenizeContent,\n    resolve: resolveContent\n};\n/** @type {Construct} */ const continuationConstruct = {\n    tokenize: tokenizeContinuation,\n    partial: true\n};\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */ function resolveContent(events) {\n    (0, _micromarkUtilSubtokenize.subtokenize)(events);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeContent(effects, ok) {\n    /** @type {Token | undefined} */ let previous;\n    return chunkStart;\n    /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function chunkStart(code) {\n        effects.enter(\"content\");\n        previous = effects.enter(\"chunkContent\", {\n            contentType: \"content\"\n        });\n        return chunkInside(code);\n    }\n    /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */ function chunkInside(code) {\n        if (code === null) return contentEnd(code);\n        // To do: in `markdown-rs`, each line is parsed on its own, and everything\n        // is stitched together resolving.\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n        // Data.\n        effects.consume(code);\n        return chunkInside;\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function contentEnd(code) {\n        effects.exit(\"chunkContent\");\n        effects.exit(\"content\");\n        return ok(code);\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function contentContinue(code) {\n        effects.consume(code);\n        effects.exit(\"chunkContent\");\n        previous.next = effects.enter(\"chunkContent\", {\n            contentType: \"content\",\n            previous\n        });\n        previous = previous.next;\n        return chunkInside;\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeContinuation(effects, ok, nok) {\n    const self = this;\n    return startLookahead;\n    /**\n   *\n   *\n   * @type {State}\n   */ function startLookahead(code) {\n        effects.exit(\"chunkContent\");\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return (0, _micromarkFactorySpace.factorySpace)(effects, prefixed, \"linePrefix\");\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function prefixed(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) return nok(code);\n        // Always populated by defaults.\n        const tail = self.events[self.events.length - 1];\n        if (!self.parser.constructs.disable.null.includes(\"codeIndented\") && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) return ok(code);\n        return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"micromark-util-subtokenize\":\"9JtDe\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"9JtDe\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ parcelHelpers.export(exports, \"subtokenize\", ()=>subtokenize);\nvar _micromarkUtilChunked = require(\"micromark-util-chunked\");\nfunction subtokenize(events) {\n    /** @type {Record<string, number>} */ const jumps = {};\n    let index = -1;\n    /** @type {Event} */ let event;\n    /** @type {number | undefined} */ let lineIndex;\n    /** @type {number} */ let otherIndex;\n    /** @type {Event} */ let otherEvent;\n    /** @type {Array<Event>} */ let parameters;\n    /** @type {Array<Event>} */ let subevents;\n    /** @type {boolean | undefined} */ let more;\n    while(++index < events.length){\n        while(index in jumps)index = jumps[index];\n        event = events[index];\n        // Add a hook for the GFM tasklist extension, which needs to know if text\n        // is in the first content of a list item.\n        if (index && event[1].type === \"chunkFlow\" && events[index - 1][1].type === \"listItemPrefix\") {\n            subevents = event[1]._tokenizer.events;\n            otherIndex = 0;\n            if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") otherIndex += 2;\n            if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") while(++otherIndex < subevents.length){\n                if (subevents[otherIndex][1].type === \"content\") break;\n                if (subevents[otherIndex][1].type === \"chunkText\") {\n                    subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n                    otherIndex++;\n                }\n            }\n        }\n        // Enter.\n        if (event[0] === \"enter\") {\n            if (event[1].contentType) {\n                Object.assign(jumps, subcontent(events, index));\n                index = jumps[index];\n                more = true;\n            }\n        } else if (event[1]._container) {\n            otherIndex = index;\n            lineIndex = undefined;\n            while(otherIndex--){\n                otherEvent = events[otherIndex];\n                if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n                    if (otherEvent[0] === \"enter\") {\n                        if (lineIndex) events[lineIndex][1].type = \"lineEndingBlank\";\n                        otherEvent[1].type = \"lineEnding\";\n                        lineIndex = otherIndex;\n                    }\n                } else break;\n            }\n            if (lineIndex) {\n                // Fix position.\n                event[1].end = Object.assign({}, events[lineIndex][1].start);\n                // Switch container exit w/ line endings.\n                parameters = events.slice(lineIndex, index);\n                parameters.unshift(event);\n                (0, _micromarkUtilChunked.splice)(events, lineIndex, index - lineIndex + 1, parameters);\n            }\n        }\n    }\n    return !more;\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */ function subcontent(events, eventIndex) {\n    const token = events[eventIndex][1];\n    const context = events[eventIndex][2];\n    let startPosition = eventIndex - 1;\n    /** @type {Array<number>} */ const startPositions = [];\n    const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n    const childEvents = tokenizer.events;\n    /** @type {Array<[number, number]>} */ const jumps = [];\n    /** @type {Record<string, number>} */ const gaps = {};\n    /** @type {Array<Chunk>} */ let stream;\n    /** @type {Token | undefined} */ let previous;\n    let index = -1;\n    /** @type {Token | undefined} */ let current = token;\n    let adjust = 0;\n    let start = 0;\n    const breaks = [\n        start\n    ];\n    // Loop forward through the linked tokens to pass them in order to the\n    // subtokenizer.\n    while(current){\n        // Find the position of the event for this token.\n        while(events[++startPosition][1] !== current);\n        startPositions.push(startPosition);\n        if (!current._tokenizer) {\n            stream = context.sliceStream(current);\n            if (!current.next) stream.push(null);\n            if (previous) tokenizer.defineSkip(current.start);\n            if (current._isInFirstContentOfListItem) tokenizer._gfmTasklistFirstContentOfListItem = true;\n            tokenizer.write(stream);\n            if (current._isInFirstContentOfListItem) tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n        }\n        // Unravel the next token.\n        previous = current;\n        current = current.next;\n    }\n    // Now, loop back through all events (and linked tokens), to figure out which\n    // parts belong where.\n    current = token;\n    while(++index < childEvents.length)if (// Find a void token that includes a break.\n    childEvents[index][0] === \"exit\" && childEvents[index - 1][0] === \"enter\" && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n        start = index + 1;\n        breaks.push(start);\n        // Help GC.\n        current._tokenizer = undefined;\n        current.previous = undefined;\n        current = current.next;\n    }\n    // Help GC.\n    tokenizer.events = [];\n    // If there’s one more token (which is the cases for lines that end in an\n    // EOF), that’s perfect: the last point we found starts it.\n    // If there isn’t then make sure any remaining content is added to it.\n    if (current) {\n        // Help GC.\n        current._tokenizer = undefined;\n        current.previous = undefined;\n    } else breaks.pop();\n    // Now splice the events from the subtokenizer into the current events,\n    // moving back to front so that splice indices aren’t affected.\n    index = breaks.length;\n    while(index--){\n        const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n        const start = startPositions.pop();\n        jumps.unshift([\n            start,\n            start + slice.length - 1\n        ]);\n        (0, _micromarkUtilChunked.splice)(events, start, 2, slice);\n    }\n    index = -1;\n    while(++index < jumps.length){\n        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n        adjust += jumps[index][1] - jumps[index][0] - 1;\n    }\n    return gaps;\n}\n\n},{\"micromark-util-chunked\":\"aCCQY\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"eTH6C\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"definition\", ()=>definition);\nvar _micromarkFactoryDestination = require(\"micromark-factory-destination\");\nvar _micromarkFactoryLabel = require(\"micromark-factory-label\");\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkFactoryTitle = require(\"micromark-factory-title\");\nvar _micromarkFactoryWhitespace = require(\"micromark-factory-whitespace\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nvar _micromarkUtilNormalizeIdentifier = require(\"micromark-util-normalize-identifier\");\nconst definition = {\n    name: \"definition\",\n    tokenize: tokenizeDefinition\n};\n/** @type {Construct} */ const titleBefore = {\n    tokenize: tokenizeTitleBefore,\n    partial: true\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeDefinition(effects, ok, nok) {\n    const self = this;\n    /** @type {string} */ let identifier;\n    return start;\n    /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // Do not interrupt paragraphs (but do follow definitions).\n        // To do: do `interrupt` the way `markdown-rs` does.\n        // To do: parse whitespace the way `markdown-rs` does.\n        effects.enter(\"definition\");\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        // To do: parse whitespace the way `markdown-rs` does.\n        return (0, _micromarkFactoryLabel.factoryLabel).call(self, effects, labelAfter, // Note: we don’t need to reset the way `markdown-rs` does.\n        nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n    }\n    /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelAfter(code) {\n        identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n        if (code === 58) {\n            effects.enter(\"definitionMarker\");\n            effects.consume(code);\n            effects.exit(\"definitionMarker\");\n            return markerAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function markerAfter(code) {\n        // Note: whitespace is optional.\n        return (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code) ? (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, destinationBefore)(code) : destinationBefore(code);\n    }\n    /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function destinationBefore(code) {\n        return (0, _micromarkFactoryDestination.factoryDestination)(effects, destinationAfter, // Note: we don’t need to reset the way `markdown-rs` does.\n        nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n    }\n    /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function destinationAfter(code) {\n        return effects.attempt(titleBefore, after, after)(code);\n    }\n    /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n    }\n    /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function afterWhitespace(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"definition\");\n            // Note: we don’t care about uniqueness.\n            // It’s likely that that doesn’t happen very frequently.\n            // It is more likely that it wastes precious time.\n            self.parser.defined.push(identifier);\n            // To do: `markdown-rs` interrupt.\n            // // You’d be interrupting.\n            // tokenizer.interrupt = true\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeTitleBefore(effects, ok, nok) {\n    return titleBefore;\n    /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function titleBefore(code) {\n        return (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code) ? (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, beforeMarker)(code) : nok(code);\n    }\n    /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function beforeMarker(code) {\n        return (0, _micromarkFactoryTitle.factoryTitle)(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n    }\n    /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function titleAfter(code) {\n        return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n    }\n    /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function titleAfterOptionalWhitespace(code) {\n        return code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? ok(code) : nok(code);\n    }\n}\n\n},{\"micromark-factory-destination\":\"em0iK\",\"micromark-factory-label\":\"fmuaJ\",\"micromark-factory-space\":\"iStdw\",\"micromark-factory-title\":\"eXxqM\",\"micromark-factory-whitespace\":\"11gip\",\"micromark-util-character\":\"cUjFI\",\"micromark-util-normalize-identifier\":\"e2XYl\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"em0iK\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nparcelHelpers.export(exports, \"factoryDestination\", ()=>factoryDestination);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nfunction factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n    const limit = max || Number.POSITIVE_INFINITY;\n    let balance = 0;\n    return start;\n    /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === 60) {\n            effects.enter(type);\n            effects.enter(literalType);\n            effects.enter(literalMarkerType);\n            effects.consume(code);\n            effects.exit(literalMarkerType);\n            return enclosedBefore;\n        }\n        // ASCII control, space, closing paren.\n        if (code === null || code === 32 || code === 41 || (0, _micromarkUtilCharacter.asciiControl)(code)) return nok(code);\n        effects.enter(type);\n        effects.enter(rawType);\n        effects.enter(stringType);\n        effects.enter(\"chunkString\", {\n            contentType: \"string\"\n        });\n        return raw(code);\n    }\n    /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function enclosedBefore(code) {\n        if (code === 62) {\n            effects.enter(literalMarkerType);\n            effects.consume(code);\n            effects.exit(literalMarkerType);\n            effects.exit(literalType);\n            effects.exit(type);\n            return ok;\n        }\n        effects.enter(stringType);\n        effects.enter(\"chunkString\", {\n            contentType: \"string\"\n        });\n        return enclosed(code);\n    }\n    /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function enclosed(code) {\n        if (code === 62) {\n            effects.exit(\"chunkString\");\n            effects.exit(stringType);\n            return enclosedBefore(code);\n        }\n        if (code === null || code === 60 || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) return nok(code);\n        effects.consume(code);\n        return code === 92 ? enclosedEscape : enclosed;\n    }\n    /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function enclosedEscape(code) {\n        if (code === 60 || code === 62 || code === 92) {\n            effects.consume(code);\n            return enclosed;\n        }\n        return enclosed(code);\n    }\n    /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function raw(code) {\n        if (!balance && (code === null || code === 41 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code))) {\n            effects.exit(\"chunkString\");\n            effects.exit(stringType);\n            effects.exit(rawType);\n            effects.exit(type);\n            return ok(code);\n        }\n        if (balance < limit && code === 40) {\n            effects.consume(code);\n            balance++;\n            return raw;\n        }\n        if (code === 41) {\n            effects.consume(code);\n            balance--;\n            return raw;\n        }\n        // ASCII control (but *not* `\\0`) and space and `(`.\n        // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n        // doesn’t.\n        if (code === null || code === 32 || code === 40 || (0, _micromarkUtilCharacter.asciiControl)(code)) return nok(code);\n        effects.consume(code);\n        return code === 92 ? rawEscape : raw;\n    }\n    /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function rawEscape(code) {\n        if (code === 40 || code === 41 || code === 92) {\n            effects.consume(code);\n            return raw;\n        }\n        return raw(code);\n    }\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"fmuaJ\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nparcelHelpers.export(exports, \"factoryLabel\", ()=>factoryLabel);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nfunction factoryLabel(effects, ok, nok, type, markerType, stringType) {\n    const self = this;\n    let size = 0;\n    /** @type {boolean} */ let seen;\n    return start;\n    /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(type);\n        effects.enter(markerType);\n        effects.consume(code);\n        effects.exit(markerType);\n        effects.enter(stringType);\n        return atBreak;\n    }\n    /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (size > 999 || code === null || code === 91 || code === 93 && !seen || // To do: remove in the future once we’ve switched from\n        // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n        // which doesn’t need this.\n        // Hidden footnotes hook.\n        /* c8 ignore next 3 */ code === 94 && !size && \"_hiddenFootnoteSupport\" in self.parser.constructs) return nok(code);\n        if (code === 93) {\n            effects.exit(stringType);\n            effects.enter(markerType);\n            effects.consume(code);\n            effects.exit(markerType);\n            effects.exit(type);\n            return ok;\n        }\n        // To do: indent? Link chunks and EOLs together?\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.enter(\"lineEnding\");\n            effects.consume(code);\n            effects.exit(\"lineEnding\");\n            return atBreak;\n        }\n        effects.enter(\"chunkString\", {\n            contentType: \"string\"\n        });\n        return labelInside(code);\n    }\n    /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function labelInside(code) {\n        if (code === null || code === 91 || code === 93 || (0, _micromarkUtilCharacter.markdownLineEnding)(code) || size++ > 999) {\n            effects.exit(\"chunkString\");\n            return atBreak(code);\n        }\n        effects.consume(code);\n        if (!seen) seen = !(0, _micromarkUtilCharacter.markdownSpace)(code);\n        return code === 92 ? labelEscape : labelInside;\n    }\n    /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEscape(code) {\n        if (code === 91 || code === 92 || code === 93) {\n            effects.consume(code);\n            size++;\n            return labelInside;\n        }\n        return labelInside(code);\n    }\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"eXxqM\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nparcelHelpers.export(exports, \"factoryTitle\", ()=>factoryTitle);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nfunction factoryTitle(effects, ok, nok, type, markerType, stringType) {\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if (code === 34 || code === 39 || code === 40) {\n            effects.enter(type);\n            effects.enter(markerType);\n            effects.consume(code);\n            effects.exit(markerType);\n            marker = code === 40 ? 41 : code;\n            return begin;\n        }\n        return nok(code);\n    }\n    /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function begin(code) {\n        if (code === marker) {\n            effects.enter(markerType);\n            effects.consume(code);\n            effects.exit(markerType);\n            effects.exit(type);\n            return ok;\n        }\n        effects.enter(stringType);\n        return atBreak(code);\n    }\n    /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === marker) {\n            effects.exit(stringType);\n            return begin(marker);\n        }\n        if (code === null) return nok(code);\n        // Note: blank lines can’t exist in content.\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            // To do: use `space_or_tab_eol_with_options`, connect.\n            effects.enter(\"lineEnding\");\n            effects.consume(code);\n            effects.exit(\"lineEnding\");\n            return (0, _micromarkFactorySpace.factorySpace)(effects, atBreak, \"linePrefix\");\n        }\n        effects.enter(\"chunkString\", {\n            contentType: \"string\"\n        });\n        return inside(code);\n    }\n    /**\n   *\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === marker || code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"chunkString\");\n            return atBreak(code);\n        }\n        effects.consume(code);\n        return code === 92 ? escape : inside;\n    }\n    /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function escape(code) {\n        if (code === marker || code === 92) {\n            effects.consume(code);\n            return inside;\n        }\n        return inside(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"11gip\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */ parcelHelpers.export(exports, \"factoryWhitespace\", ()=>factoryWhitespace);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nfunction factoryWhitespace(effects, ok) {\n    /** @type {boolean} */ let seen;\n    return start;\n    /** @type {State} */ function start(code) {\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.enter(\"lineEnding\");\n            effects.consume(code);\n            effects.exit(\"lineEnding\");\n            seen = true;\n            return start;\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) return (0, _micromarkFactorySpace.factorySpace)(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n        return ok(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"e2XYl\":[function(require,module,exports) {\n/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"normalizeIdentifier\", ()=>normalizeIdentifier);\nfunction normalizeIdentifier(value) {\n    return value// Collapse markdown whitespace.\n    .replace(/[\\t\\n\\r ]+/g, \" \")// Trim.\n    .replace(/^ | $/g, \"\")// Some characters are considered “uppercase”, but if their lowercase\n    // counterpart is uppercased will result in a different uppercase\n    // character.\n    // Hence, to get that form, we perform both lower- and uppercase.\n    // Upper case makes sure keys will not interact with default prototypal\n    // methods: no method is uppercase.\n    .toLowerCase().toUpperCase();\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"2b9qH\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"hardBreakEscape\", ()=>hardBreakEscape);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst hardBreakEscape = {\n    name: \"hardBreakEscape\",\n    tokenize: tokenizeHardBreakEscape\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeHardBreakEscape(effects, ok, nok) {\n    return start;\n    /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"hardBreakEscape\");\n        effects.consume(code);\n        return after;\n    }\n    /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */ function after(code) {\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"hardBreakEscape\");\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"8M2Ug\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"headingAtx\", ()=>headingAtx);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nvar _micromarkUtilChunked = require(\"micromark-util-chunked\");\nconst headingAtx = {\n    name: \"headingAtx\",\n    tokenize: tokenizeHeadingAtx,\n    resolve: resolveHeadingAtx\n};\n/** @type {Resolver} */ function resolveHeadingAtx(events, context) {\n    let contentEnd = events.length - 2;\n    let contentStart = 3;\n    /** @type {Token} */ let content;\n    /** @type {Token} */ let text;\n    // Prefix whitespace, part of the opening.\n    if (events[contentStart][1].type === \"whitespace\") contentStart += 2;\n    // Suffix whitespace, part of the closing.\n    if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") contentEnd -= 2;\n    if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n    if (contentEnd > contentStart) {\n        content = {\n            type: \"atxHeadingText\",\n            start: events[contentStart][1].start,\n            end: events[contentEnd][1].end\n        };\n        text = {\n            type: \"chunkText\",\n            start: events[contentStart][1].start,\n            end: events[contentEnd][1].end,\n            contentType: \"text\"\n        };\n        (0, _micromarkUtilChunked.splice)(events, contentStart, contentEnd - contentStart + 1, [\n            [\n                \"enter\",\n                content,\n                context\n            ],\n            [\n                \"enter\",\n                text,\n                context\n            ],\n            [\n                \"exit\",\n                text,\n                context\n            ],\n            [\n                \"exit\",\n                content,\n                context\n            ]\n        ]);\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeHeadingAtx(effects, ok, nok) {\n    let size = 0;\n    return start;\n    /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse indent like `markdown-rs`.\n        effects.enter(\"atxHeading\");\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        effects.enter(\"atxHeadingSequence\");\n        return sequenceOpen(code);\n    }\n    /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceOpen(code) {\n        if (code === 35 && size++ < 6) {\n            effects.consume(code);\n            return sequenceOpen;\n        }\n        // Always at least one `#`.\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\n            effects.exit(\"atxHeadingSequence\");\n            return atBreak(code);\n        }\n        return nok(code);\n    }\n    /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === 35) {\n            effects.enter(\"atxHeadingSequence\");\n            return sequenceFurther(code);\n        }\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"atxHeading\");\n            // To do: interrupt like `markdown-rs`.\n            // // Feel free to interrupt.\n            // tokenizer.interrupt = false\n            return ok(code);\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) return (0, _micromarkFactorySpace.factorySpace)(effects, atBreak, \"whitespace\")(code);\n        // To do: generate `data` tokens, add the `text` token later.\n        // Needs edit map, see: `markdown.rs`.\n        effects.enter(\"atxHeadingText\");\n        return data(code);\n    }\n    /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function sequenceFurther(code) {\n        if (code === 35) {\n            effects.consume(code);\n            return sequenceFurther;\n        }\n        effects.exit(\"atxHeadingSequence\");\n        return atBreak(code);\n    }\n    /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function data(code) {\n        if (code === null || code === 35 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\n            effects.exit(\"atxHeadingText\");\n            return atBreak(code);\n        }\n        effects.consume(code);\n        return data;\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"micromark-util-chunked\":\"aCCQY\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"hM4I8\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"htmlFlow\", ()=>htmlFlow);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nvar _micromarkUtilHtmlTagName = require(\"micromark-util-html-tag-name\");\nvar _blankLineJs = require(\"./blank-line.js\");\nconst htmlFlow = {\n    name: \"htmlFlow\",\n    tokenize: tokenizeHtmlFlow,\n    resolveTo: resolveToHtmlFlow,\n    concrete: true\n};\n/** @type {Construct} */ const blankLineBefore = {\n    tokenize: tokenizeBlankLineBefore,\n    partial: true\n};\nconst nonLazyContinuationStart = {\n    tokenize: tokenizeNonLazyContinuationStart,\n    partial: true\n};\n/** @type {Resolver} */ function resolveToHtmlFlow(events) {\n    let index = events.length;\n    while(index--){\n        if (events[index][0] === \"enter\" && events[index][1].type === \"htmlFlow\") break;\n    }\n    if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n        // Add the prefix start to the HTML token.\n        events[index][1].start = events[index - 2][1].start;\n        // Add the prefix start to the HTML line token.\n        events[index + 1][1].start = events[index - 2][1].start;\n        // Remove the line prefix.\n        events.splice(index - 2, 2);\n    }\n    return events;\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeHtmlFlow(effects, ok, nok) {\n    const self = this;\n    /** @type {number} */ let marker;\n    /** @type {boolean} */ let closingTag;\n    /** @type {string} */ let buffer;\n    /** @type {number} */ let index;\n    /** @type {Code} */ let markerB;\n    return start;\n    /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // To do: parse indent like `markdown-rs`.\n        return before(code);\n    }\n    /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        effects.enter(\"htmlFlow\");\n        effects.enter(\"htmlFlowData\");\n        effects.consume(code);\n        return open;\n    }\n    /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === 33) {\n            effects.consume(code);\n            return declarationOpen;\n        }\n        if (code === 47) {\n            effects.consume(code);\n            closingTag = true;\n            return tagCloseStart;\n        }\n        if (code === 63) {\n            effects.consume(code);\n            marker = 3;\n            // To do:\n            // tokenizer.concrete = true\n            // To do: use `markdown-rs` style interrupt.\n            // While we’re in an instruction instead of a declaration, we’re on a `?`\n            // right now, so we do need to search for `>`, similar to declarations.\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        // ASCII alphabetical.\n        if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            // @ts-expect-error: not null.\n            buffer = String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function declarationOpen(code) {\n        if (code === 45) {\n            effects.consume(code);\n            marker = 2;\n            return commentOpenInside;\n        }\n        if (code === 91) {\n            effects.consume(code);\n            marker = 5;\n            index = 0;\n            return cdataOpenInside;\n        }\n        // ASCII alphabetical.\n        if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            marker = 4;\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function commentOpenInside(code) {\n        if (code === 45) {\n            effects.consume(code);\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuationDeclarationInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdataOpenInside(code) {\n        const value = \"CDATA[\";\n        if (code === value.charCodeAt(index++)) {\n            effects.consume(code);\n            if (index === value.length) // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuation;\n            return cdataOpenInside;\n        }\n        return nok(code);\n    }\n    /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseStart(code) {\n        if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            // @ts-expect-error: not null.\n            buffer = String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */ function tagName(code) {\n        if (code === null || code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\n            const slash = code === 47;\n            const name = buffer.toLowerCase();\n            if (!slash && !closingTag && (0, _micromarkUtilHtmlTagName.htmlRawNames).includes(name)) {\n                marker = 1;\n                // // Do not form containers.\n                // tokenizer.concrete = true\n                return self.interrupt ? ok(code) : continuation(code);\n            }\n            if ((0, _micromarkUtilHtmlTagName.htmlBlockNames).includes(buffer.toLowerCase())) {\n                marker = 6;\n                if (slash) {\n                    effects.consume(code);\n                    return basicSelfClosing;\n                }\n                // // Do not form containers.\n                // tokenizer.concrete = true\n                return self.interrupt ? ok(code) : continuation(code);\n            }\n            marker = 7;\n            // Do not support complete HTML when interrupting.\n            return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n        }\n        // ASCII alphanumerical and `-`.\n        if (code === 45 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            buffer += String.fromCharCode(code);\n            return tagName;\n        }\n        return nok(code);\n    }\n    /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function basicSelfClosing(code) {\n        if (code === 62) {\n            effects.consume(code);\n            // // Do not form containers.\n            // tokenizer.concrete = true\n            return self.interrupt ? ok : continuation;\n        }\n        return nok(code);\n    }\n    /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeClosingTagAfter(code) {\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeClosingTagAfter;\n        }\n        return completeEnd(code);\n    }\n    /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeNameBefore(code) {\n        if (code === 47) {\n            effects.consume(code);\n            return completeEnd;\n        }\n        // ASCII alphanumerical and `:` and `_`.\n        if (code === 58 || code === 95 || (0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            return completeAttributeName;\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeNameBefore;\n        }\n        return completeEnd(code);\n    }\n    /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeName(code) {\n        // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n        if (code === 45 || code === 46 || code === 58 || code === 95 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return completeAttributeName;\n        }\n        return completeAttributeNameAfter(code);\n    }\n    /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeNameAfter(code) {\n        if (code === 61) {\n            effects.consume(code);\n            return completeAttributeValueBefore;\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeNameAfter;\n        }\n        return completeAttributeNameBefore(code);\n    }\n    /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueBefore(code) {\n        if (code === null || code === 60 || code === 61 || code === 62 || code === 96) return nok(code);\n        if (code === 34 || code === 39) {\n            effects.consume(code);\n            markerB = code;\n            return completeAttributeValueQuoted;\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAttributeValueBefore;\n        }\n        return completeAttributeValueUnquoted(code);\n    }\n    /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueQuoted(code) {\n        if (code === markerB) {\n            effects.consume(code);\n            markerB = null;\n            return completeAttributeValueQuotedAfter;\n        }\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) return nok(code);\n        effects.consume(code);\n        return completeAttributeValueQuoted;\n    }\n    /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueUnquoted(code) {\n        if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) return completeAttributeNameAfter(code);\n        effects.consume(code);\n        return completeAttributeValueUnquoted;\n    }\n    /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAttributeValueQuotedAfter(code) {\n        if (code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownSpace)(code)) return completeAttributeNameBefore(code);\n        return nok(code);\n    }\n    /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function completeEnd(code) {\n        if (code === 62) {\n            effects.consume(code);\n            return completeAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function completeAfter(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) // // Do not form containers.\n        // tokenizer.concrete = true\n        return continuation(code);\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return completeAfter;\n        }\n        return nok(code);\n    }\n    /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function continuation(code) {\n        if (code === 45 && marker === 2) {\n            effects.consume(code);\n            return continuationCommentInside;\n        }\n        if (code === 60 && marker === 1) {\n            effects.consume(code);\n            return continuationRawTagOpen;\n        }\n        if (code === 62 && marker === 4) {\n            effects.consume(code);\n            return continuationClose;\n        }\n        if (code === 63 && marker === 3) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        if (code === 93 && marker === 5) {\n            effects.consume(code);\n            return continuationCdataInside;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code) && (marker === 6 || marker === 7)) {\n            effects.exit(\"htmlFlowData\");\n            return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n        }\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"htmlFlowData\");\n            return continuationStart(code);\n        }\n        effects.consume(code);\n        return continuation;\n    }\n    /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */ function continuationStart(code) {\n        return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n    }\n    /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */ function continuationStartNonLazy(code) {\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return continuationBefore;\n    }\n    /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationBefore(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) return continuationStart(code);\n        effects.enter(\"htmlFlowData\");\n        return continuation(code);\n    }\n    /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationCommentInside(code) {\n        if (code === 45) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationRawTagOpen(code) {\n        if (code === 47) {\n            effects.consume(code);\n            buffer = \"\";\n            return continuationRawEndTag;\n        }\n        return continuation(code);\n    }\n    /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function continuationRawEndTag(code) {\n        if (code === 62) {\n            const name = buffer.toLowerCase();\n            if ((0, _micromarkUtilHtmlTagName.htmlRawNames).includes(name)) {\n                effects.consume(code);\n                return continuationClose;\n            }\n            return continuation(code);\n        }\n        if ((0, _micromarkUtilCharacter.asciiAlpha)(code) && buffer.length < 8) {\n            effects.consume(code);\n            // @ts-expect-error: not null.\n            buffer += String.fromCharCode(code);\n            return continuationRawEndTag;\n        }\n        return continuation(code);\n    }\n    /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationCdataInside(code) {\n        if (code === 93) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationDeclarationInside(code) {\n        if (code === 62) {\n            effects.consume(code);\n            return continuationClose;\n        }\n        // More dashes.\n        if (code === 45 && marker === 2) {\n            effects.consume(code);\n            return continuationDeclarationInside;\n        }\n        return continuation(code);\n    }\n    /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationClose(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"htmlFlowData\");\n            return continuationAfter(code);\n        }\n        effects.consume(code);\n        return continuationClose;\n    }\n    /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function continuationAfter(code) {\n        effects.exit(\"htmlFlow\");\n        // // Feel free to interrupt.\n        // tokenizer.interrupt = false\n        // // No longer concrete.\n        // tokenizer.concrete = false\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeNonLazyContinuationStart(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.enter(\"lineEnding\");\n            effects.consume(code);\n            effects.exit(\"lineEnding\");\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeBlankLineBefore(effects, ok, nok) {\n    return start;\n    /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return effects.attempt((0, _blankLineJs.blankLine), ok, nok);\n    }\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"micromark-util-html-tag-name\":\"bdWuA\",\"./blank-line.js\":\"g0Dph\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bdWuA\":[function(require,module,exports) {\n/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"htmlBlockNames\", ()=>htmlBlockNames);\nparcelHelpers.export(exports, \"htmlRawNames\", ()=>htmlRawNames);\nconst htmlBlockNames = [\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"base\",\n    \"basefont\",\n    \"blockquote\",\n    \"body\",\n    \"caption\",\n    \"center\",\n    \"col\",\n    \"colgroup\",\n    \"dd\",\n    \"details\",\n    \"dialog\",\n    \"dir\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"frame\",\n    \"frameset\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hr\",\n    \"html\",\n    \"iframe\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"menu\",\n    \"menuitem\",\n    \"nav\",\n    \"noframes\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"param\",\n    \"search\",\n    \"section\",\n    \"summary\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"ul\"\n];\nconst htmlRawNames = [\n    \"pre\",\n    \"script\",\n    \"style\",\n    \"textarea\"\n];\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"19uFK\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"htmlText\", ()=>htmlText);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst htmlText = {\n    name: \"htmlText\",\n    tokenize: tokenizeHtmlText\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeHtmlText(effects, ok, nok) {\n    const self = this;\n    /** @type {NonNullable<Code> | undefined} */ let marker;\n    /** @type {number} */ let index;\n    /** @type {State} */ let returnState;\n    return start;\n    /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"htmlText\");\n        effects.enter(\"htmlTextData\");\n        effects.consume(code);\n        return open;\n    }\n    /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === 33) {\n            effects.consume(code);\n            return declarationOpen;\n        }\n        if (code === 47) {\n            effects.consume(code);\n            return tagCloseStart;\n        }\n        if (code === 63) {\n            effects.consume(code);\n            return instruction;\n        }\n        // ASCII alphabetical.\n        if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagOpen;\n        }\n        return nok(code);\n    }\n    /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function declarationOpen(code) {\n        if (code === 45) {\n            effects.consume(code);\n            return commentOpenInside;\n        }\n        if (code === 91) {\n            effects.consume(code);\n            index = 0;\n            return cdataOpenInside;\n        }\n        if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            return declaration;\n        }\n        return nok(code);\n    }\n    /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function commentOpenInside(code) {\n        if (code === 45) {\n            effects.consume(code);\n            return commentEnd;\n        }\n        return nok(code);\n    }\n    /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function comment(code) {\n        if (code === null) return nok(code);\n        if (code === 45) {\n            effects.consume(code);\n            return commentClose;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = comment;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return comment;\n    }\n    /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function commentClose(code) {\n        if (code === 45) {\n            effects.consume(code);\n            return commentEnd;\n        }\n        return comment(code);\n    }\n    /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function commentEnd(code) {\n        return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n    }\n    /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdataOpenInside(code) {\n        const value = \"CDATA[\";\n        if (code === value.charCodeAt(index++)) {\n            effects.consume(code);\n            return index === value.length ? cdata : cdataOpenInside;\n        }\n        return nok(code);\n    }\n    /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */ function cdata(code) {\n        if (code === null) return nok(code);\n        if (code === 93) {\n            effects.consume(code);\n            return cdataClose;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = cdata;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return cdata;\n    }\n    /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */ function cdataClose(code) {\n        if (code === 93) {\n            effects.consume(code);\n            return cdataEnd;\n        }\n        return cdata(code);\n    }\n    /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */ function cdataEnd(code) {\n        if (code === 62) return end(code);\n        if (code === 93) {\n            effects.consume(code);\n            return cdataEnd;\n        }\n        return cdata(code);\n    }\n    /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function declaration(code) {\n        if (code === null || code === 62) return end(code);\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = declaration;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return declaration;\n    }\n    /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function instruction(code) {\n        if (code === null) return nok(code);\n        if (code === 63) {\n            effects.consume(code);\n            return instructionClose;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = instruction;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return instruction;\n    }\n    /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function instructionClose(code) {\n        return code === 62 ? end(code) : instruction(code);\n    }\n    /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseStart(code) {\n        // ASCII alphabetical.\n        if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagClose;\n        }\n        return nok(code);\n    }\n    /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagClose(code) {\n        // ASCII alphanumerical and `-`.\n        if (code === 45 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagClose;\n        }\n        return tagCloseBetween(code);\n    }\n    /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagCloseBetween(code) {\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = tagCloseBetween;\n            return lineEndingBefore(code);\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagCloseBetween;\n        }\n        return end(code);\n    }\n    /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpen(code) {\n        // ASCII alphanumerical and `-`.\n        if (code === 45 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagOpen;\n        }\n        if (code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) return tagOpenBetween(code);\n        return nok(code);\n    }\n    /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenBetween(code) {\n        if (code === 47) {\n            effects.consume(code);\n            return end;\n        }\n        // ASCII alphabetical and `:` and `_`.\n        if (code === 58 || code === 95 || (0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeName;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = tagOpenBetween;\n            return lineEndingBefore(code);\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenBetween;\n        }\n        return end(code);\n    }\n    /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeName(code) {\n        // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n        if (code === 45 || code === 46 || code === 58 || code === 95 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeName;\n        }\n        return tagOpenAttributeNameAfter(code);\n    }\n    /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeNameAfter(code) {\n        if (code === 61) {\n            effects.consume(code);\n            return tagOpenAttributeValueBefore;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeNameAfter;\n            return lineEndingBefore(code);\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeNameAfter;\n        }\n        return tagOpenBetween(code);\n    }\n    /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueBefore(code) {\n        if (code === null || code === 60 || code === 61 || code === 62 || code === 96) return nok(code);\n        if (code === 34 || code === 39) {\n            effects.consume(code);\n            marker = code;\n            return tagOpenAttributeValueQuoted;\n        }\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeValueBefore;\n            return lineEndingBefore(code);\n        }\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.consume(code);\n            return tagOpenAttributeValueBefore;\n        }\n        effects.consume(code);\n        return tagOpenAttributeValueUnquoted;\n    }\n    /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueQuoted(code) {\n        if (code === marker) {\n            effects.consume(code);\n            marker = undefined;\n            return tagOpenAttributeValueQuotedAfter;\n        }\n        if (code === null) return nok(code);\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            returnState = tagOpenAttributeValueQuoted;\n            return lineEndingBefore(code);\n        }\n        effects.consume(code);\n        return tagOpenAttributeValueQuoted;\n    }\n    /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueUnquoted(code) {\n        if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) return nok(code);\n        if (code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) return tagOpenBetween(code);\n        effects.consume(code);\n        return tagOpenAttributeValueUnquoted;\n    }\n    /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function tagOpenAttributeValueQuotedAfter(code) {\n        if (code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) return tagOpenBetween(code);\n        return nok(code);\n    }\n    /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function end(code) {\n        if (code === 62) {\n            effects.consume(code);\n            effects.exit(\"htmlTextData\");\n            effects.exit(\"htmlText\");\n            return ok;\n        }\n        return nok(code);\n    }\n    /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingBefore(code) {\n        effects.exit(\"htmlTextData\");\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return lineEndingAfter;\n    }\n    /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingAfter(code) {\n        // Always populated by defaults.\n        return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n    }\n    /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function lineEndingAfterPrefix(code) {\n        effects.enter(\"htmlTextData\");\n        return returnState(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"ihGwx\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"labelEnd\", ()=>labelEnd);\nvar _micromarkFactoryDestination = require(\"micromark-factory-destination\");\nvar _micromarkFactoryLabel = require(\"micromark-factory-label\");\nvar _micromarkFactoryTitle = require(\"micromark-factory-title\");\nvar _micromarkFactoryWhitespace = require(\"micromark-factory-whitespace\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nvar _micromarkUtilChunked = require(\"micromark-util-chunked\");\nvar _micromarkUtilNormalizeIdentifier = require(\"micromark-util-normalize-identifier\");\nvar _micromarkUtilResolveAll = require(\"micromark-util-resolve-all\");\nconst labelEnd = {\n    name: \"labelEnd\",\n    tokenize: tokenizeLabelEnd,\n    resolveTo: resolveToLabelEnd,\n    resolveAll: resolveAllLabelEnd\n};\n/** @type {Construct} */ const resourceConstruct = {\n    tokenize: tokenizeResource\n};\n/** @type {Construct} */ const referenceFullConstruct = {\n    tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */ const referenceCollapsedConstruct = {\n    tokenize: tokenizeReferenceCollapsed\n};\n/** @type {Resolver} */ function resolveAllLabelEnd(events) {\n    let index = -1;\n    while(++index < events.length){\n        const token = events[index][1];\n        if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n            // Remove the marker.\n            events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n            token.type = \"data\";\n            index++;\n        }\n    }\n    return events;\n}\n/** @type {Resolver} */ function resolveToLabelEnd(events, context) {\n    let index = events.length;\n    let offset = 0;\n    /** @type {Token} */ let token;\n    /** @type {number | undefined} */ let open;\n    /** @type {number | undefined} */ let close;\n    /** @type {Array<Event>} */ let media;\n    // Find an opening.\n    while(index--){\n        token = events[index][1];\n        if (open) {\n            // If we see another link, or inactive link label, we’ve been here before.\n            if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) break;\n            // Mark other link openings as inactive, as we can’t have links in\n            // links.\n            if (events[index][0] === \"enter\" && token.type === \"labelLink\") token._inactive = true;\n        } else if (close) {\n            if (events[index][0] === \"enter\" && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n                open = index;\n                if (token.type !== \"labelLink\") {\n                    offset = 2;\n                    break;\n                }\n            }\n        } else if (token.type === \"labelEnd\") close = index;\n    }\n    const group = {\n        type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n        start: Object.assign({}, events[open][1].start),\n        end: Object.assign({}, events[events.length - 1][1].end)\n    };\n    const label = {\n        type: \"label\",\n        start: Object.assign({}, events[open][1].start),\n        end: Object.assign({}, events[close][1].end)\n    };\n    const text = {\n        type: \"labelText\",\n        start: Object.assign({}, events[open + offset + 2][1].end),\n        end: Object.assign({}, events[close - 2][1].start)\n    };\n    media = [\n        [\n            \"enter\",\n            group,\n            context\n        ],\n        [\n            \"enter\",\n            label,\n            context\n        ]\n    ];\n    // Opening marker.\n    media = (0, _micromarkUtilChunked.push)(media, events.slice(open + 1, open + offset + 3));\n    // Text open.\n    media = (0, _micromarkUtilChunked.push)(media, [\n        [\n            \"enter\",\n            text,\n            context\n        ]\n    ]);\n    // Always populated by defaults.\n    // Between.\n    media = (0, _micromarkUtilChunked.push)(media, (0, _micromarkUtilResolveAll.resolveAll)(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n    // Text close, marker close, label close.\n    media = (0, _micromarkUtilChunked.push)(media, [\n        [\n            \"exit\",\n            text,\n            context\n        ],\n        events[close - 2],\n        events[close - 1],\n        [\n            \"exit\",\n            label,\n            context\n        ]\n    ]);\n    // Reference, resource, or so.\n    media = (0, _micromarkUtilChunked.push)(media, events.slice(close + 1));\n    // Media close.\n    media = (0, _micromarkUtilChunked.push)(media, [\n        [\n            \"exit\",\n            group,\n            context\n        ]\n    ]);\n    (0, _micromarkUtilChunked.splice)(events, open, events.length, media);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeLabelEnd(effects, ok, nok) {\n    const self = this;\n    let index = self.events.length;\n    /** @type {Token} */ let labelStart;\n    /** @type {boolean} */ let defined;\n    // Find an opening.\n    while(index--)if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n        labelStart = self.events[index][1];\n        break;\n    }\n    return start;\n    /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        // If there is not an okay opening.\n        if (!labelStart) return nok(code);\n        // If the corresponding label (link) start is marked as inactive,\n        // it means we’d be wrapping a link, like this:\n        //\n        // ```markdown\n        // > | a [b [c](d) e](f) g.\n        //                  ^\n        // ```\n        //\n        // We can’t have that, so it’s just balanced brackets.\n        if (labelStart._inactive) return labelEndNok(code);\n        defined = self.parser.defined.includes((0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(self.sliceSerialize({\n            start: labelStart.end,\n            end: self.now()\n        })));\n        effects.enter(\"labelEnd\");\n        effects.enter(\"labelMarker\");\n        effects.consume(code);\n        effects.exit(\"labelMarker\");\n        effects.exit(\"labelEnd\");\n        return after;\n    }\n    /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n        // an extension.\n        // Resource (`[asd](fgh)`)?\n        if (code === 40) return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n        // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n        if (code === 91) return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n        // Shortcut (`[asd]`) reference?\n        return defined ? labelEndOk(code) : labelEndNok(code);\n    }\n    /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceNotFull(code) {\n        return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n    }\n    /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEndOk(code) {\n        // Note: `markdown-rs` does a bunch of stuff here.\n        return ok(code);\n    }\n    /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEndNok(code) {\n        labelStart._balanced = true;\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeResource(effects, ok, nok) {\n    return resourceStart;\n    /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceStart(code) {\n        effects.enter(\"resource\");\n        effects.enter(\"resourceMarker\");\n        effects.consume(code);\n        effects.exit(\"resourceMarker\");\n        return resourceBefore;\n    }\n    /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceBefore(code) {\n        return (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code) ? (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, resourceOpen)(code) : resourceOpen(code);\n    }\n    /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceOpen(code) {\n        if (code === 41) return resourceEnd(code);\n        return (0, _micromarkFactoryDestination.factoryDestination)(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n    }\n    /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceDestinationAfter(code) {\n        return (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code) ? (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, resourceBetween)(code) : resourceEnd(code);\n    }\n    /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceDestinationMissing(code) {\n        return nok(code);\n    }\n    /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceBetween(code) {\n        if (code === 34 || code === 39 || code === 40) return (0, _micromarkFactoryTitle.factoryTitle)(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n        return resourceEnd(code);\n    }\n    /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceTitleAfter(code) {\n        return (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code) ? (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, resourceEnd)(code) : resourceEnd(code);\n    }\n    /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function resourceEnd(code) {\n        if (code === 41) {\n            effects.enter(\"resourceMarker\");\n            effects.consume(code);\n            effects.exit(\"resourceMarker\");\n            effects.exit(\"resource\");\n            return ok;\n        }\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeReferenceFull(effects, ok, nok) {\n    const self = this;\n    return referenceFull;\n    /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFull(code) {\n        return (0, _micromarkFactoryLabel.factoryLabel).call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n    }\n    /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFullAfter(code) {\n        return self.parser.defined.includes((0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n    }\n    /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceFullMissing(code) {\n        return nok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeReferenceCollapsed(effects, ok, nok) {\n    return referenceCollapsedStart;\n    /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function referenceCollapsedStart(code) {\n        // We only attempt a collapsed label if there’s a `[`.\n        effects.enter(\"reference\");\n        effects.enter(\"referenceMarker\");\n        effects.consume(code);\n        effects.exit(\"referenceMarker\");\n        return referenceCollapsedOpen;\n    }\n    /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */ function referenceCollapsedOpen(code) {\n        if (code === 93) {\n            effects.enter(\"referenceMarker\");\n            effects.consume(code);\n            effects.exit(\"referenceMarker\");\n            effects.exit(\"reference\");\n            return ok;\n        }\n        return nok(code);\n    }\n}\n\n},{\"micromark-factory-destination\":\"em0iK\",\"micromark-factory-label\":\"fmuaJ\",\"micromark-factory-title\":\"eXxqM\",\"micromark-factory-whitespace\":\"11gip\",\"micromark-util-character\":\"cUjFI\",\"micromark-util-chunked\":\"aCCQY\",\"micromark-util-normalize-identifier\":\"e2XYl\",\"micromark-util-resolve-all\":\"1064n\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"c63yJ\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"labelStartImage\", ()=>labelStartImage);\nvar _labelEndJs = require(\"./label-end.js\");\nconst labelStartImage = {\n    name: \"labelStartImage\",\n    tokenize: tokenizeLabelStartImage,\n    resolveAll: (0, _labelEndJs.labelEnd).resolveAll\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeLabelStartImage(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"labelImage\");\n        effects.enter(\"labelImageMarker\");\n        effects.consume(code);\n        effects.exit(\"labelImageMarker\");\n        return open;\n    }\n    /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function open(code) {\n        if (code === 91) {\n            effects.enter(\"labelMarker\");\n            effects.consume(code);\n            effects.exit(\"labelMarker\");\n            effects.exit(\"labelImage\");\n            return after;\n        }\n        return nok(code);\n    }\n    /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        // To do: use a new field to do this, this is still needed for\n        // `micromark-extension-gfm-footnote`, but the `label-start-link`\n        // behavior isn’t.\n        // Hidden footnotes hook.\n        /* c8 ignore next 3 */ return code === 94 && \"_hiddenFootnoteSupport\" in self.parser.constructs ? nok(code) : ok(code);\n    }\n}\n\n},{\"./label-end.js\":\"ihGwx\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"iBcHU\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"labelStartLink\", ()=>labelStartLink);\nvar _labelEndJs = require(\"./label-end.js\");\nconst labelStartLink = {\n    name: \"labelStartLink\",\n    tokenize: tokenizeLabelStartLink,\n    resolveAll: (0, _labelEndJs.labelEnd).resolveAll\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeLabelStartLink(effects, ok, nok) {\n    const self = this;\n    return start;\n    /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"labelLink\");\n        effects.enter(\"labelMarker\");\n        effects.consume(code);\n        effects.exit(\"labelMarker\");\n        effects.exit(\"labelLink\");\n        return after;\n    }\n    /** @type {State} */ function after(code) {\n        // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n        // remove.\n        // Hidden footnotes hook.\n        /* c8 ignore next 3 */ return code === 94 && \"_hiddenFootnoteSupport\" in self.parser.constructs ? nok(code) : ok(code);\n    }\n}\n\n},{\"./label-end.js\":\"ihGwx\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"8qDyu\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"lineEnding\", ()=>lineEnding);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst lineEnding = {\n    name: \"lineEnding\",\n    tokenize: tokenizeLineEnding\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeLineEnding(effects, ok) {\n    return start;\n    /** @type {State} */ function start(code) {\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return (0, _micromarkFactorySpace.factorySpace)(effects, ok, \"linePrefix\");\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"dwZDM\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"list\", ()=>list);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nvar _blankLineJs = require(\"./blank-line.js\");\nvar _thematicBreakJs = require(\"./thematic-break.js\");\nconst list = {\n    name: \"list\",\n    tokenize: tokenizeListStart,\n    continuation: {\n        tokenize: tokenizeListContinuation\n    },\n    exit: tokenizeListEnd\n};\n/** @type {Construct} */ const listItemPrefixWhitespaceConstruct = {\n    tokenize: tokenizeListItemPrefixWhitespace,\n    partial: true\n};\n/** @type {Construct} */ const indentConstruct = {\n    tokenize: tokenizeIndent,\n    partial: true\n};\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */ function tokenizeListStart(effects, ok, nok) {\n    const self = this;\n    const tail = self.events[self.events.length - 1];\n    let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    let size = 0;\n    return start;\n    /** @type {State} */ function start(code) {\n        const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n        if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : (0, _micromarkUtilCharacter.asciiDigit)(code)) {\n            if (!self.containerState.type) {\n                self.containerState.type = kind;\n                effects.enter(kind, {\n                    _container: true\n                });\n            }\n            if (kind === \"listUnordered\") {\n                effects.enter(\"listItemPrefix\");\n                return code === 42 || code === 45 ? effects.check((0, _thematicBreakJs.thematicBreak), nok, atMarker)(code) : atMarker(code);\n            }\n            if (!self.interrupt || code === 49) {\n                effects.enter(\"listItemPrefix\");\n                effects.enter(\"listItemValue\");\n                return inside(code);\n            }\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function inside(code) {\n        if ((0, _micromarkUtilCharacter.asciiDigit)(code) && ++size < 10) {\n            effects.consume(code);\n            return inside;\n        }\n        if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n            effects.exit(\"listItemValue\");\n            return atMarker(code);\n        }\n        return nok(code);\n    }\n    /**\n   * @type {State}\n   **/ function atMarker(code) {\n        effects.enter(\"listItemMarker\");\n        effects.consume(code);\n        effects.exit(\"listItemMarker\");\n        self.containerState.marker = self.containerState.marker || code;\n        return effects.check((0, _blankLineJs.blankLine), // Can’t be empty when interrupting.\n        self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n    }\n    /** @type {State} */ function onBlank(code) {\n        self.containerState.initialBlankLine = true;\n        initialSize++;\n        return endOfPrefix(code);\n    }\n    /** @type {State} */ function otherPrefix(code) {\n        if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            effects.enter(\"listItemPrefixWhitespace\");\n            effects.consume(code);\n            effects.exit(\"listItemPrefixWhitespace\");\n            return endOfPrefix;\n        }\n        return nok(code);\n    }\n    /** @type {State} */ function endOfPrefix(code) {\n        self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n        return ok(code);\n    }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */ function tokenizeListContinuation(effects, ok, nok) {\n    const self = this;\n    self.containerState._closeFlow = undefined;\n    return effects.check((0, _blankLineJs.blankLine), onBlank, notBlank);\n    /** @type {State} */ function onBlank(code) {\n        self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n        // We have a blank line.\n        // Still, try to consume at most the items size.\n        return (0, _micromarkFactorySpace.factorySpace)(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n    }\n    /** @type {State} */ function notBlank(code) {\n        if (self.containerState.furtherBlankLines || !(0, _micromarkUtilCharacter.markdownSpace)(code)) {\n            self.containerState.furtherBlankLines = undefined;\n            self.containerState.initialBlankLine = undefined;\n            return notInCurrentItem(code);\n        }\n        self.containerState.furtherBlankLines = undefined;\n        self.containerState.initialBlankLine = undefined;\n        return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n    }\n    /** @type {State} */ function notInCurrentItem(code) {\n        // While we do continue, we signal that the flow should be closed.\n        self.containerState._closeFlow = true;\n        // As we’re closing flow, we’re no longer interrupting.\n        self.interrupt = undefined;\n        // Always populated by defaults.\n        return (0, _micromarkFactorySpace.factorySpace)(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : 4)(code);\n    }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */ function tokenizeIndent(effects, ok, nok) {\n    const self = this;\n    return (0, _micromarkFactorySpace.factorySpace)(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n    /** @type {State} */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n    }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */ function tokenizeListEnd(effects) {\n    effects.exit(this.containerState.type);\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */ function tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n    const self = this;\n    // Always populated by defaults.\n    return (0, _micromarkFactorySpace.factorySpace)(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes(\"codeIndented\") ? undefined : 5);\n    /** @type {State} */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return !(0, _micromarkUtilCharacter.markdownSpace)(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"./blank-line.js\":\"g0Dph\",\"./thematic-break.js\":\"9s528\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"9s528\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"thematicBreak\", ()=>thematicBreak);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst thematicBreak = {\n    name: \"thematicBreak\",\n    tokenize: tokenizeThematicBreak\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeThematicBreak(effects, ok, nok) {\n    let size = 0;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        effects.enter(\"thematicBreak\");\n        // To do: parse indent like `markdown-rs`.\n        return before(code);\n    }\n    /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        marker = code;\n        return atBreak(code);\n    }\n    /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function atBreak(code) {\n        if (code === marker) {\n            effects.enter(\"thematicBreakSequence\");\n            return sequence(code);\n        }\n        if (size >= 3 && (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code))) {\n            effects.exit(\"thematicBreak\");\n            return ok(code);\n        }\n        return nok(code);\n    }\n    /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function sequence(code) {\n        if (code === marker) {\n            effects.consume(code);\n            size++;\n            return sequence;\n        }\n        effects.exit(\"thematicBreakSequence\");\n        return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"c6hKr\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"setextUnderline\", ()=>setextUnderline);\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nconst setextUnderline = {\n    name: \"setextUnderline\",\n    tokenize: tokenizeSetextUnderline,\n    resolveTo: resolveToSetextUnderline\n};\n/** @type {Resolver} */ function resolveToSetextUnderline(events, context) {\n    // To do: resolve like `markdown-rs`.\n    let index = events.length;\n    /** @type {number | undefined} */ let content;\n    /** @type {number | undefined} */ let text;\n    /** @type {number | undefined} */ let definition;\n    // Find the opening of the content.\n    // It’ll always exist: we don’t tokenize if it isn’t there.\n    while(index--)if (events[index][0] === \"enter\") {\n        if (events[index][1].type === \"content\") {\n            content = index;\n            break;\n        }\n        if (events[index][1].type === \"paragraph\") text = index;\n    } else {\n        if (events[index][1].type === \"content\") // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n        if (!definition && events[index][1].type === \"definition\") definition = index;\n    }\n    const heading = {\n        type: \"setextHeading\",\n        start: Object.assign({}, events[text][1].start),\n        end: Object.assign({}, events[events.length - 1][1].end)\n    };\n    // Change the paragraph to setext heading text.\n    events[text][1].type = \"setextHeadingText\";\n    // If we have definitions in the content, we’ll keep on having content,\n    // but we need move it.\n    if (definition) {\n        events.splice(text, 0, [\n            \"enter\",\n            heading,\n            context\n        ]);\n        events.splice(definition + 1, 0, [\n            \"exit\",\n            events[content][1],\n            context\n        ]);\n        events[content][1].end = Object.assign({}, events[definition][1].end);\n    } else events[content][1] = heading;\n    // Add the heading exit at the end.\n    events.push([\n        \"exit\",\n        heading,\n        context\n    ]);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeSetextUnderline(effects, ok, nok) {\n    const self = this;\n    /** @type {NonNullable<Code>} */ let marker;\n    return start;\n    /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        let index = self.events.length;\n        /** @type {boolean | undefined} */ let paragraph;\n        // Find an opening.\n        while(index--)// Skip enter/exit of line ending, line prefix, and content.\n        // We can now either have a definition or a paragraph.\n        if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n            paragraph = self.events[index][1].type === \"paragraph\";\n            break;\n        }\n        // To do: handle lazy/pierce like `markdown-rs`.\n        // To do: parse indent like `markdown-rs`.\n        if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n            effects.enter(\"setextHeadingLine\");\n            marker = code;\n            return before(code);\n        }\n        return nok(code);\n    }\n    /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        effects.enter(\"setextHeadingLineSequence\");\n        return inside(code);\n    }\n    /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === marker) {\n            effects.consume(code);\n            return inside;\n        }\n        effects.exit(\"setextHeadingLineSequence\");\n        return (0, _micromarkUtilCharacter.markdownSpace)(code) ? (0, _micromarkFactorySpace.factorySpace)(effects, after, \"lineSuffix\")(code) : after(code);\n    }\n    /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function after(code) {\n        if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            effects.exit(\"setextHeadingLine\");\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\n\n},{\"micromark-factory-space\":\"iStdw\",\"micromark-util-character\":\"cUjFI\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"75KlL\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"resolver\", ()=>resolver);\nparcelHelpers.export(exports, \"string\", ()=>string);\nparcelHelpers.export(exports, \"text\", ()=>text);\nconst resolver = {\n    resolveAll: createResolver()\n};\nconst string = initializeFactory(\"string\");\nconst text = initializeFactory(\"text\");\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */ function initializeFactory(field) {\n    return {\n        tokenize: initializeText,\n        resolveAll: createResolver(field === \"text\" ? resolveAllLineSuffixes : undefined)\n    };\n    /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */ function initializeText(effects) {\n        const self = this;\n        const constructs = this.parser.constructs[field];\n        const text = effects.attempt(constructs, start, notText);\n        return start;\n        /** @type {State} */ function start(code) {\n            return atBreak(code) ? text(code) : notText(code);\n        }\n        /** @type {State} */ function notText(code) {\n            if (code === null) {\n                effects.consume(code);\n                return;\n            }\n            effects.enter(\"data\");\n            effects.consume(code);\n            return data;\n        }\n        /** @type {State} */ function data(code) {\n            if (atBreak(code)) {\n                effects.exit(\"data\");\n                return text(code);\n            }\n            // Data.\n            effects.consume(code);\n            return data;\n        }\n        /**\n     * @param {Code} code\n     * @returns {boolean}\n     */ function atBreak(code) {\n            if (code === null) return true;\n            const list = constructs[code];\n            let index = -1;\n            if (list) // Always populated by defaults.\n            while(++index < list.length){\n                const item = list[index];\n                if (!item.previous || item.previous.call(self, self.previous)) return true;\n            }\n            return false;\n        }\n    }\n}\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */ function createResolver(extraResolver) {\n    return resolveAllText;\n    /** @type {Resolver} */ function resolveAllText(events, context) {\n        let index = -1;\n        /** @type {number | undefined} */ let enter;\n        // A rather boring computation (to merge adjacent `data` events) which\n        // improves mm performance by 29%.\n        while(++index <= events.length){\n            if (enter === undefined) {\n                if (events[index] && events[index][1].type === \"data\") {\n                    enter = index;\n                    index++;\n                }\n            } else if (!events[index] || events[index][1].type !== \"data\") {\n                // Don’t do anything if there is one data token.\n                if (index !== enter + 2) {\n                    events[enter][1].end = events[index - 1][1].end;\n                    events.splice(enter + 2, index - enter - 2);\n                    index = enter + 2;\n                }\n                enter = undefined;\n            }\n        }\n        return extraResolver ? extraResolver(events, context) : events;\n    }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */ function resolveAllLineSuffixes(events, context) {\n    let eventIndex = 0 // Skip first.\n    ;\n    while(++eventIndex <= events.length)if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n        const data = events[eventIndex - 1][1];\n        const chunks = context.sliceStream(data);\n        let index = chunks.length;\n        let bufferIndex = -1;\n        let size = 0;\n        /** @type {boolean | undefined} */ let tabs;\n        while(index--){\n            const chunk = chunks[index];\n            if (typeof chunk === \"string\") {\n                bufferIndex = chunk.length;\n                while(chunk.charCodeAt(bufferIndex - 1) === 32){\n                    size++;\n                    bufferIndex--;\n                }\n                if (bufferIndex) break;\n                bufferIndex = -1;\n            } else if (chunk === -2) {\n                tabs = true;\n                size++;\n            } else if (chunk === -1) ;\n            else {\n                // Replacement character, exit.\n                index++;\n                break;\n            }\n        }\n        if (size) {\n            const token = {\n                type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n                start: {\n                    line: data.end.line,\n                    column: data.end.column - size,\n                    offset: data.end.offset - size,\n                    _index: data.start._index + index,\n                    _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex\n                },\n                end: Object.assign({}, data.end)\n            };\n            data.end = Object.assign({}, token.start);\n            if (data.start.offset === data.end.offset) Object.assign(data, token);\n            else {\n                events.splice(eventIndex, 0, [\n                    \"enter\",\n                    token,\n                    context\n                ], [\n                    \"exit\",\n                    token,\n                    context\n                ]);\n                eventIndex += 2;\n            }\n        }\n        eventIndex++;\n    }\n    return events;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"hT0RM\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */ /**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */ parcelHelpers.export(exports, \"createTokenizer\", ()=>createTokenizer);\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\nvar _micromarkUtilChunked = require(\"micromark-util-chunked\");\nvar _micromarkUtilResolveAll = require(\"micromark-util-resolve-all\");\nfunction createTokenizer(parser, initialize, from) {\n    /** @type {Point} */ let point = Object.assign(from ? Object.assign({}, from) : {\n        line: 1,\n        column: 1,\n        offset: 0\n    }, {\n        _index: 0,\n        _bufferIndex: -1\n    });\n    /** @type {Record<string, number>} */ const columnStart = {};\n    /** @type {Array<Construct>} */ const resolveAllConstructs = [];\n    /** @type {Array<Chunk>} */ let chunks = [];\n    /** @type {Array<Token>} */ let stack = [];\n    /** @type {boolean | undefined} */ let consumed = true;\n    /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */ const effects = {\n        consume,\n        enter,\n        exit,\n        attempt: constructFactory(onsuccessfulconstruct),\n        check: constructFactory(onsuccessfulcheck),\n        interrupt: constructFactory(onsuccessfulcheck, {\n            interrupt: true\n        })\n    };\n    /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */ const context = {\n        previous: null,\n        code: null,\n        containerState: {},\n        events: [],\n        parser,\n        sliceStream,\n        sliceSerialize,\n        now,\n        defineSkip,\n        write\n    };\n    /**\n   * The state function.\n   *\n   * @type {State | void}\n   */ let state = initialize.tokenize.call(context, effects);\n    /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */ let expectedCode;\n    if (initialize.resolveAll) resolveAllConstructs.push(initialize);\n    return context;\n    /** @type {TokenizeContext['write']} */ function write(slice) {\n        chunks = (0, _micromarkUtilChunked.push)(chunks, slice);\n        main();\n        // Exit if we’re not done, resolve might change stuff.\n        if (chunks[chunks.length - 1] !== null) return [];\n        addResult(initialize, 0);\n        // Otherwise, resolve, and exit.\n        context.events = (0, _micromarkUtilResolveAll.resolveAll)(resolveAllConstructs, context.events, context);\n        return context.events;\n    }\n    //\n    // Tools.\n    //\n    /** @type {TokenizeContext['sliceSerialize']} */ function sliceSerialize(token, expandTabs) {\n        return serializeChunks(sliceStream(token), expandTabs);\n    }\n    /** @type {TokenizeContext['sliceStream']} */ function sliceStream(token) {\n        return sliceChunks(chunks, token);\n    }\n    /** @type {TokenizeContext['now']} */ function now() {\n        // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n        const { line , column , offset , _index , _bufferIndex  } = point;\n        return {\n            line,\n            column,\n            offset,\n            _index,\n            _bufferIndex\n        };\n    }\n    /** @type {TokenizeContext['defineSkip']} */ function defineSkip(value) {\n        columnStart[value.line] = value.column;\n        accountForPotentialSkip();\n    }\n    //\n    // State management.\n    //\n    /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */ function main() {\n        /** @type {number} */ let chunkIndex;\n        while(point._index < chunks.length){\n            const chunk = chunks[point._index];\n            // If we’re in a buffer chunk, loop through it.\n            if (typeof chunk === \"string\") {\n                chunkIndex = point._index;\n                if (point._bufferIndex < 0) point._bufferIndex = 0;\n                while(point._index === chunkIndex && point._bufferIndex < chunk.length)go(chunk.charCodeAt(point._bufferIndex));\n            } else go(chunk);\n        }\n    }\n    /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */ function go(code) {\n        consumed = undefined;\n        expectedCode = code;\n        state = state(code);\n    }\n    /** @type {Effects['consume']} */ function consume(code) {\n        if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n            point.line++;\n            point.column = 1;\n            point.offset += code === -3 ? 2 : 1;\n            accountForPotentialSkip();\n        } else if (code !== -1) {\n            point.column++;\n            point.offset++;\n        }\n        // Not in a string chunk.\n        if (point._bufferIndex < 0) point._index++;\n        else {\n            point._bufferIndex++;\n            // At end of string chunk.\n            // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n            // strings.\n            if (point._bufferIndex === chunks[point._index].length) {\n                point._bufferIndex = -1;\n                point._index++;\n            }\n        }\n        // Expose the previous character.\n        context.previous = code;\n        // Mark as consumed.\n        consumed = true;\n    }\n    /** @type {Effects['enter']} */ function enter(type, fields) {\n        /** @type {Token} */ // @ts-expect-error Patch instead of assign required fields to help GC.\n        const token = fields || {};\n        token.type = type;\n        token.start = now();\n        context.events.push([\n            \"enter\",\n            token,\n            context\n        ]);\n        stack.push(token);\n        return token;\n    }\n    /** @type {Effects['exit']} */ function exit(type) {\n        const token = stack.pop();\n        token.end = now();\n        context.events.push([\n            \"exit\",\n            token,\n            context\n        ]);\n        return token;\n    }\n    /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */ function onsuccessfulconstruct(construct, info) {\n        addResult(construct, info.from);\n    }\n    /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */ function onsuccessfulcheck(_, info) {\n        info.restore();\n    }\n    /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */ function constructFactory(onreturn, fields) {\n        return hook;\n        /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */ function hook(constructs, returnState, bogusState) {\n            /** @type {Array<Construct>} */ let listOfConstructs;\n            /** @type {number} */ let constructIndex;\n            /** @type {Construct} */ let currentConstruct;\n            /** @type {Info} */ let info;\n            return Array.isArray(constructs) ? handleListOfConstructs(constructs) : \"tokenize\" in constructs ? handleListOfConstructs([\n                constructs\n            ]) : handleMapOfConstructs(constructs);\n            /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */ function handleMapOfConstructs(map) {\n                return start;\n                /** @type {State} */ function start(code) {\n                    const def = code !== null && map[code];\n                    const all = code !== null && map.null;\n                    const list = [\n                        // To do: add more extension tests.\n                        /* c8 ignore next 2 */ ...Array.isArray(def) ? def : def ? [\n                            def\n                        ] : [],\n                        ...Array.isArray(all) ? all : all ? [\n                            all\n                        ] : []\n                    ];\n                    return handleListOfConstructs(list)(code);\n                }\n            }\n            /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */ function handleListOfConstructs(list) {\n                listOfConstructs = list;\n                constructIndex = 0;\n                if (list.length === 0) return bogusState;\n                return handleConstruct(list[constructIndex]);\n            }\n            /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */ function handleConstruct(construct) {\n                return start;\n                /** @type {State} */ function start(code) {\n                    // To do: not needed to store if there is no bogus state, probably?\n                    // Currently doesn’t work because `inspect` in document does a check\n                    // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n                    // by not storing.\n                    info = store();\n                    currentConstruct = construct;\n                    if (!construct.partial) context.currentConstruct = construct;\n                    // Always populated by defaults.\n                    if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) return nok(code);\n                    return construct.tokenize.call(// If we do have fields, create an object w/ `context` as its\n                    // prototype.\n                    // This allows a “live binding”, which is needed for `interrupt`.\n                    fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n                }\n            }\n            /** @type {State} */ function ok(code) {\n                consumed = true;\n                onreturn(currentConstruct, info);\n                return returnState;\n            }\n            /** @type {State} */ function nok(code) {\n                consumed = true;\n                info.restore();\n                if (++constructIndex < listOfConstructs.length) return handleConstruct(listOfConstructs[constructIndex]);\n                return bogusState;\n            }\n        }\n    }\n    /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */ function addResult(construct, from) {\n        if (construct.resolveAll && !resolveAllConstructs.includes(construct)) resolveAllConstructs.push(construct);\n        if (construct.resolve) (0, _micromarkUtilChunked.splice)(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n        if (construct.resolveTo) context.events = construct.resolveTo(context.events, context);\n    }\n    /**\n   * Store state.\n   *\n   * @returns {Info}\n   */ function store() {\n        const startPoint = now();\n        const startPrevious = context.previous;\n        const startCurrentConstruct = context.currentConstruct;\n        const startEventsIndex = context.events.length;\n        const startStack = Array.from(stack);\n        return {\n            restore,\n            from: startEventsIndex\n        };\n        /**\n     * Restore state.\n     *\n     * @returns {void}\n     */ function restore() {\n            point = startPoint;\n            context.previous = startPrevious;\n            context.currentConstruct = startCurrentConstruct;\n            context.events.length = startEventsIndex;\n            stack = startStack;\n            accountForPotentialSkip();\n        }\n    }\n    /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */ function accountForPotentialSkip() {\n        if (point.line in columnStart && point.column < 2) {\n            point.column = columnStart[point.line];\n            point.offset += columnStart[point.line] - 1;\n        }\n    }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */ function sliceChunks(chunks, token) {\n    const startIndex = token.start._index;\n    const startBufferIndex = token.start._bufferIndex;\n    const endIndex = token.end._index;\n    const endBufferIndex = token.end._bufferIndex;\n    /** @type {Array<Chunk>} */ let view;\n    if (startIndex === endIndex) // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [\n        chunks[startIndex].slice(startBufferIndex, endBufferIndex)\n    ];\n    else {\n        view = chunks.slice(startIndex, endIndex);\n        if (startBufferIndex > -1) {\n            const head = view[0];\n            if (typeof head === \"string\") view[0] = head.slice(startBufferIndex);\n            else view.shift();\n        }\n        if (endBufferIndex > 0) // @ts-expect-error `_bufferIndex` is used on string chunks.\n        view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n    return view;\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */ function serializeChunks(chunks, expandTabs) {\n    let index = -1;\n    /** @type {Array<string>} */ const result = [];\n    /** @type {boolean | undefined} */ let atTab;\n    while(++index < chunks.length){\n        const chunk = chunks[index];\n        /** @type {string} */ let value;\n        if (typeof chunk === \"string\") value = chunk;\n        else switch(chunk){\n            case -5:\n                value = \"\\r\";\n                break;\n            case -4:\n                value = \"\\n\";\n                break;\n            case -3:\n                value = \"\\r\\n\";\n                break;\n            case -2:\n                value = expandTabs ? \" \" : \"\t\";\n                break;\n            case -1:\n                if (!expandTabs && atTab) continue;\n                value = \" \";\n                break;\n            default:\n                // Currently only replacement character.\n                value = String.fromCharCode(chunk);\n        }\n        atTab = chunk === -2;\n        result.push(value);\n    }\n    return result.join(\"\");\n}\n\n},{\"micromark-util-character\":\"cUjFI\",\"micromark-util-chunked\":\"aCCQY\",\"micromark-util-resolve-all\":\"1064n\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"ivY6o\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"document\", ()=>document);\nparcelHelpers.export(exports, \"contentInitial\", ()=>contentInitial);\nparcelHelpers.export(exports, \"flowInitial\", ()=>flowInitial);\nparcelHelpers.export(exports, \"flow\", ()=>flow);\nparcelHelpers.export(exports, \"string\", ()=>string);\nparcelHelpers.export(exports, \"text\", ()=>text);\nparcelHelpers.export(exports, \"insideSpan\", ()=>insideSpan);\nparcelHelpers.export(exports, \"attentionMarkers\", ()=>attentionMarkers);\nparcelHelpers.export(exports, \"disable\", ()=>disable);\nvar _micromarkCoreCommonmark = require(\"micromark-core-commonmark\");\nvar _textJs = require(\"./initialize/text.js\");\nconst document = {\n    [42]: (0, _micromarkCoreCommonmark.list),\n    [43]: (0, _micromarkCoreCommonmark.list),\n    [45]: (0, _micromarkCoreCommonmark.list),\n    [48]: (0, _micromarkCoreCommonmark.list),\n    [49]: (0, _micromarkCoreCommonmark.list),\n    [50]: (0, _micromarkCoreCommonmark.list),\n    [51]: (0, _micromarkCoreCommonmark.list),\n    [52]: (0, _micromarkCoreCommonmark.list),\n    [53]: (0, _micromarkCoreCommonmark.list),\n    [54]: (0, _micromarkCoreCommonmark.list),\n    [55]: (0, _micromarkCoreCommonmark.list),\n    [56]: (0, _micromarkCoreCommonmark.list),\n    [57]: (0, _micromarkCoreCommonmark.list),\n    [62]: (0, _micromarkCoreCommonmark.blockQuote)\n};\nconst contentInitial = {\n    [91]: (0, _micromarkCoreCommonmark.definition)\n};\nconst flowInitial = {\n    [-2]: (0, _micromarkCoreCommonmark.codeIndented),\n    [-1]: (0, _micromarkCoreCommonmark.codeIndented),\n    [32]: (0, _micromarkCoreCommonmark.codeIndented)\n};\nconst flow = {\n    [35]: (0, _micromarkCoreCommonmark.headingAtx),\n    [42]: (0, _micromarkCoreCommonmark.thematicBreak),\n    [45]: [\n        (0, _micromarkCoreCommonmark.setextUnderline),\n        (0, _micromarkCoreCommonmark.thematicBreak)\n    ],\n    [60]: (0, _micromarkCoreCommonmark.htmlFlow),\n    [61]: (0, _micromarkCoreCommonmark.setextUnderline),\n    [95]: (0, _micromarkCoreCommonmark.thematicBreak),\n    [96]: (0, _micromarkCoreCommonmark.codeFenced),\n    [126]: (0, _micromarkCoreCommonmark.codeFenced)\n};\nconst string = {\n    [38]: (0, _micromarkCoreCommonmark.characterReference),\n    [92]: (0, _micromarkCoreCommonmark.characterEscape)\n};\nconst text = {\n    [-5]: (0, _micromarkCoreCommonmark.lineEnding),\n    [-4]: (0, _micromarkCoreCommonmark.lineEnding),\n    [-3]: (0, _micromarkCoreCommonmark.lineEnding),\n    [33]: (0, _micromarkCoreCommonmark.labelStartImage),\n    [38]: (0, _micromarkCoreCommonmark.characterReference),\n    [42]: (0, _micromarkCoreCommonmark.attention),\n    [60]: [\n        (0, _micromarkCoreCommonmark.autolink),\n        (0, _micromarkCoreCommonmark.htmlText)\n    ],\n    [91]: (0, _micromarkCoreCommonmark.labelStartLink),\n    [92]: [\n        (0, _micromarkCoreCommonmark.hardBreakEscape),\n        (0, _micromarkCoreCommonmark.characterEscape)\n    ],\n    [93]: (0, _micromarkCoreCommonmark.labelEnd),\n    [95]: (0, _micromarkCoreCommonmark.attention),\n    [96]: (0, _micromarkCoreCommonmark.codeText)\n};\nconst insideSpan = {\n    null: [\n        (0, _micromarkCoreCommonmark.attention),\n        (0, _textJs.resolver)\n    ]\n};\nconst attentionMarkers = {\n    null: [\n        42,\n        95\n    ]\n};\nconst disable = {\n    null: []\n};\n\n},{\"micromark-core-commonmark\":\"82deD\",\"./initialize/text.js\":\"75KlL\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"2F8ys\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */ /**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * @returns {Preprocessor}\n */ parcelHelpers.export(exports, \"preprocess\", ()=>preprocess);\nconst search = /[\\0\\t\\n\\r]/g;\nfunction preprocess() {\n    let column = 1;\n    let buffer = \"\";\n    /** @type {boolean | undefined} */ let start = true;\n    /** @type {boolean | undefined} */ let atCarriageReturn;\n    return preprocessor;\n    /** @type {Preprocessor} */ function preprocessor(value, encoding, end) {\n        /** @type {Array<Chunk>} */ const chunks = [];\n        /** @type {RegExpMatchArray | null} */ let match;\n        /** @type {number} */ let next;\n        /** @type {number} */ let startPosition;\n        /** @type {number} */ let endPosition;\n        /** @type {Code} */ let code;\n        // @ts-expect-error `Buffer` does allow an encoding.\n        value = buffer + value.toString(encoding);\n        startPosition = 0;\n        buffer = \"\";\n        if (start) {\n            // To do: `markdown-rs` actually parses BOMs (byte order mark).\n            if (value.charCodeAt(0) === 65279) startPosition++;\n            start = undefined;\n        }\n        while(startPosition < value.length){\n            search.lastIndex = startPosition;\n            match = search.exec(value);\n            endPosition = match && match.index !== undefined ? match.index : value.length;\n            code = value.charCodeAt(endPosition);\n            if (!match) {\n                buffer = value.slice(startPosition);\n                break;\n            }\n            if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n                chunks.push(-3);\n                atCarriageReturn = undefined;\n            } else {\n                if (atCarriageReturn) {\n                    chunks.push(-5);\n                    atCarriageReturn = undefined;\n                }\n                if (startPosition < endPosition) {\n                    chunks.push(value.slice(startPosition, endPosition));\n                    column += endPosition - startPosition;\n                }\n                switch(code){\n                    case 0:\n                        chunks.push(65533);\n                        column++;\n                        break;\n                    case 9:\n                        next = Math.ceil(column / 4) * 4;\n                        chunks.push(-2);\n                        while(column++ < next)chunks.push(-1);\n                        break;\n                    case 10:\n                        chunks.push(-4);\n                        column = 1;\n                        break;\n                    default:\n                        atCarriageReturn = true;\n                        column = 1;\n                }\n            }\n            startPosition = endPosition + 1;\n        }\n        if (end) {\n            if (atCarriageReturn) chunks.push(-5);\n            if (buffer) chunks.push(buffer);\n            chunks.push(null);\n        }\n        return chunks;\n    }\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"1RlOo\":[function(require,module,exports) {\n/**\n * @typedef {import('micromark-util-types').Event} Event\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */ parcelHelpers.export(exports, \"postprocess\", ()=>postprocess);\nvar _micromarkUtilSubtokenize = require(\"micromark-util-subtokenize\");\nfunction postprocess(events) {\n    while(!(0, _micromarkUtilSubtokenize.subtokenize)(events));\n    return events;\n}\n\n},{\"micromark-util-subtokenize\":\"9JtDe\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"dEuCB\":[function(require,module,exports) {\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"decodeNumericCharacterReference\", ()=>decodeNumericCharacterReference);\nfunction decodeNumericCharacterReference(value, base) {\n    const code = Number.parseInt(value, base);\n    if (// C0 except for HT, LF, FF, CR, space.\n    code < 9 || code === 11 || code > 13 && code < 32 || // Control character (DEL) of C0, and C1 controls.\n    code > 126 && code < 160 || // Lone high surrogates and low surrogates.\n    code > 55295 && code < 57344 || // Noncharacters.\n    code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 /* eslint-enable no-bitwise */  || // Out of range\n    code > 1114111) return \"�\";\n    return String.fromCharCode(code);\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"h4ErJ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */ parcelHelpers.export(exports, \"decodeString\", ()=>decodeString);\nvar _decodeNamedCharacterReference = require(\"decode-named-character-reference\");\nvar _micromarkUtilDecodeNumericCharacterReference = require(\"micromark-util-decode-numeric-character-reference\");\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\nfunction decodeString(value) {\n    return value.replace(characterEscapeOrReference, decode);\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */ function decode($0, $1, $2) {\n    if ($1) // Escape.\n    return $1;\n    // Reference.\n    const head = $2.charCodeAt(0);\n    if (head === 35) {\n        const head = $2.charCodeAt(1);\n        const hex = head === 120 || head === 88;\n        return (0, _micromarkUtilDecodeNumericCharacterReference.decodeNumericCharacterReference)($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n    }\n    return (0, _decodeNamedCharacterReference.decodeNamedCharacterReference)($2) || $0;\n}\n\n},{\"decode-named-character-reference\":\"aLMfA\",\"micromark-util-decode-numeric-character-reference\":\"dEuCB\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"3goVY\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"stringifyPosition\", ()=>(0, _indexJs.stringifyPosition));\nvar _indexJs = require(\"./lib/index.js\");\n\n},{\"./lib/index.js\":\"8zd7C\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"8zd7C\":[function(require,module,exports) {\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */ /**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */ /**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"stringifyPosition\", ()=>stringifyPosition);\nfunction stringifyPosition(value) {\n    // Nothing.\n    if (!value || typeof value !== \"object\") return \"\";\n    // Node.\n    if (\"position\" in value || \"type\" in value) return position(value.position);\n    // Position.\n    if (\"start\" in value || \"end\" in value) return position(value);\n    // Point.\n    if (\"line\" in value || \"column\" in value) return point(value);\n    // ?\n    return \"\";\n}\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */ function point(point) {\n    return index(point && point.line) + \":\" + index(point && point.column);\n}\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */ function position(pos) {\n    return point(pos && pos.start) + \"-\" + point(pos && pos.end);\n}\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */ function index(value) {\n    return value && typeof value === \"number\" ? value : 1;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequire9da7\")\n\n//# sourceMappingURL=flowDiagram-93327f21.8f11c8ee.js.map\n","import { l as log, H as decodeEntities } from \"./mermaid-b0ad2de1.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, text) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  let bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  structuredText.forEach((line) => {\n    let fullStr = line.map((data) => data.content).join(\" \");\n    let tempStr = \"\";\n    let linesUnderWidth = [];\n    let prevIndex = 0;\n    if (computeWidthOfText(labelGroup, lineHeight, fullStr) <= width) {\n      linesUnderWidth.push(fullStr);\n    } else {\n      for (let i = 0; i <= fullStr.length; i++) {\n        tempStr = fullStr.slice(prevIndex, i);\n        log.info(tempStr, prevIndex, i);\n        if (computeWidthOfText(labelGroup, lineHeight, tempStr) > width) {\n          const subStr = fullStr.slice(prevIndex, i);\n          const lastSpaceIndex = subStr.lastIndexOf(\" \");\n          if (lastSpaceIndex > -1) {\n            i = prevIndex + lastSpaceIndex + 1;\n          }\n          linesUnderWidth.push(fullStr.slice(prevIndex, i).trim());\n          prevIndex = i;\n          tempStr = null;\n        }\n      }\n      if (tempStr != null) {\n        linesUnderWidth.push(tempStr);\n      }\n    }\n    const preparedLines = linesUnderWidth.map((w) => ({ content: w, type: line.type }));\n    for (const preparedLine of preparedLines) {\n      let tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, [preparedLine]);\n      lineIndex++;\n    }\n  });\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"em\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    let vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as c\n};\n","// Note: types exported from `index.d.ts`.\nexport {fromMarkdown} from './lib/index.js'\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('./lib/index.js').Options} Options\n */\n\nexport {toString} from './lib/index.js'\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","export {attention} from './lib/attention.js'\nexport {autolink} from './lib/autolink.js'\nexport {blankLine} from './lib/blank-line.js'\nexport {blockQuote} from './lib/block-quote.js'\nexport {characterEscape} from './lib/character-escape.js'\nexport {characterReference} from './lib/character-reference.js'\nexport {codeFenced} from './lib/code-fenced.js'\nexport {codeIndented} from './lib/code-indented.js'\nexport {codeText} from './lib/code-text.js'\nexport {content} from './lib/content.js'\nexport {definition} from './lib/definition.js'\nexport {hardBreakEscape} from './lib/hard-break-escape.js'\nexport {headingAtx} from './lib/heading-atx.js'\nexport {htmlFlow} from './lib/html-flow.js'\nexport {htmlText} from './lib/html-text.js'\nexport {labelEnd} from './lib/label-end.js'\nexport {labelStartImage} from './lib/label-start-image.js'\nexport {labelStartLink} from './lib/label-start-link.js'\nexport {lineEnding} from './lib/line-ending.js'\nexport {list} from './lib/list.js'\nexport {setextUnderline} from './lib/setext-underline.js'\nexport {thematicBreak} from './lib/thematic-break.js'\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","import {characterEntities} from 'character-entities'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false\n}\n","/**\n * Map of named character references.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntities = {\n  AElig: 'Æ',\n  AMP: '&',\n  Aacute: 'Á',\n  Abreve: 'Ă',\n  Acirc: 'Â',\n  Acy: 'А',\n  Afr: '𝔄',\n  Agrave: 'À',\n  Alpha: 'Α',\n  Amacr: 'Ā',\n  And: '⩓',\n  Aogon: 'Ą',\n  Aopf: '𝔸',\n  ApplyFunction: '⁡',\n  Aring: 'Å',\n  Ascr: '𝒜',\n  Assign: '≔',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Backslash: '∖',\n  Barv: '⫧',\n  Barwed: '⌆',\n  Bcy: 'Б',\n  Because: '∵',\n  Bernoullis: 'ℬ',\n  Beta: 'Β',\n  Bfr: '𝔅',\n  Bopf: '𝔹',\n  Breve: '˘',\n  Bscr: 'ℬ',\n  Bumpeq: '≎',\n  CHcy: 'Ч',\n  COPY: '©',\n  Cacute: 'Ć',\n  Cap: '⋒',\n  CapitalDifferentialD: 'ⅅ',\n  Cayleys: 'ℭ',\n  Ccaron: 'Č',\n  Ccedil: 'Ç',\n  Ccirc: 'Ĉ',\n  Cconint: '∰',\n  Cdot: 'Ċ',\n  Cedilla: '¸',\n  CenterDot: '·',\n  Cfr: 'ℭ',\n  Chi: 'Χ',\n  CircleDot: '⊙',\n  CircleMinus: '⊖',\n  CirclePlus: '⊕',\n  CircleTimes: '⊗',\n  ClockwiseContourIntegral: '∲',\n  CloseCurlyDoubleQuote: '”',\n  CloseCurlyQuote: '’',\n  Colon: '∷',\n  Colone: '⩴',\n  Congruent: '≡',\n  Conint: '∯',\n  ContourIntegral: '∮',\n  Copf: 'ℂ',\n  Coproduct: '∐',\n  CounterClockwiseContourIntegral: '∳',\n  Cross: '⨯',\n  Cscr: '𝒞',\n  Cup: '⋓',\n  CupCap: '≍',\n  DD: 'ⅅ',\n  DDotrahd: '⤑',\n  DJcy: 'Ђ',\n  DScy: 'Ѕ',\n  DZcy: 'Џ',\n  Dagger: '‡',\n  Darr: '↡',\n  Dashv: '⫤',\n  Dcaron: 'Ď',\n  Dcy: 'Д',\n  Del: '∇',\n  Delta: 'Δ',\n  Dfr: '𝔇',\n  DiacriticalAcute: '´',\n  DiacriticalDot: '˙',\n  DiacriticalDoubleAcute: '˝',\n  DiacriticalGrave: '`',\n  DiacriticalTilde: '˜',\n  Diamond: '⋄',\n  DifferentialD: 'ⅆ',\n  Dopf: '𝔻',\n  Dot: '¨',\n  DotDot: '⃜',\n  DotEqual: '≐',\n  DoubleContourIntegral: '∯',\n  DoubleDot: '¨',\n  DoubleDownArrow: '⇓',\n  DoubleLeftArrow: '⇐',\n  DoubleLeftRightArrow: '⇔',\n  DoubleLeftTee: '⫤',\n  DoubleLongLeftArrow: '⟸',\n  DoubleLongLeftRightArrow: '⟺',\n  DoubleLongRightArrow: '⟹',\n  DoubleRightArrow: '⇒',\n  DoubleRightTee: '⊨',\n  DoubleUpArrow: '⇑',\n  DoubleUpDownArrow: '⇕',\n  DoubleVerticalBar: '∥',\n  DownArrow: '↓',\n  DownArrowBar: '⤓',\n  DownArrowUpArrow: '⇵',\n  DownBreve: '̑',\n  DownLeftRightVector: '⥐',\n  DownLeftTeeVector: '⥞',\n  DownLeftVector: '↽',\n  DownLeftVectorBar: '⥖',\n  DownRightTeeVector: '⥟',\n  DownRightVector: '⇁',\n  DownRightVectorBar: '⥗',\n  DownTee: '⊤',\n  DownTeeArrow: '↧',\n  Downarrow: '⇓',\n  Dscr: '𝒟',\n  Dstrok: 'Đ',\n  ENG: 'Ŋ',\n  ETH: 'Ð',\n  Eacute: 'É',\n  Ecaron: 'Ě',\n  Ecirc: 'Ê',\n  Ecy: 'Э',\n  Edot: 'Ė',\n  Efr: '𝔈',\n  Egrave: 'È',\n  Element: '∈',\n  Emacr: 'Ē',\n  EmptySmallSquare: '◻',\n  EmptyVerySmallSquare: '▫',\n  Eogon: 'Ę',\n  Eopf: '𝔼',\n  Epsilon: 'Ε',\n  Equal: '⩵',\n  EqualTilde: '≂',\n  Equilibrium: '⇌',\n  Escr: 'ℰ',\n  Esim: '⩳',\n  Eta: 'Η',\n  Euml: 'Ë',\n  Exists: '∃',\n  ExponentialE: 'ⅇ',\n  Fcy: 'Ф',\n  Ffr: '𝔉',\n  FilledSmallSquare: '◼',\n  FilledVerySmallSquare: '▪',\n  Fopf: '𝔽',\n  ForAll: '∀',\n  Fouriertrf: 'ℱ',\n  Fscr: 'ℱ',\n  GJcy: 'Ѓ',\n  GT: '>',\n  Gamma: 'Γ',\n  Gammad: 'Ϝ',\n  Gbreve: 'Ğ',\n  Gcedil: 'Ģ',\n  Gcirc: 'Ĝ',\n  Gcy: 'Г',\n  Gdot: 'Ġ',\n  Gfr: '𝔊',\n  Gg: '⋙',\n  Gopf: '𝔾',\n  GreaterEqual: '≥',\n  GreaterEqualLess: '⋛',\n  GreaterFullEqual: '≧',\n  GreaterGreater: '⪢',\n  GreaterLess: '≷',\n  GreaterSlantEqual: '⩾',\n  GreaterTilde: '≳',\n  Gscr: '𝒢',\n  Gt: '≫',\n  HARDcy: 'Ъ',\n  Hacek: 'ˇ',\n  Hat: '^',\n  Hcirc: 'Ĥ',\n  Hfr: 'ℌ',\n  HilbertSpace: 'ℋ',\n  Hopf: 'ℍ',\n  HorizontalLine: '─',\n  Hscr: 'ℋ',\n  Hstrok: 'Ħ',\n  HumpDownHump: '≎',\n  HumpEqual: '≏',\n  IEcy: 'Е',\n  IJlig: 'Ĳ',\n  IOcy: 'Ё',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Icy: 'И',\n  Idot: 'İ',\n  Ifr: 'ℑ',\n  Igrave: 'Ì',\n  Im: 'ℑ',\n  Imacr: 'Ī',\n  ImaginaryI: 'ⅈ',\n  Implies: '⇒',\n  Int: '∬',\n  Integral: '∫',\n  Intersection: '⋂',\n  InvisibleComma: '⁣',\n  InvisibleTimes: '⁢',\n  Iogon: 'Į',\n  Iopf: '𝕀',\n  Iota: 'Ι',\n  Iscr: 'ℐ',\n  Itilde: 'Ĩ',\n  Iukcy: 'І',\n  Iuml: 'Ï',\n  Jcirc: 'Ĵ',\n  Jcy: 'Й',\n  Jfr: '𝔍',\n  Jopf: '𝕁',\n  Jscr: '𝒥',\n  Jsercy: 'Ј',\n  Jukcy: 'Є',\n  KHcy: 'Х',\n  KJcy: 'Ќ',\n  Kappa: 'Κ',\n  Kcedil: 'Ķ',\n  Kcy: 'К',\n  Kfr: '𝔎',\n  Kopf: '𝕂',\n  Kscr: '𝒦',\n  LJcy: 'Љ',\n  LT: '<',\n  Lacute: 'Ĺ',\n  Lambda: 'Λ',\n  Lang: '⟪',\n  Laplacetrf: 'ℒ',\n  Larr: '↞',\n  Lcaron: 'Ľ',\n  Lcedil: 'Ļ',\n  Lcy: 'Л',\n  LeftAngleBracket: '⟨',\n  LeftArrow: '←',\n  LeftArrowBar: '⇤',\n  LeftArrowRightArrow: '⇆',\n  LeftCeiling: '⌈',\n  LeftDoubleBracket: '⟦',\n  LeftDownTeeVector: '⥡',\n  LeftDownVector: '⇃',\n  LeftDownVectorBar: '⥙',\n  LeftFloor: '⌊',\n  LeftRightArrow: '↔',\n  LeftRightVector: '⥎',\n  LeftTee: '⊣',\n  LeftTeeArrow: '↤',\n  LeftTeeVector: '⥚',\n  LeftTriangle: '⊲',\n  LeftTriangleBar: '⧏',\n  LeftTriangleEqual: '⊴',\n  LeftUpDownVector: '⥑',\n  LeftUpTeeVector: '⥠',\n  LeftUpVector: '↿',\n  LeftUpVectorBar: '⥘',\n  LeftVector: '↼',\n  LeftVectorBar: '⥒',\n  Leftarrow: '⇐',\n  Leftrightarrow: '⇔',\n  LessEqualGreater: '⋚',\n  LessFullEqual: '≦',\n  LessGreater: '≶',\n  LessLess: '⪡',\n  LessSlantEqual: '⩽',\n  LessTilde: '≲',\n  Lfr: '𝔏',\n  Ll: '⋘',\n  Lleftarrow: '⇚',\n  Lmidot: 'Ŀ',\n  LongLeftArrow: '⟵',\n  LongLeftRightArrow: '⟷',\n  LongRightArrow: '⟶',\n  Longleftarrow: '⟸',\n  Longleftrightarrow: '⟺',\n  Longrightarrow: '⟹',\n  Lopf: '𝕃',\n  LowerLeftArrow: '↙',\n  LowerRightArrow: '↘',\n  Lscr: 'ℒ',\n  Lsh: '↰',\n  Lstrok: 'Ł',\n  Lt: '≪',\n  Map: '⤅',\n  Mcy: 'М',\n  MediumSpace: ' ',\n  Mellintrf: 'ℳ',\n  Mfr: '𝔐',\n  MinusPlus: '∓',\n  Mopf: '𝕄',\n  Mscr: 'ℳ',\n  Mu: 'Μ',\n  NJcy: 'Њ',\n  Nacute: 'Ń',\n  Ncaron: 'Ň',\n  Ncedil: 'Ņ',\n  Ncy: 'Н',\n  NegativeMediumSpace: '​',\n  NegativeThickSpace: '​',\n  NegativeThinSpace: '​',\n  NegativeVeryThinSpace: '​',\n  NestedGreaterGreater: '≫',\n  NestedLessLess: '≪',\n  NewLine: '\\n',\n  Nfr: '𝔑',\n  NoBreak: '⁠',\n  NonBreakingSpace: ' ',\n  Nopf: 'ℕ',\n  Not: '⫬',\n  NotCongruent: '≢',\n  NotCupCap: '≭',\n  NotDoubleVerticalBar: '∦',\n  NotElement: '∉',\n  NotEqual: '≠',\n  NotEqualTilde: '≂̸',\n  NotExists: '∄',\n  NotGreater: '≯',\n  NotGreaterEqual: '≱',\n  NotGreaterFullEqual: '≧̸',\n  NotGreaterGreater: '≫̸',\n  NotGreaterLess: '≹',\n  NotGreaterSlantEqual: '⩾̸',\n  NotGreaterTilde: '≵',\n  NotHumpDownHump: '≎̸',\n  NotHumpEqual: '≏̸',\n  NotLeftTriangle: '⋪',\n  NotLeftTriangleBar: '⧏̸',\n  NotLeftTriangleEqual: '⋬',\n  NotLess: '≮',\n  NotLessEqual: '≰',\n  NotLessGreater: '≸',\n  NotLessLess: '≪̸',\n  NotLessSlantEqual: '⩽̸',\n  NotLessTilde: '≴',\n  NotNestedGreaterGreater: '⪢̸',\n  NotNestedLessLess: '⪡̸',\n  NotPrecedes: '⊀',\n  NotPrecedesEqual: '⪯̸',\n  NotPrecedesSlantEqual: '⋠',\n  NotReverseElement: '∌',\n  NotRightTriangle: '⋫',\n  NotRightTriangleBar: '⧐̸',\n  NotRightTriangleEqual: '⋭',\n  NotSquareSubset: '⊏̸',\n  NotSquareSubsetEqual: '⋢',\n  NotSquareSuperset: '⊐̸',\n  NotSquareSupersetEqual: '⋣',\n  NotSubset: '⊂⃒',\n  NotSubsetEqual: '⊈',\n  NotSucceeds: '⊁',\n  NotSucceedsEqual: '⪰̸',\n  NotSucceedsSlantEqual: '⋡',\n  NotSucceedsTilde: '≿̸',\n  NotSuperset: '⊃⃒',\n  NotSupersetEqual: '⊉',\n  NotTilde: '≁',\n  NotTildeEqual: '≄',\n  NotTildeFullEqual: '≇',\n  NotTildeTilde: '≉',\n  NotVerticalBar: '∤',\n  Nscr: '𝒩',\n  Ntilde: 'Ñ',\n  Nu: 'Ν',\n  OElig: 'Œ',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Ocy: 'О',\n  Odblac: 'Ő',\n  Ofr: '𝔒',\n  Ograve: 'Ò',\n  Omacr: 'Ō',\n  Omega: 'Ω',\n  Omicron: 'Ο',\n  Oopf: '𝕆',\n  OpenCurlyDoubleQuote: '“',\n  OpenCurlyQuote: '‘',\n  Or: '⩔',\n  Oscr: '𝒪',\n  Oslash: 'Ø',\n  Otilde: 'Õ',\n  Otimes: '⨷',\n  Ouml: 'Ö',\n  OverBar: '‾',\n  OverBrace: '⏞',\n  OverBracket: '⎴',\n  OverParenthesis: '⏜',\n  PartialD: '∂',\n  Pcy: 'П',\n  Pfr: '𝔓',\n  Phi: 'Φ',\n  Pi: 'Π',\n  PlusMinus: '±',\n  Poincareplane: 'ℌ',\n  Popf: 'ℙ',\n  Pr: '⪻',\n  Precedes: '≺',\n  PrecedesEqual: '⪯',\n  PrecedesSlantEqual: '≼',\n  PrecedesTilde: '≾',\n  Prime: '″',\n  Product: '∏',\n  Proportion: '∷',\n  Proportional: '∝',\n  Pscr: '𝒫',\n  Psi: 'Ψ',\n  QUOT: '\"',\n  Qfr: '𝔔',\n  Qopf: 'ℚ',\n  Qscr: '𝒬',\n  RBarr: '⤐',\n  REG: '®',\n  Racute: 'Ŕ',\n  Rang: '⟫',\n  Rarr: '↠',\n  Rarrtl: '⤖',\n  Rcaron: 'Ř',\n  Rcedil: 'Ŗ',\n  Rcy: 'Р',\n  Re: 'ℜ',\n  ReverseElement: '∋',\n  ReverseEquilibrium: '⇋',\n  ReverseUpEquilibrium: '⥯',\n  Rfr: 'ℜ',\n  Rho: 'Ρ',\n  RightAngleBracket: '⟩',\n  RightArrow: '→',\n  RightArrowBar: '⇥',\n  RightArrowLeftArrow: '⇄',\n  RightCeiling: '⌉',\n  RightDoubleBracket: '⟧',\n  RightDownTeeVector: '⥝',\n  RightDownVector: '⇂',\n  RightDownVectorBar: '⥕',\n  RightFloor: '⌋',\n  RightTee: '⊢',\n  RightTeeArrow: '↦',\n  RightTeeVector: '⥛',\n  RightTriangle: '⊳',\n  RightTriangleBar: '⧐',\n  RightTriangleEqual: '⊵',\n  RightUpDownVector: '⥏',\n  RightUpTeeVector: '⥜',\n  RightUpVector: '↾',\n  RightUpVectorBar: '⥔',\n  RightVector: '⇀',\n  RightVectorBar: '⥓',\n  Rightarrow: '⇒',\n  Ropf: 'ℝ',\n  RoundImplies: '⥰',\n  Rrightarrow: '⇛',\n  Rscr: 'ℛ',\n  Rsh: '↱',\n  RuleDelayed: '⧴',\n  SHCHcy: 'Щ',\n  SHcy: 'Ш',\n  SOFTcy: 'Ь',\n  Sacute: 'Ś',\n  Sc: '⪼',\n  Scaron: 'Š',\n  Scedil: 'Ş',\n  Scirc: 'Ŝ',\n  Scy: 'С',\n  Sfr: '𝔖',\n  ShortDownArrow: '↓',\n  ShortLeftArrow: '←',\n  ShortRightArrow: '→',\n  ShortUpArrow: '↑',\n  Sigma: 'Σ',\n  SmallCircle: '∘',\n  Sopf: '𝕊',\n  Sqrt: '√',\n  Square: '□',\n  SquareIntersection: '⊓',\n  SquareSubset: '⊏',\n  SquareSubsetEqual: '⊑',\n  SquareSuperset: '⊐',\n  SquareSupersetEqual: '⊒',\n  SquareUnion: '⊔',\n  Sscr: '𝒮',\n  Star: '⋆',\n  Sub: '⋐',\n  Subset: '⋐',\n  SubsetEqual: '⊆',\n  Succeeds: '≻',\n  SucceedsEqual: '⪰',\n  SucceedsSlantEqual: '≽',\n  SucceedsTilde: '≿',\n  SuchThat: '∋',\n  Sum: '∑',\n  Sup: '⋑',\n  Superset: '⊃',\n  SupersetEqual: '⊇',\n  Supset: '⋑',\n  THORN: 'Þ',\n  TRADE: '™',\n  TSHcy: 'Ћ',\n  TScy: 'Ц',\n  Tab: '\\t',\n  Tau: 'Τ',\n  Tcaron: 'Ť',\n  Tcedil: 'Ţ',\n  Tcy: 'Т',\n  Tfr: '𝔗',\n  Therefore: '∴',\n  Theta: 'Θ',\n  ThickSpace: '  ',\n  ThinSpace: ' ',\n  Tilde: '∼',\n  TildeEqual: '≃',\n  TildeFullEqual: '≅',\n  TildeTilde: '≈',\n  Topf: '𝕋',\n  TripleDot: '⃛',\n  Tscr: '𝒯',\n  Tstrok: 'Ŧ',\n  Uacute: 'Ú',\n  Uarr: '↟',\n  Uarrocir: '⥉',\n  Ubrcy: 'Ў',\n  Ubreve: 'Ŭ',\n  Ucirc: 'Û',\n  Ucy: 'У',\n  Udblac: 'Ű',\n  Ufr: '𝔘',\n  Ugrave: 'Ù',\n  Umacr: 'Ū',\n  UnderBar: '_',\n  UnderBrace: '⏟',\n  UnderBracket: '⎵',\n  UnderParenthesis: '⏝',\n  Union: '⋃',\n  UnionPlus: '⊎',\n  Uogon: 'Ų',\n  Uopf: '𝕌',\n  UpArrow: '↑',\n  UpArrowBar: '⤒',\n  UpArrowDownArrow: '⇅',\n  UpDownArrow: '↕',\n  UpEquilibrium: '⥮',\n  UpTee: '⊥',\n  UpTeeArrow: '↥',\n  Uparrow: '⇑',\n  Updownarrow: '⇕',\n  UpperLeftArrow: '↖',\n  UpperRightArrow: '↗',\n  Upsi: 'ϒ',\n  Upsilon: 'Υ',\n  Uring: 'Ů',\n  Uscr: '𝒰',\n  Utilde: 'Ũ',\n  Uuml: 'Ü',\n  VDash: '⊫',\n  Vbar: '⫫',\n  Vcy: 'В',\n  Vdash: '⊩',\n  Vdashl: '⫦',\n  Vee: '⋁',\n  Verbar: '‖',\n  Vert: '‖',\n  VerticalBar: '∣',\n  VerticalLine: '|',\n  VerticalSeparator: '❘',\n  VerticalTilde: '≀',\n  VeryThinSpace: ' ',\n  Vfr: '𝔙',\n  Vopf: '𝕍',\n  Vscr: '𝒱',\n  Vvdash: '⊪',\n  Wcirc: 'Ŵ',\n  Wedge: '⋀',\n  Wfr: '𝔚',\n  Wopf: '𝕎',\n  Wscr: '𝒲',\n  Xfr: '𝔛',\n  Xi: 'Ξ',\n  Xopf: '𝕏',\n  Xscr: '𝒳',\n  YAcy: 'Я',\n  YIcy: 'Ї',\n  YUcy: 'Ю',\n  Yacute: 'Ý',\n  Ycirc: 'Ŷ',\n  Ycy: 'Ы',\n  Yfr: '𝔜',\n  Yopf: '𝕐',\n  Yscr: '𝒴',\n  Yuml: 'Ÿ',\n  ZHcy: 'Ж',\n  Zacute: 'Ź',\n  Zcaron: 'Ž',\n  Zcy: 'З',\n  Zdot: 'Ż',\n  ZeroWidthSpace: '​',\n  Zeta: 'Ζ',\n  Zfr: 'ℨ',\n  Zopf: 'ℤ',\n  Zscr: '𝒵',\n  aacute: 'á',\n  abreve: 'ă',\n  ac: '∾',\n  acE: '∾̳',\n  acd: '∿',\n  acirc: 'â',\n  acute: '´',\n  acy: 'а',\n  aelig: 'æ',\n  af: '⁡',\n  afr: '𝔞',\n  agrave: 'à',\n  alefsym: 'ℵ',\n  aleph: 'ℵ',\n  alpha: 'α',\n  amacr: 'ā',\n  amalg: '⨿',\n  amp: '&',\n  and: '∧',\n  andand: '⩕',\n  andd: '⩜',\n  andslope: '⩘',\n  andv: '⩚',\n  ang: '∠',\n  ange: '⦤',\n  angle: '∠',\n  angmsd: '∡',\n  angmsdaa: '⦨',\n  angmsdab: '⦩',\n  angmsdac: '⦪',\n  angmsdad: '⦫',\n  angmsdae: '⦬',\n  angmsdaf: '⦭',\n  angmsdag: '⦮',\n  angmsdah: '⦯',\n  angrt: '∟',\n  angrtvb: '⊾',\n  angrtvbd: '⦝',\n  angsph: '∢',\n  angst: 'Å',\n  angzarr: '⍼',\n  aogon: 'ą',\n  aopf: '𝕒',\n  ap: '≈',\n  apE: '⩰',\n  apacir: '⩯',\n  ape: '≊',\n  apid: '≋',\n  apos: \"'\",\n  approx: '≈',\n  approxeq: '≊',\n  aring: 'å',\n  ascr: '𝒶',\n  ast: '*',\n  asymp: '≈',\n  asympeq: '≍',\n  atilde: 'ã',\n  auml: 'ä',\n  awconint: '∳',\n  awint: '⨑',\n  bNot: '⫭',\n  backcong: '≌',\n  backepsilon: '϶',\n  backprime: '‵',\n  backsim: '∽',\n  backsimeq: '⋍',\n  barvee: '⊽',\n  barwed: '⌅',\n  barwedge: '⌅',\n  bbrk: '⎵',\n  bbrktbrk: '⎶',\n  bcong: '≌',\n  bcy: 'б',\n  bdquo: '„',\n  becaus: '∵',\n  because: '∵',\n  bemptyv: '⦰',\n  bepsi: '϶',\n  bernou: 'ℬ',\n  beta: 'β',\n  beth: 'ℶ',\n  between: '≬',\n  bfr: '𝔟',\n  bigcap: '⋂',\n  bigcirc: '◯',\n  bigcup: '⋃',\n  bigodot: '⨀',\n  bigoplus: '⨁',\n  bigotimes: '⨂',\n  bigsqcup: '⨆',\n  bigstar: '★',\n  bigtriangledown: '▽',\n  bigtriangleup: '△',\n  biguplus: '⨄',\n  bigvee: '⋁',\n  bigwedge: '⋀',\n  bkarow: '⤍',\n  blacklozenge: '⧫',\n  blacksquare: '▪',\n  blacktriangle: '▴',\n  blacktriangledown: '▾',\n  blacktriangleleft: '◂',\n  blacktriangleright: '▸',\n  blank: '␣',\n  blk12: '▒',\n  blk14: '░',\n  blk34: '▓',\n  block: '█',\n  bne: '=⃥',\n  bnequiv: '≡⃥',\n  bnot: '⌐',\n  bopf: '𝕓',\n  bot: '⊥',\n  bottom: '⊥',\n  bowtie: '⋈',\n  boxDL: '╗',\n  boxDR: '╔',\n  boxDl: '╖',\n  boxDr: '╓',\n  boxH: '═',\n  boxHD: '╦',\n  boxHU: '╩',\n  boxHd: '╤',\n  boxHu: '╧',\n  boxUL: '╝',\n  boxUR: '╚',\n  boxUl: '╜',\n  boxUr: '╙',\n  boxV: '║',\n  boxVH: '╬',\n  boxVL: '╣',\n  boxVR: '╠',\n  boxVh: '╫',\n  boxVl: '╢',\n  boxVr: '╟',\n  boxbox: '⧉',\n  boxdL: '╕',\n  boxdR: '╒',\n  boxdl: '┐',\n  boxdr: '┌',\n  boxh: '─',\n  boxhD: '╥',\n  boxhU: '╨',\n  boxhd: '┬',\n  boxhu: '┴',\n  boxminus: '⊟',\n  boxplus: '⊞',\n  boxtimes: '⊠',\n  boxuL: '╛',\n  boxuR: '╘',\n  boxul: '┘',\n  boxur: '└',\n  boxv: '│',\n  boxvH: '╪',\n  boxvL: '╡',\n  boxvR: '╞',\n  boxvh: '┼',\n  boxvl: '┤',\n  boxvr: '├',\n  bprime: '‵',\n  breve: '˘',\n  brvbar: '¦',\n  bscr: '𝒷',\n  bsemi: '⁏',\n  bsim: '∽',\n  bsime: '⋍',\n  bsol: '\\\\',\n  bsolb: '⧅',\n  bsolhsub: '⟈',\n  bull: '•',\n  bullet: '•',\n  bump: '≎',\n  bumpE: '⪮',\n  bumpe: '≏',\n  bumpeq: '≏',\n  cacute: 'ć',\n  cap: '∩',\n  capand: '⩄',\n  capbrcup: '⩉',\n  capcap: '⩋',\n  capcup: '⩇',\n  capdot: '⩀',\n  caps: '∩︀',\n  caret: '⁁',\n  caron: 'ˇ',\n  ccaps: '⩍',\n  ccaron: 'č',\n  ccedil: 'ç',\n  ccirc: 'ĉ',\n  ccups: '⩌',\n  ccupssm: '⩐',\n  cdot: 'ċ',\n  cedil: '¸',\n  cemptyv: '⦲',\n  cent: '¢',\n  centerdot: '·',\n  cfr: '𝔠',\n  chcy: 'ч',\n  check: '✓',\n  checkmark: '✓',\n  chi: 'χ',\n  cir: '○',\n  cirE: '⧃',\n  circ: 'ˆ',\n  circeq: '≗',\n  circlearrowleft: '↺',\n  circlearrowright: '↻',\n  circledR: '®',\n  circledS: 'Ⓢ',\n  circledast: '⊛',\n  circledcirc: '⊚',\n  circleddash: '⊝',\n  cire: '≗',\n  cirfnint: '⨐',\n  cirmid: '⫯',\n  cirscir: '⧂',\n  clubs: '♣',\n  clubsuit: '♣',\n  colon: ':',\n  colone: '≔',\n  coloneq: '≔',\n  comma: ',',\n  commat: '@',\n  comp: '∁',\n  compfn: '∘',\n  complement: '∁',\n  complexes: 'ℂ',\n  cong: '≅',\n  congdot: '⩭',\n  conint: '∮',\n  copf: '𝕔',\n  coprod: '∐',\n  copy: '©',\n  copysr: '℗',\n  crarr: '↵',\n  cross: '✗',\n  cscr: '𝒸',\n  csub: '⫏',\n  csube: '⫑',\n  csup: '⫐',\n  csupe: '⫒',\n  ctdot: '⋯',\n  cudarrl: '⤸',\n  cudarrr: '⤵',\n  cuepr: '⋞',\n  cuesc: '⋟',\n  cularr: '↶',\n  cularrp: '⤽',\n  cup: '∪',\n  cupbrcap: '⩈',\n  cupcap: '⩆',\n  cupcup: '⩊',\n  cupdot: '⊍',\n  cupor: '⩅',\n  cups: '∪︀',\n  curarr: '↷',\n  curarrm: '⤼',\n  curlyeqprec: '⋞',\n  curlyeqsucc: '⋟',\n  curlyvee: '⋎',\n  curlywedge: '⋏',\n  curren: '¤',\n  curvearrowleft: '↶',\n  curvearrowright: '↷',\n  cuvee: '⋎',\n  cuwed: '⋏',\n  cwconint: '∲',\n  cwint: '∱',\n  cylcty: '⌭',\n  dArr: '⇓',\n  dHar: '⥥',\n  dagger: '†',\n  daleth: 'ℸ',\n  darr: '↓',\n  dash: '‐',\n  dashv: '⊣',\n  dbkarow: '⤏',\n  dblac: '˝',\n  dcaron: 'ď',\n  dcy: 'д',\n  dd: 'ⅆ',\n  ddagger: '‡',\n  ddarr: '⇊',\n  ddotseq: '⩷',\n  deg: '°',\n  delta: 'δ',\n  demptyv: '⦱',\n  dfisht: '⥿',\n  dfr: '𝔡',\n  dharl: '⇃',\n  dharr: '⇂',\n  diam: '⋄',\n  diamond: '⋄',\n  diamondsuit: '♦',\n  diams: '♦',\n  die: '¨',\n  digamma: 'ϝ',\n  disin: '⋲',\n  div: '÷',\n  divide: '÷',\n  divideontimes: '⋇',\n  divonx: '⋇',\n  djcy: 'ђ',\n  dlcorn: '⌞',\n  dlcrop: '⌍',\n  dollar: '$',\n  dopf: '𝕕',\n  dot: '˙',\n  doteq: '≐',\n  doteqdot: '≑',\n  dotminus: '∸',\n  dotplus: '∔',\n  dotsquare: '⊡',\n  doublebarwedge: '⌆',\n  downarrow: '↓',\n  downdownarrows: '⇊',\n  downharpoonleft: '⇃',\n  downharpoonright: '⇂',\n  drbkarow: '⤐',\n  drcorn: '⌟',\n  drcrop: '⌌',\n  dscr: '𝒹',\n  dscy: 'ѕ',\n  dsol: '⧶',\n  dstrok: 'đ',\n  dtdot: '⋱',\n  dtri: '▿',\n  dtrif: '▾',\n  duarr: '⇵',\n  duhar: '⥯',\n  dwangle: '⦦',\n  dzcy: 'џ',\n  dzigrarr: '⟿',\n  eDDot: '⩷',\n  eDot: '≑',\n  eacute: 'é',\n  easter: '⩮',\n  ecaron: 'ě',\n  ecir: '≖',\n  ecirc: 'ê',\n  ecolon: '≕',\n  ecy: 'э',\n  edot: 'ė',\n  ee: 'ⅇ',\n  efDot: '≒',\n  efr: '𝔢',\n  eg: '⪚',\n  egrave: 'è',\n  egs: '⪖',\n  egsdot: '⪘',\n  el: '⪙',\n  elinters: '⏧',\n  ell: 'ℓ',\n  els: '⪕',\n  elsdot: '⪗',\n  emacr: 'ē',\n  empty: '∅',\n  emptyset: '∅',\n  emptyv: '∅',\n  emsp13: ' ',\n  emsp14: ' ',\n  emsp: ' ',\n  eng: 'ŋ',\n  ensp: ' ',\n  eogon: 'ę',\n  eopf: '𝕖',\n  epar: '⋕',\n  eparsl: '⧣',\n  eplus: '⩱',\n  epsi: 'ε',\n  epsilon: 'ε',\n  epsiv: 'ϵ',\n  eqcirc: '≖',\n  eqcolon: '≕',\n  eqsim: '≂',\n  eqslantgtr: '⪖',\n  eqslantless: '⪕',\n  equals: '=',\n  equest: '≟',\n  equiv: '≡',\n  equivDD: '⩸',\n  eqvparsl: '⧥',\n  erDot: '≓',\n  erarr: '⥱',\n  escr: 'ℯ',\n  esdot: '≐',\n  esim: '≂',\n  eta: 'η',\n  eth: 'ð',\n  euml: 'ë',\n  euro: '€',\n  excl: '!',\n  exist: '∃',\n  expectation: 'ℰ',\n  exponentiale: 'ⅇ',\n  fallingdotseq: '≒',\n  fcy: 'ф',\n  female: '♀',\n  ffilig: 'ﬃ',\n  fflig: 'ﬀ',\n  ffllig: 'ﬄ',\n  ffr: '𝔣',\n  filig: 'ﬁ',\n  fjlig: 'fj',\n  flat: '♭',\n  fllig: 'ﬂ',\n  fltns: '▱',\n  fnof: 'ƒ',\n  fopf: '𝕗',\n  forall: '∀',\n  fork: '⋔',\n  forkv: '⫙',\n  fpartint: '⨍',\n  frac12: '½',\n  frac13: '⅓',\n  frac14: '¼',\n  frac15: '⅕',\n  frac16: '⅙',\n  frac18: '⅛',\n  frac23: '⅔',\n  frac25: '⅖',\n  frac34: '¾',\n  frac35: '⅗',\n  frac38: '⅜',\n  frac45: '⅘',\n  frac56: '⅚',\n  frac58: '⅝',\n  frac78: '⅞',\n  frasl: '⁄',\n  frown: '⌢',\n  fscr: '𝒻',\n  gE: '≧',\n  gEl: '⪌',\n  gacute: 'ǵ',\n  gamma: 'γ',\n  gammad: 'ϝ',\n  gap: '⪆',\n  gbreve: 'ğ',\n  gcirc: 'ĝ',\n  gcy: 'г',\n  gdot: 'ġ',\n  ge: '≥',\n  gel: '⋛',\n  geq: '≥',\n  geqq: '≧',\n  geqslant: '⩾',\n  ges: '⩾',\n  gescc: '⪩',\n  gesdot: '⪀',\n  gesdoto: '⪂',\n  gesdotol: '⪄',\n  gesl: '⋛︀',\n  gesles: '⪔',\n  gfr: '𝔤',\n  gg: '≫',\n  ggg: '⋙',\n  gimel: 'ℷ',\n  gjcy: 'ѓ',\n  gl: '≷',\n  glE: '⪒',\n  gla: '⪥',\n  glj: '⪤',\n  gnE: '≩',\n  gnap: '⪊',\n  gnapprox: '⪊',\n  gne: '⪈',\n  gneq: '⪈',\n  gneqq: '≩',\n  gnsim: '⋧',\n  gopf: '𝕘',\n  grave: '`',\n  gscr: 'ℊ',\n  gsim: '≳',\n  gsime: '⪎',\n  gsiml: '⪐',\n  gt: '>',\n  gtcc: '⪧',\n  gtcir: '⩺',\n  gtdot: '⋗',\n  gtlPar: '⦕',\n  gtquest: '⩼',\n  gtrapprox: '⪆',\n  gtrarr: '⥸',\n  gtrdot: '⋗',\n  gtreqless: '⋛',\n  gtreqqless: '⪌',\n  gtrless: '≷',\n  gtrsim: '≳',\n  gvertneqq: '≩︀',\n  gvnE: '≩︀',\n  hArr: '⇔',\n  hairsp: ' ',\n  half: '½',\n  hamilt: 'ℋ',\n  hardcy: 'ъ',\n  harr: '↔',\n  harrcir: '⥈',\n  harrw: '↭',\n  hbar: 'ℏ',\n  hcirc: 'ĥ',\n  hearts: '♥',\n  heartsuit: '♥',\n  hellip: '…',\n  hercon: '⊹',\n  hfr: '𝔥',\n  hksearow: '⤥',\n  hkswarow: '⤦',\n  hoarr: '⇿',\n  homtht: '∻',\n  hookleftarrow: '↩',\n  hookrightarrow: '↪',\n  hopf: '𝕙',\n  horbar: '―',\n  hscr: '𝒽',\n  hslash: 'ℏ',\n  hstrok: 'ħ',\n  hybull: '⁃',\n  hyphen: '‐',\n  iacute: 'í',\n  ic: '⁣',\n  icirc: 'î',\n  icy: 'и',\n  iecy: 'е',\n  iexcl: '¡',\n  iff: '⇔',\n  ifr: '𝔦',\n  igrave: 'ì',\n  ii: 'ⅈ',\n  iiiint: '⨌',\n  iiint: '∭',\n  iinfin: '⧜',\n  iiota: '℩',\n  ijlig: 'ĳ',\n  imacr: 'ī',\n  image: 'ℑ',\n  imagline: 'ℐ',\n  imagpart: 'ℑ',\n  imath: 'ı',\n  imof: '⊷',\n  imped: 'Ƶ',\n  in: '∈',\n  incare: '℅',\n  infin: '∞',\n  infintie: '⧝',\n  inodot: 'ı',\n  int: '∫',\n  intcal: '⊺',\n  integers: 'ℤ',\n  intercal: '⊺',\n  intlarhk: '⨗',\n  intprod: '⨼',\n  iocy: 'ё',\n  iogon: 'į',\n  iopf: '𝕚',\n  iota: 'ι',\n  iprod: '⨼',\n  iquest: '¿',\n  iscr: '𝒾',\n  isin: '∈',\n  isinE: '⋹',\n  isindot: '⋵',\n  isins: '⋴',\n  isinsv: '⋳',\n  isinv: '∈',\n  it: '⁢',\n  itilde: 'ĩ',\n  iukcy: 'і',\n  iuml: 'ï',\n  jcirc: 'ĵ',\n  jcy: 'й',\n  jfr: '𝔧',\n  jmath: 'ȷ',\n  jopf: '𝕛',\n  jscr: '𝒿',\n  jsercy: 'ј',\n  jukcy: 'є',\n  kappa: 'κ',\n  kappav: 'ϰ',\n  kcedil: 'ķ',\n  kcy: 'к',\n  kfr: '𝔨',\n  kgreen: 'ĸ',\n  khcy: 'х',\n  kjcy: 'ќ',\n  kopf: '𝕜',\n  kscr: '𝓀',\n  lAarr: '⇚',\n  lArr: '⇐',\n  lAtail: '⤛',\n  lBarr: '⤎',\n  lE: '≦',\n  lEg: '⪋',\n  lHar: '⥢',\n  lacute: 'ĺ',\n  laemptyv: '⦴',\n  lagran: 'ℒ',\n  lambda: 'λ',\n  lang: '⟨',\n  langd: '⦑',\n  langle: '⟨',\n  lap: '⪅',\n  laquo: '«',\n  larr: '←',\n  larrb: '⇤',\n  larrbfs: '⤟',\n  larrfs: '⤝',\n  larrhk: '↩',\n  larrlp: '↫',\n  larrpl: '⤹',\n  larrsim: '⥳',\n  larrtl: '↢',\n  lat: '⪫',\n  latail: '⤙',\n  late: '⪭',\n  lates: '⪭︀',\n  lbarr: '⤌',\n  lbbrk: '❲',\n  lbrace: '{',\n  lbrack: '[',\n  lbrke: '⦋',\n  lbrksld: '⦏',\n  lbrkslu: '⦍',\n  lcaron: 'ľ',\n  lcedil: 'ļ',\n  lceil: '⌈',\n  lcub: '{',\n  lcy: 'л',\n  ldca: '⤶',\n  ldquo: '“',\n  ldquor: '„',\n  ldrdhar: '⥧',\n  ldrushar: '⥋',\n  ldsh: '↲',\n  le: '≤',\n  leftarrow: '←',\n  leftarrowtail: '↢',\n  leftharpoondown: '↽',\n  leftharpoonup: '↼',\n  leftleftarrows: '⇇',\n  leftrightarrow: '↔',\n  leftrightarrows: '⇆',\n  leftrightharpoons: '⇋',\n  leftrightsquigarrow: '↭',\n  leftthreetimes: '⋋',\n  leg: '⋚',\n  leq: '≤',\n  leqq: '≦',\n  leqslant: '⩽',\n  les: '⩽',\n  lescc: '⪨',\n  lesdot: '⩿',\n  lesdoto: '⪁',\n  lesdotor: '⪃',\n  lesg: '⋚︀',\n  lesges: '⪓',\n  lessapprox: '⪅',\n  lessdot: '⋖',\n  lesseqgtr: '⋚',\n  lesseqqgtr: '⪋',\n  lessgtr: '≶',\n  lesssim: '≲',\n  lfisht: '⥼',\n  lfloor: '⌊',\n  lfr: '𝔩',\n  lg: '≶',\n  lgE: '⪑',\n  lhard: '↽',\n  lharu: '↼',\n  lharul: '⥪',\n  lhblk: '▄',\n  ljcy: 'љ',\n  ll: '≪',\n  llarr: '⇇',\n  llcorner: '⌞',\n  llhard: '⥫',\n  lltri: '◺',\n  lmidot: 'ŀ',\n  lmoust: '⎰',\n  lmoustache: '⎰',\n  lnE: '≨',\n  lnap: '⪉',\n  lnapprox: '⪉',\n  lne: '⪇',\n  lneq: '⪇',\n  lneqq: '≨',\n  lnsim: '⋦',\n  loang: '⟬',\n  loarr: '⇽',\n  lobrk: '⟦',\n  longleftarrow: '⟵',\n  longleftrightarrow: '⟷',\n  longmapsto: '⟼',\n  longrightarrow: '⟶',\n  looparrowleft: '↫',\n  looparrowright: '↬',\n  lopar: '⦅',\n  lopf: '𝕝',\n  loplus: '⨭',\n  lotimes: '⨴',\n  lowast: '∗',\n  lowbar: '_',\n  loz: '◊',\n  lozenge: '◊',\n  lozf: '⧫',\n  lpar: '(',\n  lparlt: '⦓',\n  lrarr: '⇆',\n  lrcorner: '⌟',\n  lrhar: '⇋',\n  lrhard: '⥭',\n  lrm: '‎',\n  lrtri: '⊿',\n  lsaquo: '‹',\n  lscr: '𝓁',\n  lsh: '↰',\n  lsim: '≲',\n  lsime: '⪍',\n  lsimg: '⪏',\n  lsqb: '[',\n  lsquo: '‘',\n  lsquor: '‚',\n  lstrok: 'ł',\n  lt: '<',\n  ltcc: '⪦',\n  ltcir: '⩹',\n  ltdot: '⋖',\n  lthree: '⋋',\n  ltimes: '⋉',\n  ltlarr: '⥶',\n  ltquest: '⩻',\n  ltrPar: '⦖',\n  ltri: '◃',\n  ltrie: '⊴',\n  ltrif: '◂',\n  lurdshar: '⥊',\n  luruhar: '⥦',\n  lvertneqq: '≨︀',\n  lvnE: '≨︀',\n  mDDot: '∺',\n  macr: '¯',\n  male: '♂',\n  malt: '✠',\n  maltese: '✠',\n  map: '↦',\n  mapsto: '↦',\n  mapstodown: '↧',\n  mapstoleft: '↤',\n  mapstoup: '↥',\n  marker: '▮',\n  mcomma: '⨩',\n  mcy: 'м',\n  mdash: '—',\n  measuredangle: '∡',\n  mfr: '𝔪',\n  mho: '℧',\n  micro: 'µ',\n  mid: '∣',\n  midast: '*',\n  midcir: '⫰',\n  middot: '·',\n  minus: '−',\n  minusb: '⊟',\n  minusd: '∸',\n  minusdu: '⨪',\n  mlcp: '⫛',\n  mldr: '…',\n  mnplus: '∓',\n  models: '⊧',\n  mopf: '𝕞',\n  mp: '∓',\n  mscr: '𝓂',\n  mstpos: '∾',\n  mu: 'μ',\n  multimap: '⊸',\n  mumap: '⊸',\n  nGg: '⋙̸',\n  nGt: '≫⃒',\n  nGtv: '≫̸',\n  nLeftarrow: '⇍',\n  nLeftrightarrow: '⇎',\n  nLl: '⋘̸',\n  nLt: '≪⃒',\n  nLtv: '≪̸',\n  nRightarrow: '⇏',\n  nVDash: '⊯',\n  nVdash: '⊮',\n  nabla: '∇',\n  nacute: 'ń',\n  nang: '∠⃒',\n  nap: '≉',\n  napE: '⩰̸',\n  napid: '≋̸',\n  napos: 'ŉ',\n  napprox: '≉',\n  natur: '♮',\n  natural: '♮',\n  naturals: 'ℕ',\n  nbsp: ' ',\n  nbump: '≎̸',\n  nbumpe: '≏̸',\n  ncap: '⩃',\n  ncaron: 'ň',\n  ncedil: 'ņ',\n  ncong: '≇',\n  ncongdot: '⩭̸',\n  ncup: '⩂',\n  ncy: 'н',\n  ndash: '–',\n  ne: '≠',\n  neArr: '⇗',\n  nearhk: '⤤',\n  nearr: '↗',\n  nearrow: '↗',\n  nedot: '≐̸',\n  nequiv: '≢',\n  nesear: '⤨',\n  nesim: '≂̸',\n  nexist: '∄',\n  nexists: '∄',\n  nfr: '𝔫',\n  ngE: '≧̸',\n  nge: '≱',\n  ngeq: '≱',\n  ngeqq: '≧̸',\n  ngeqslant: '⩾̸',\n  nges: '⩾̸',\n  ngsim: '≵',\n  ngt: '≯',\n  ngtr: '≯',\n  nhArr: '⇎',\n  nharr: '↮',\n  nhpar: '⫲',\n  ni: '∋',\n  nis: '⋼',\n  nisd: '⋺',\n  niv: '∋',\n  njcy: 'њ',\n  nlArr: '⇍',\n  nlE: '≦̸',\n  nlarr: '↚',\n  nldr: '‥',\n  nle: '≰',\n  nleftarrow: '↚',\n  nleftrightarrow: '↮',\n  nleq: '≰',\n  nleqq: '≦̸',\n  nleqslant: '⩽̸',\n  nles: '⩽̸',\n  nless: '≮',\n  nlsim: '≴',\n  nlt: '≮',\n  nltri: '⋪',\n  nltrie: '⋬',\n  nmid: '∤',\n  nopf: '𝕟',\n  not: '¬',\n  notin: '∉',\n  notinE: '⋹̸',\n  notindot: '⋵̸',\n  notinva: '∉',\n  notinvb: '⋷',\n  notinvc: '⋶',\n  notni: '∌',\n  notniva: '∌',\n  notnivb: '⋾',\n  notnivc: '⋽',\n  npar: '∦',\n  nparallel: '∦',\n  nparsl: '⫽⃥',\n  npart: '∂̸',\n  npolint: '⨔',\n  npr: '⊀',\n  nprcue: '⋠',\n  npre: '⪯̸',\n  nprec: '⊀',\n  npreceq: '⪯̸',\n  nrArr: '⇏',\n  nrarr: '↛',\n  nrarrc: '⤳̸',\n  nrarrw: '↝̸',\n  nrightarrow: '↛',\n  nrtri: '⋫',\n  nrtrie: '⋭',\n  nsc: '⊁',\n  nsccue: '⋡',\n  nsce: '⪰̸',\n  nscr: '𝓃',\n  nshortmid: '∤',\n  nshortparallel: '∦',\n  nsim: '≁',\n  nsime: '≄',\n  nsimeq: '≄',\n  nsmid: '∤',\n  nspar: '∦',\n  nsqsube: '⋢',\n  nsqsupe: '⋣',\n  nsub: '⊄',\n  nsubE: '⫅̸',\n  nsube: '⊈',\n  nsubset: '⊂⃒',\n  nsubseteq: '⊈',\n  nsubseteqq: '⫅̸',\n  nsucc: '⊁',\n  nsucceq: '⪰̸',\n  nsup: '⊅',\n  nsupE: '⫆̸',\n  nsupe: '⊉',\n  nsupset: '⊃⃒',\n  nsupseteq: '⊉',\n  nsupseteqq: '⫆̸',\n  ntgl: '≹',\n  ntilde: 'ñ',\n  ntlg: '≸',\n  ntriangleleft: '⋪',\n  ntrianglelefteq: '⋬',\n  ntriangleright: '⋫',\n  ntrianglerighteq: '⋭',\n  nu: 'ν',\n  num: '#',\n  numero: '№',\n  numsp: ' ',\n  nvDash: '⊭',\n  nvHarr: '⤄',\n  nvap: '≍⃒',\n  nvdash: '⊬',\n  nvge: '≥⃒',\n  nvgt: '>⃒',\n  nvinfin: '⧞',\n  nvlArr: '⤂',\n  nvle: '≤⃒',\n  nvlt: '<⃒',\n  nvltrie: '⊴⃒',\n  nvrArr: '⤃',\n  nvrtrie: '⊵⃒',\n  nvsim: '∼⃒',\n  nwArr: '⇖',\n  nwarhk: '⤣',\n  nwarr: '↖',\n  nwarrow: '↖',\n  nwnear: '⤧',\n  oS: 'Ⓢ',\n  oacute: 'ó',\n  oast: '⊛',\n  ocir: '⊚',\n  ocirc: 'ô',\n  ocy: 'о',\n  odash: '⊝',\n  odblac: 'ő',\n  odiv: '⨸',\n  odot: '⊙',\n  odsold: '⦼',\n  oelig: 'œ',\n  ofcir: '⦿',\n  ofr: '𝔬',\n  ogon: '˛',\n  ograve: 'ò',\n  ogt: '⧁',\n  ohbar: '⦵',\n  ohm: 'Ω',\n  oint: '∮',\n  olarr: '↺',\n  olcir: '⦾',\n  olcross: '⦻',\n  oline: '‾',\n  olt: '⧀',\n  omacr: 'ō',\n  omega: 'ω',\n  omicron: 'ο',\n  omid: '⦶',\n  ominus: '⊖',\n  oopf: '𝕠',\n  opar: '⦷',\n  operp: '⦹',\n  oplus: '⊕',\n  or: '∨',\n  orarr: '↻',\n  ord: '⩝',\n  order: 'ℴ',\n  orderof: 'ℴ',\n  ordf: 'ª',\n  ordm: 'º',\n  origof: '⊶',\n  oror: '⩖',\n  orslope: '⩗',\n  orv: '⩛',\n  oscr: 'ℴ',\n  oslash: 'ø',\n  osol: '⊘',\n  otilde: 'õ',\n  otimes: '⊗',\n  otimesas: '⨶',\n  ouml: 'ö',\n  ovbar: '⌽',\n  par: '∥',\n  para: '¶',\n  parallel: '∥',\n  parsim: '⫳',\n  parsl: '⫽',\n  part: '∂',\n  pcy: 'п',\n  percnt: '%',\n  period: '.',\n  permil: '‰',\n  perp: '⊥',\n  pertenk: '‱',\n  pfr: '𝔭',\n  phi: 'φ',\n  phiv: 'ϕ',\n  phmmat: 'ℳ',\n  phone: '☎',\n  pi: 'π',\n  pitchfork: '⋔',\n  piv: 'ϖ',\n  planck: 'ℏ',\n  planckh: 'ℎ',\n  plankv: 'ℏ',\n  plus: '+',\n  plusacir: '⨣',\n  plusb: '⊞',\n  pluscir: '⨢',\n  plusdo: '∔',\n  plusdu: '⨥',\n  pluse: '⩲',\n  plusmn: '±',\n  plussim: '⨦',\n  plustwo: '⨧',\n  pm: '±',\n  pointint: '⨕',\n  popf: '𝕡',\n  pound: '£',\n  pr: '≺',\n  prE: '⪳',\n  prap: '⪷',\n  prcue: '≼',\n  pre: '⪯',\n  prec: '≺',\n  precapprox: '⪷',\n  preccurlyeq: '≼',\n  preceq: '⪯',\n  precnapprox: '⪹',\n  precneqq: '⪵',\n  precnsim: '⋨',\n  precsim: '≾',\n  prime: '′',\n  primes: 'ℙ',\n  prnE: '⪵',\n  prnap: '⪹',\n  prnsim: '⋨',\n  prod: '∏',\n  profalar: '⌮',\n  profline: '⌒',\n  profsurf: '⌓',\n  prop: '∝',\n  propto: '∝',\n  prsim: '≾',\n  prurel: '⊰',\n  pscr: '𝓅',\n  psi: 'ψ',\n  puncsp: ' ',\n  qfr: '𝔮',\n  qint: '⨌',\n  qopf: '𝕢',\n  qprime: '⁗',\n  qscr: '𝓆',\n  quaternions: 'ℍ',\n  quatint: '⨖',\n  quest: '?',\n  questeq: '≟',\n  quot: '\"',\n  rAarr: '⇛',\n  rArr: '⇒',\n  rAtail: '⤜',\n  rBarr: '⤏',\n  rHar: '⥤',\n  race: '∽̱',\n  racute: 'ŕ',\n  radic: '√',\n  raemptyv: '⦳',\n  rang: '⟩',\n  rangd: '⦒',\n  range: '⦥',\n  rangle: '⟩',\n  raquo: '»',\n  rarr: '→',\n  rarrap: '⥵',\n  rarrb: '⇥',\n  rarrbfs: '⤠',\n  rarrc: '⤳',\n  rarrfs: '⤞',\n  rarrhk: '↪',\n  rarrlp: '↬',\n  rarrpl: '⥅',\n  rarrsim: '⥴',\n  rarrtl: '↣',\n  rarrw: '↝',\n  ratail: '⤚',\n  ratio: '∶',\n  rationals: 'ℚ',\n  rbarr: '⤍',\n  rbbrk: '❳',\n  rbrace: '}',\n  rbrack: ']',\n  rbrke: '⦌',\n  rbrksld: '⦎',\n  rbrkslu: '⦐',\n  rcaron: 'ř',\n  rcedil: 'ŗ',\n  rceil: '⌉',\n  rcub: '}',\n  rcy: 'р',\n  rdca: '⤷',\n  rdldhar: '⥩',\n  rdquo: '”',\n  rdquor: '”',\n  rdsh: '↳',\n  real: 'ℜ',\n  realine: 'ℛ',\n  realpart: 'ℜ',\n  reals: 'ℝ',\n  rect: '▭',\n  reg: '®',\n  rfisht: '⥽',\n  rfloor: '⌋',\n  rfr: '𝔯',\n  rhard: '⇁',\n  rharu: '⇀',\n  rharul: '⥬',\n  rho: 'ρ',\n  rhov: 'ϱ',\n  rightarrow: '→',\n  rightarrowtail: '↣',\n  rightharpoondown: '⇁',\n  rightharpoonup: '⇀',\n  rightleftarrows: '⇄',\n  rightleftharpoons: '⇌',\n  rightrightarrows: '⇉',\n  rightsquigarrow: '↝',\n  rightthreetimes: '⋌',\n  ring: '˚',\n  risingdotseq: '≓',\n  rlarr: '⇄',\n  rlhar: '⇌',\n  rlm: '‏',\n  rmoust: '⎱',\n  rmoustache: '⎱',\n  rnmid: '⫮',\n  roang: '⟭',\n  roarr: '⇾',\n  robrk: '⟧',\n  ropar: '⦆',\n  ropf: '𝕣',\n  roplus: '⨮',\n  rotimes: '⨵',\n  rpar: ')',\n  rpargt: '⦔',\n  rppolint: '⨒',\n  rrarr: '⇉',\n  rsaquo: '›',\n  rscr: '𝓇',\n  rsh: '↱',\n  rsqb: ']',\n  rsquo: '’',\n  rsquor: '’',\n  rthree: '⋌',\n  rtimes: '⋊',\n  rtri: '▹',\n  rtrie: '⊵',\n  rtrif: '▸',\n  rtriltri: '⧎',\n  ruluhar: '⥨',\n  rx: '℞',\n  sacute: 'ś',\n  sbquo: '‚',\n  sc: '≻',\n  scE: '⪴',\n  scap: '⪸',\n  scaron: 'š',\n  sccue: '≽',\n  sce: '⪰',\n  scedil: 'ş',\n  scirc: 'ŝ',\n  scnE: '⪶',\n  scnap: '⪺',\n  scnsim: '⋩',\n  scpolint: '⨓',\n  scsim: '≿',\n  scy: 'с',\n  sdot: '⋅',\n  sdotb: '⊡',\n  sdote: '⩦',\n  seArr: '⇘',\n  searhk: '⤥',\n  searr: '↘',\n  searrow: '↘',\n  sect: '§',\n  semi: ';',\n  seswar: '⤩',\n  setminus: '∖',\n  setmn: '∖',\n  sext: '✶',\n  sfr: '𝔰',\n  sfrown: '⌢',\n  sharp: '♯',\n  shchcy: 'щ',\n  shcy: 'ш',\n  shortmid: '∣',\n  shortparallel: '∥',\n  shy: '­',\n  sigma: 'σ',\n  sigmaf: 'ς',\n  sigmav: 'ς',\n  sim: '∼',\n  simdot: '⩪',\n  sime: '≃',\n  simeq: '≃',\n  simg: '⪞',\n  simgE: '⪠',\n  siml: '⪝',\n  simlE: '⪟',\n  simne: '≆',\n  simplus: '⨤',\n  simrarr: '⥲',\n  slarr: '←',\n  smallsetminus: '∖',\n  smashp: '⨳',\n  smeparsl: '⧤',\n  smid: '∣',\n  smile: '⌣',\n  smt: '⪪',\n  smte: '⪬',\n  smtes: '⪬︀',\n  softcy: 'ь',\n  sol: '/',\n  solb: '⧄',\n  solbar: '⌿',\n  sopf: '𝕤',\n  spades: '♠',\n  spadesuit: '♠',\n  spar: '∥',\n  sqcap: '⊓',\n  sqcaps: '⊓︀',\n  sqcup: '⊔',\n  sqcups: '⊔︀',\n  sqsub: '⊏',\n  sqsube: '⊑',\n  sqsubset: '⊏',\n  sqsubseteq: '⊑',\n  sqsup: '⊐',\n  sqsupe: '⊒',\n  sqsupset: '⊐',\n  sqsupseteq: '⊒',\n  squ: '□',\n  square: '□',\n  squarf: '▪',\n  squf: '▪',\n  srarr: '→',\n  sscr: '𝓈',\n  ssetmn: '∖',\n  ssmile: '⌣',\n  sstarf: '⋆',\n  star: '☆',\n  starf: '★',\n  straightepsilon: 'ϵ',\n  straightphi: 'ϕ',\n  strns: '¯',\n  sub: '⊂',\n  subE: '⫅',\n  subdot: '⪽',\n  sube: '⊆',\n  subedot: '⫃',\n  submult: '⫁',\n  subnE: '⫋',\n  subne: '⊊',\n  subplus: '⪿',\n  subrarr: '⥹',\n  subset: '⊂',\n  subseteq: '⊆',\n  subseteqq: '⫅',\n  subsetneq: '⊊',\n  subsetneqq: '⫋',\n  subsim: '⫇',\n  subsub: '⫕',\n  subsup: '⫓',\n  succ: '≻',\n  succapprox: '⪸',\n  succcurlyeq: '≽',\n  succeq: '⪰',\n  succnapprox: '⪺',\n  succneqq: '⪶',\n  succnsim: '⋩',\n  succsim: '≿',\n  sum: '∑',\n  sung: '♪',\n  sup1: '¹',\n  sup2: '²',\n  sup3: '³',\n  sup: '⊃',\n  supE: '⫆',\n  supdot: '⪾',\n  supdsub: '⫘',\n  supe: '⊇',\n  supedot: '⫄',\n  suphsol: '⟉',\n  suphsub: '⫗',\n  suplarr: '⥻',\n  supmult: '⫂',\n  supnE: '⫌',\n  supne: '⊋',\n  supplus: '⫀',\n  supset: '⊃',\n  supseteq: '⊇',\n  supseteqq: '⫆',\n  supsetneq: '⊋',\n  supsetneqq: '⫌',\n  supsim: '⫈',\n  supsub: '⫔',\n  supsup: '⫖',\n  swArr: '⇙',\n  swarhk: '⤦',\n  swarr: '↙',\n  swarrow: '↙',\n  swnwar: '⤪',\n  szlig: 'ß',\n  target: '⌖',\n  tau: 'τ',\n  tbrk: '⎴',\n  tcaron: 'ť',\n  tcedil: 'ţ',\n  tcy: 'т',\n  tdot: '⃛',\n  telrec: '⌕',\n  tfr: '𝔱',\n  there4: '∴',\n  therefore: '∴',\n  theta: 'θ',\n  thetasym: 'ϑ',\n  thetav: 'ϑ',\n  thickapprox: '≈',\n  thicksim: '∼',\n  thinsp: ' ',\n  thkap: '≈',\n  thksim: '∼',\n  thorn: 'þ',\n  tilde: '˜',\n  times: '×',\n  timesb: '⊠',\n  timesbar: '⨱',\n  timesd: '⨰',\n  tint: '∭',\n  toea: '⤨',\n  top: '⊤',\n  topbot: '⌶',\n  topcir: '⫱',\n  topf: '𝕥',\n  topfork: '⫚',\n  tosa: '⤩',\n  tprime: '‴',\n  trade: '™',\n  triangle: '▵',\n  triangledown: '▿',\n  triangleleft: '◃',\n  trianglelefteq: '⊴',\n  triangleq: '≜',\n  triangleright: '▹',\n  trianglerighteq: '⊵',\n  tridot: '◬',\n  trie: '≜',\n  triminus: '⨺',\n  triplus: '⨹',\n  trisb: '⧍',\n  tritime: '⨻',\n  trpezium: '⏢',\n  tscr: '𝓉',\n  tscy: 'ц',\n  tshcy: 'ћ',\n  tstrok: 'ŧ',\n  twixt: '≬',\n  twoheadleftarrow: '↞',\n  twoheadrightarrow: '↠',\n  uArr: '⇑',\n  uHar: '⥣',\n  uacute: 'ú',\n  uarr: '↑',\n  ubrcy: 'ў',\n  ubreve: 'ŭ',\n  ucirc: 'û',\n  ucy: 'у',\n  udarr: '⇅',\n  udblac: 'ű',\n  udhar: '⥮',\n  ufisht: '⥾',\n  ufr: '𝔲',\n  ugrave: 'ù',\n  uharl: '↿',\n  uharr: '↾',\n  uhblk: '▀',\n  ulcorn: '⌜',\n  ulcorner: '⌜',\n  ulcrop: '⌏',\n  ultri: '◸',\n  umacr: 'ū',\n  uml: '¨',\n  uogon: 'ų',\n  uopf: '𝕦',\n  uparrow: '↑',\n  updownarrow: '↕',\n  upharpoonleft: '↿',\n  upharpoonright: '↾',\n  uplus: '⊎',\n  upsi: 'υ',\n  upsih: 'ϒ',\n  upsilon: 'υ',\n  upuparrows: '⇈',\n  urcorn: '⌝',\n  urcorner: '⌝',\n  urcrop: '⌎',\n  uring: 'ů',\n  urtri: '◹',\n  uscr: '𝓊',\n  utdot: '⋰',\n  utilde: 'ũ',\n  utri: '▵',\n  utrif: '▴',\n  uuarr: '⇈',\n  uuml: 'ü',\n  uwangle: '⦧',\n  vArr: '⇕',\n  vBar: '⫨',\n  vBarv: '⫩',\n  vDash: '⊨',\n  vangrt: '⦜',\n  varepsilon: 'ϵ',\n  varkappa: 'ϰ',\n  varnothing: '∅',\n  varphi: 'ϕ',\n  varpi: 'ϖ',\n  varpropto: '∝',\n  varr: '↕',\n  varrho: 'ϱ',\n  varsigma: 'ς',\n  varsubsetneq: '⊊︀',\n  varsubsetneqq: '⫋︀',\n  varsupsetneq: '⊋︀',\n  varsupsetneqq: '⫌︀',\n  vartheta: 'ϑ',\n  vartriangleleft: '⊲',\n  vartriangleright: '⊳',\n  vcy: 'в',\n  vdash: '⊢',\n  vee: '∨',\n  veebar: '⊻',\n  veeeq: '≚',\n  vellip: '⋮',\n  verbar: '|',\n  vert: '|',\n  vfr: '𝔳',\n  vltri: '⊲',\n  vnsub: '⊂⃒',\n  vnsup: '⊃⃒',\n  vopf: '𝕧',\n  vprop: '∝',\n  vrtri: '⊳',\n  vscr: '𝓋',\n  vsubnE: '⫋︀',\n  vsubne: '⊊︀',\n  vsupnE: '⫌︀',\n  vsupne: '⊋︀',\n  vzigzag: '⦚',\n  wcirc: 'ŵ',\n  wedbar: '⩟',\n  wedge: '∧',\n  wedgeq: '≙',\n  weierp: '℘',\n  wfr: '𝔴',\n  wopf: '𝕨',\n  wp: '℘',\n  wr: '≀',\n  wreath: '≀',\n  wscr: '𝓌',\n  xcap: '⋂',\n  xcirc: '◯',\n  xcup: '⋃',\n  xdtri: '▽',\n  xfr: '𝔵',\n  xhArr: '⟺',\n  xharr: '⟷',\n  xi: 'ξ',\n  xlArr: '⟸',\n  xlarr: '⟵',\n  xmap: '⟼',\n  xnis: '⋻',\n  xodot: '⨀',\n  xopf: '𝕩',\n  xoplus: '⨁',\n  xotime: '⨂',\n  xrArr: '⟹',\n  xrarr: '⟶',\n  xscr: '𝓍',\n  xsqcup: '⨆',\n  xuplus: '⨄',\n  xutri: '△',\n  xvee: '⋁',\n  xwedge: '⋀',\n  yacute: 'ý',\n  yacy: 'я',\n  ycirc: 'ŷ',\n  ycy: 'ы',\n  yen: '¥',\n  yfr: '𝔶',\n  yicy: 'ї',\n  yopf: '𝕪',\n  yscr: '𝓎',\n  yucy: 'ю',\n  yuml: 'ÿ',\n  zacute: 'ź',\n  zcaron: 'ž',\n  zcy: 'з',\n  zdot: 'ż',\n  zeetrf: 'ℨ',\n  zeta: 'ζ',\n  zfr: '𝔷',\n  zhcy: 'ж',\n  zigrarr: '⇝',\n  zopf: '𝕫',\n  zscr: '𝓏',\n  zwj: '‍',\n  zwnj: '‌'\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","export {stringifyPosition} from './lib/index.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","createText","_mermaidB0Ad2De1Js","_mdastUtilFromMarkdown","_tsDedent","createTspan","textElement","lineIndex","lineHeight","append","attr","computeWidthOfText","parentNode","text","testElement","testSpan","updateTextContentAndStyles","content","type","textLength","node","getComputedTextLength","remove","tspan","wrappedLine","forEach","word","index","innerTspan","el","style","isTitle","classes","useHtmlLabels","isNode","width","addSvgBackground","l","info","htmlText","markdownToHTML","markdown","children","fromMarkdown","map","output","value","replace","join","label","H","s","labelStyle","addHtmlSpan","element","addBackground","styleFn","fo","div","labelClass","html","dom","bbox","getBoundingClientRect","height","structuredText","markdownToLines","preprocessedMarkdown","preprocessMarkdown","withoutMultipleNewlines","withoutExtraSpaces","dedent","lines","currentLine","treeNode","contentNode","processNode","parentType","textLines","split","textLine","push","svgLabel","createFormattedText","g","labelGroup","bkg","insert","line","fullStr","data","tempStr","linesUnderWidth","prevIndex","slice","subStr","lastSpaceIndex","lastIndexOf","trim","preparedLines","w","preparedLine","getBBox","_indexJs","_mdastUtilToString","_parseJs","_preprocessJs","_postprocessJs","_micromarkUtilDecodeNumericCharacterReference","_micromarkUtilDecodeString","_micromarkUtilNormalizeIdentifier","_decodeNamedCharacterReference","_unistUtilStringifyPosition","own","hasOwnProperty","encoding","options","undefined","compiler","config","transforms","canContainEols","enter","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","heading","blockQuote","characterEscape","characterReference","codeFenced","codeFlow","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","codeTextData","codeFlowValue","definition","identifier","title","url","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","htmlFlowData","htmlTextData","image","alt","listItem","token","spread","_spread","checked","listItemValue","ancestor","stack","start","Number","parseInt","sliceSerialize","listOrdered","list","listUnordered","paragraph","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","exit","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","decodeNumericCharacterReference","result","decodeNamedCharacterReference","tail","pop","position","end","point","resume","codeFencedFence","lang","meta","normalizeIdentifier","toLowerCase","onexithardbreak","referenceType","getData","fragment","labelText","string","decodeString","lineEnding","context","includes","resource","setextHeadingLineSequence","charCodeAt","setextHeadingText","configure","combined","extensions","Array","isArray","extension","key","right","assign","mdastExtensions","events","tree","tokenStack","setData","listStack","prepareList","firstBlankLineIndex","atMarker","containerBalance","listSpread","event","tailIndex","tailEvent","splice","handler","defaultOnError","column","offset","create","and","errorHandler","onExitError","open","stringifyPosition","toString","ordered","postprocess","parse","document","write","preprocess","d","left","emptyOptions","settings","includeImageAlt","includeHtml","one","all","values","_micromarkUtilCombineExtensions","_contentJs","_documentJs","_flowJs","_textJs","_createTokenizerJs","_constructsJs","constructs","combineExtensions","parser","defined","lazy","flow","initial","from","createTokenizer","combineHtmlExtensions","_micromarkUtilChunked","syntaxExtension","hook","maybe","existing","before","add","htmlExtensions","handlers","htmlExtension","items","parameters","chunkStart","unshift","_micromarkFactorySpace","_micromarkUtilCharacter","tokenize","effects","previous","contentStart","attempt","contentInitial","consume","factorySpace","lineStart","contentType","next","markdownLineEnding","ok","max","limit","POSITIVE_INFINITY","size","markdownSpace","prefix","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","_unicodePunctuationRegexJs","regexCheck","unicodePunctuationRegex","regex","test","String","fromCharCode","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","now","containerContinue","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","seen","nok","disable","null","_micromarkCoreCommonmark","blankLine","flowInitial","afterConstruct","_attentionJs","attention","_autolinkJs","_blankLineJs","_blockQuoteJs","_characterEscapeJs","_characterReferenceJs","_codeFencedJs","_codeIndentedJs","_codeTextJs","_definitionJs","_hardBreakEscapeJs","_headingAtxJs","headingAtx","_htmlFlowJs","_htmlTextJs","_labelEndJs","labelEnd","_labelStartImageJs","labelStartImage","_labelStartLinkJs","labelStartLink","_lineEndingJs","_listJs","_setextUnderlineJs","setextUnderline","_thematicBreakJs","_micromarkUtilClassifyCharacter","_micromarkUtilResolveAll","marker","attentionMarkers","classifyCharacter","inside","after","close","_open","_close","resolveAll","group","openingSequence","closingSequence","use","nextEvents","movePoint","insideSpan","_bufferIndex","called","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","partial","state","_container","contBefore","numeric","_characterEntities","characterEntities","AElig","AMP","Aacute","Abreve","Acirc","Acy","Afr","Agrave","Alpha","Amacr","And","Aogon","Aopf","ApplyFunction","Aring","Ascr","Assign","Atilde","Auml","Backslash","Barv","Barwed","Bcy","Because","Bernoullis","Beta","Bfr","Bopf","Breve","Bscr","Bumpeq","CHcy","COPY","Cacute","Cap","CapitalDifferentialD","Cayleys","Ccaron","Ccedil","Ccirc","Cconint","Cdot","Cedilla","CenterDot","Cfr","Chi","CircleDot","CircleMinus","CirclePlus","CircleTimes","ClockwiseContourIntegral","CloseCurlyDoubleQuote","CloseCurlyQuote","Colon","Colone","Congruent","Conint","ContourIntegral","Copf","Coproduct","CounterClockwiseContourIntegral","Cross","Cscr","Cup","CupCap","DD","DDotrahd","DJcy","DScy","DZcy","Dagger","Darr","Dashv","Dcaron","Dcy","Del","Delta","Dfr","DiacriticalAcute","DiacriticalDot","DiacriticalDoubleAcute","DiacriticalGrave","DiacriticalTilde","Diamond","DifferentialD","Dopf","Dot","DotDot","DotEqual","DoubleContourIntegral","DoubleDot","DoubleDownArrow","DoubleLeftArrow","DoubleLeftRightArrow","DoubleLeftTee","DoubleLongLeftArrow","DoubleLongLeftRightArrow","DoubleLongRightArrow","DoubleRightArrow","DoubleRightTee","DoubleUpArrow","DoubleUpDownArrow","DoubleVerticalBar","DownArrow","DownArrowBar","DownArrowUpArrow","DownBreve","DownLeftRightVector","DownLeftTeeVector","DownLeftVector","DownLeftVectorBar","DownRightTeeVector","DownRightVector","DownRightVectorBar","DownTee","DownTeeArrow","Downarrow","Dscr","Dstrok","ENG","ETH","Eacute","Ecaron","Ecirc","Ecy","Edot","Efr","Egrave","Element","Emacr","EmptySmallSquare","EmptyVerySmallSquare","Eogon","Eopf","Epsilon","Equal","EqualTilde","Equilibrium","Escr","Esim","Eta","Euml","Exists","ExponentialE","Fcy","Ffr","FilledSmallSquare","FilledVerySmallSquare","Fopf","ForAll","Fouriertrf","Fscr","GJcy","GT","Gamma","Gammad","Gbreve","Gcedil","Gcirc","Gcy","Gdot","Gfr","Gg","Gopf","GreaterEqual","GreaterEqualLess","GreaterFullEqual","GreaterGreater","GreaterLess","GreaterSlantEqual","GreaterTilde","Gscr","Gt","HARDcy","Hacek","Hat","Hcirc","Hfr","HilbertSpace","Hopf","HorizontalLine","Hscr","Hstrok","HumpDownHump","HumpEqual","IEcy","IJlig","IOcy","Iacute","Icirc","Icy","Idot","Ifr","Igrave","Im","Imacr","ImaginaryI","Implies","Int","Integral","Intersection","InvisibleComma","InvisibleTimes","Iogon","Iopf","Iota","Iscr","Itilde","Iukcy","Iuml","Jcirc","Jcy","Jfr","Jopf","Jscr","Jsercy","Jukcy","KHcy","KJcy","Kappa","Kcedil","Kcy","Kfr","Kopf","Kscr","LJcy","LT","Lacute","Lambda","Lang","Laplacetrf","Larr","Lcaron","Lcedil","Lcy","LeftAngleBracket","LeftArrow","LeftArrowBar","LeftArrowRightArrow","LeftCeiling","LeftDoubleBracket","LeftDownTeeVector","LeftDownVector","LeftDownVectorBar","LeftFloor","LeftRightArrow","LeftRightVector","LeftTee","LeftTeeArrow","LeftTeeVector","LeftTriangle","LeftTriangleBar","LeftTriangleEqual","LeftUpDownVector","LeftUpTeeVector","LeftUpVector","LeftUpVectorBar","LeftVector","LeftVectorBar","Leftarrow","Leftrightarrow","LessEqualGreater","LessFullEqual","LessGreater","LessLess","LessSlantEqual","LessTilde","Lfr","Ll","Lleftarrow","Lmidot","LongLeftArrow","LongLeftRightArrow","LongRightArrow","Longleftarrow","Longleftrightarrow","Longrightarrow","Lopf","LowerLeftArrow","LowerRightArrow","Lscr","Lsh","Lstrok","Lt","Map","Mcy","MediumSpace","Mellintrf","Mfr","MinusPlus","Mopf","Mscr","Mu","NJcy","Nacute","Ncaron","Ncedil","Ncy","NegativeMediumSpace","NegativeThickSpace","NegativeThinSpace","NegativeVeryThinSpace","NestedGreaterGreater","NestedLessLess","NewLine","Nfr","NoBreak","NonBreakingSpace","Nopf","Not","NotCongruent","NotCupCap","NotDoubleVerticalBar","NotElement","NotEqual","NotEqualTilde","NotExists","NotGreater","NotGreaterEqual","NotGreaterFullEqual","NotGreaterGreater","NotGreaterLess","NotGreaterSlantEqual","NotGreaterTilde","NotHumpDownHump","NotHumpEqual","NotLeftTriangle","NotLeftTriangleBar","NotLeftTriangleEqual","NotLess","NotLessEqual","NotLessGreater","NotLessLess","NotLessSlantEqual","NotLessTilde","NotNestedGreaterGreater","NotNestedLessLess","NotPrecedes","NotPrecedesEqual","NotPrecedesSlantEqual","NotReverseElement","NotRightTriangle","NotRightTriangleBar","NotRightTriangleEqual","NotSquareSubset","NotSquareSubsetEqual","NotSquareSuperset","NotSquareSupersetEqual","NotSubset","NotSubsetEqual","NotSucceeds","NotSucceedsEqual","NotSucceedsSlantEqual","NotSucceedsTilde","NotSuperset","NotSupersetEqual","NotTilde","NotTildeEqual","NotTildeFullEqual","NotTildeTilde","NotVerticalBar","Nscr","Ntilde","Nu","OElig","Oacute","Ocirc","Ocy","Odblac","Ofr","Ograve","Omacr","Omega","Omicron","Oopf","OpenCurlyDoubleQuote","OpenCurlyQuote","Or","Oscr","Oslash","Otilde","Otimes","Ouml","OverBar","OverBrace","OverBracket","OverParenthesis","PartialD","Pcy","Pfr","Phi","Pi","PlusMinus","Poincareplane","Popf","Pr","Precedes","PrecedesEqual","PrecedesSlantEqual","PrecedesTilde","Prime","Product","Proportion","Proportional","Pscr","Psi","QUOT","Qfr","Qopf","Qscr","RBarr","REG","Racute","Rang","Rarr","Rarrtl","Rcaron","Rcedil","Rcy","Re","ReverseElement","ReverseEquilibrium","ReverseUpEquilibrium","Rfr","Rho","RightAngleBracket","RightArrow","RightArrowBar","RightArrowLeftArrow","RightCeiling","RightDoubleBracket","RightDownTeeVector","RightDownVector","RightDownVectorBar","RightFloor","RightTee","RightTeeArrow","RightTeeVector","RightTriangle","RightTriangleBar","RightTriangleEqual","RightUpDownVector","RightUpTeeVector","RightUpVector","RightUpVectorBar","RightVector","RightVectorBar","Rightarrow","Ropf","RoundImplies","Rrightarrow","Rscr","Rsh","RuleDelayed","SHCHcy","SHcy","SOFTcy","Sacute","Sc","Scaron","Scedil","Scirc","Scy","Sfr","ShortDownArrow","ShortLeftArrow","ShortRightArrow","ShortUpArrow","Sigma","SmallCircle","Sopf","Sqrt","Square","SquareIntersection","SquareSubset","SquareSubsetEqual","SquareSuperset","SquareSupersetEqual","SquareUnion","Sscr","Star","Sub","Subset","SubsetEqual","Succeeds","SucceedsEqual","SucceedsSlantEqual","SucceedsTilde","SuchThat","Sum","Sup","Superset","SupersetEqual","Supset","THORN","TRADE","TSHcy","TScy","Tab","Tau","Tcaron","Tcedil","Tcy","Tfr","Therefore","Theta","ThickSpace","ThinSpace","Tilde","TildeEqual","TildeFullEqual","TildeTilde","Topf","TripleDot","Tscr","Tstrok","Uacute","Uarr","Uarrocir","Ubrcy","Ubreve","Ucirc","Ucy","Udblac","Ufr","Ugrave","Umacr","UnderBar","UnderBrace","UnderBracket","UnderParenthesis","Union","UnionPlus","Uogon","Uopf","UpArrow","UpArrowBar","UpArrowDownArrow","UpDownArrow","UpEquilibrium","UpTee","UpTeeArrow","Uparrow","Updownarrow","UpperLeftArrow","UpperRightArrow","Upsi","Upsilon","Uring","Uscr","Utilde","Uuml","VDash","Vbar","Vcy","Vdash","Vdashl","Vee","Verbar","Vert","VerticalBar","VerticalLine","VerticalSeparator","VerticalTilde","VeryThinSpace","Vfr","Vopf","Vscr","Vvdash","Wcirc","Wedge","Wfr","Wopf","Wscr","Xfr","Xi","Xopf","Xscr","YAcy","YIcy","YUcy","Yacute","Ycirc","Ycy","Yfr","Yopf","Yscr","Yuml","ZHcy","Zacute","Zcaron","Zcy","Zdot","ZeroWidthSpace","Zeta","Zfr","Zopf","Zscr","aacute","abreve","ac","acE","acd","acirc","acute","acy","aelig","af","afr","agrave","alefsym","aleph","alpha","amacr","amalg","amp","andand","andd","andslope","andv","ang","ange","angle","angmsd","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf","angmsdag","angmsdah","angrt","angrtvb","angrtvbd","angsph","angst","angzarr","aogon","aopf","ap","apE","apacir","ape","apid","apos","approx","approxeq","aring","ascr","ast","asymp","asympeq","atilde","auml","awconint","awint","bNot","backcong","backepsilon","backprime","backsim","backsimeq","barvee","barwed","barwedge","bbrk","bbrktbrk","bcong","bcy","bdquo","becaus","because","bemptyv","bepsi","bernou","beta","beth","between","bfr","bigcap","bigcirc","bigcup","bigodot","bigoplus","bigotimes","bigsqcup","bigstar","bigtriangledown","bigtriangleup","biguplus","bigvee","bigwedge","bkarow","blacklozenge","blacksquare","blacktriangle","blacktriangledown","blacktriangleleft","blacktriangleright","blank","blk12","blk14","blk34","block","bne","bnequiv","bnot","bopf","bot","bottom","bowtie","boxDL","boxDR","boxDl","boxDr","boxH","boxHD","boxHU","boxHd","boxHu","boxUL","boxUR","boxUl","boxUr","boxV","boxVH","boxVL","boxVR","boxVh","boxVl","boxVr","boxbox","boxdL","boxdR","boxdl","boxdr","boxh","boxhD","boxhU","boxhd","boxhu","boxminus","boxplus","boxtimes","boxuL","boxuR","boxul","boxur","boxv","boxvH","boxvL","boxvR","boxvh","boxvl","boxvr","bprime","breve","brvbar","bscr","bsemi","bsim","bsime","bsol","bsolb","bsolhsub","bull","bullet","bump","bumpE","bumpe","bumpeq","cacute","cap","capand","capbrcup","capcap","capcup","capdot","caps","caret","caron","ccaps","ccaron","ccedil","ccirc","ccups","ccupssm","cdot","cedil","cemptyv","cent","centerdot","cfr","chcy","checkmark","chi","cir","cirE","circ","circeq","circlearrowleft","circlearrowright","circledR","circledS","circledast","circledcirc","circleddash","cire","cirfnint","cirmid","cirscir","clubs","clubsuit","colon","colone","coloneq","comma","commat","comp","compfn","complement","complexes","cong","congdot","conint","copf","coprod","copy","copysr","crarr","cross","cscr","csub","csube","csup","csupe","ctdot","cudarrl","cudarrr","cuepr","cuesc","cularr","cularrp","cup","cupbrcap","cupcap","cupcup","cupdot","cupor","cups","curarr","curarrm","curlyeqprec","curlyeqsucc","curlyvee","curlywedge","curren","curvearrowleft","curvearrowright","cuvee","cuwed","cwconint","cwint","cylcty","dArr","dHar","dagger","daleth","darr","dash","dashv","dbkarow","dblac","dcaron","dcy","dd","ddagger","ddarr","ddotseq","deg","delta","demptyv","dfisht","dfr","dharl","dharr","diam","diamond","diamondsuit","diams","die","digamma","disin","divide","divideontimes","divonx","djcy","dlcorn","dlcrop","dollar","dopf","dot","doteq","doteqdot","dotminus","dotplus","dotsquare","doublebarwedge","downarrow","downdownarrows","downharpoonleft","downharpoonright","drbkarow","drcorn","drcrop","dscr","dscy","dsol","dstrok","dtdot","dtri","dtrif","duarr","duhar","dwangle","dzcy","dzigrarr","eDDot","eDot","eacute","easter","ecaron","ecir","ecirc","ecolon","ecy","edot","ee","efDot","efr","eg","egrave","egs","egsdot","elinters","ell","els","elsdot","emacr","empty","emptyset","emptyv","emsp13","emsp14","emsp","eng","ensp","eogon","eopf","epar","eparsl","eplus","epsi","epsilon","epsiv","eqcirc","eqcolon","eqsim","eqslantgtr","eqslantless","equals","equest","equiv","equivDD","eqvparsl","erDot","erarr","escr","esdot","esim","eta","eth","euml","euro","excl","exist","expectation","exponentiale","fallingdotseq","fcy","female","ffilig","fflig","ffllig","ffr","filig","fjlig","flat","fllig","fltns","fnof","fopf","forall","fork","forkv","fpartint","frac12","frac13","frac14","frac15","frac16","frac18","frac23","frac25","frac34","frac35","frac38","frac45","frac56","frac58","frac78","frasl","frown","fscr","gE","gEl","gacute","gamma","gammad","gap","gbreve","gcirc","gcy","gdot","ge","gel","geq","geqq","geqslant","ges","gescc","gesdot","gesdoto","gesdotol","gesl","gesles","gfr","gg","ggg","gimel","gjcy","gl","glE","gla","glj","gnE","gnap","gnapprox","gne","gneq","gneqq","gnsim","gopf","grave","gscr","gsim","gsime","gsiml","gt","gtcc","gtcir","gtdot","gtlPar","gtquest","gtrapprox","gtrarr","gtrdot","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","gvnE","hArr","hairsp","half","hamilt","hardcy","harr","harrcir","harrw","hbar","hcirc","hearts","heartsuit","hellip","hercon","hfr","hksearow","hkswarow","hoarr","homtht","hookleftarrow","hookrightarrow","hopf","horbar","hscr","hslash","hstrok","hybull","hyphen","iacute","ic","icirc","icy","iecy","iexcl","iff","ifr","igrave","ii","iiiint","iiint","iinfin","iiota","ijlig","imacr","imagline","imagpart","imath","imof","imped","in","incare","infin","infintie","inodot","int","intcal","integers","intercal","intlarhk","intprod","iocy","iogon","iopf","iota","iprod","iquest","iscr","isin","isinE","isindot","isins","isinsv","isinv","it","itilde","iukcy","iuml","jcirc","jcy","jfr","jmath","jopf","jscr","jsercy","jukcy","kappa","kappav","kcedil","kcy","kfr","kgreen","khcy","kjcy","kopf","kscr","lAarr","lArr","lAtail","lBarr","lE","lEg","lHar","lacute","laemptyv","lagran","lambda","langd","langle","lap","laquo","larr","larrb","larrbfs","larrfs","larrhk","larrlp","larrpl","larrsim","larrtl","lat","latail","late","lates","lbarr","lbbrk","lbrace","lbrack","lbrke","lbrksld","lbrkslu","lcaron","lcedil","lceil","lcub","lcy","ldca","ldquo","ldquor","ldrdhar","ldrushar","ldsh","le","leftarrow","leftarrowtail","leftharpoondown","leftharpoonup","leftleftarrows","leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","leftthreetimes","leg","leq","leqq","leqslant","les","lescc","lesdot","lesdoto","lesdotor","lesg","lesges","lessapprox","lessdot","lesseqgtr","lesseqqgtr","lessgtr","lesssim","lfisht","lfloor","lfr","lg","lgE","lhard","lharu","lharul","lhblk","ljcy","ll","llarr","llcorner","llhard","lltri","lmidot","lmoust","lmoustache","lnE","lnap","lnapprox","lne","lneq","lneqq","lnsim","loang","loarr","lobrk","longleftarrow","longleftrightarrow","longmapsto","longrightarrow","looparrowleft","looparrowright","lopar","lopf","loplus","lotimes","lowast","lowbar","loz","lozenge","lozf","lpar","lparlt","lrarr","lrcorner","lrhar","lrhard","lrm","lrtri","lsaquo","lscr","lsh","lsim","lsime","lsimg","lsqb","lsquo","lsquor","lstrok","lt","ltcc","ltcir","ltdot","lthree","ltimes","ltlarr","ltquest","ltrPar","ltri","ltrie","ltrif","lurdshar","luruhar","lvertneqq","lvnE","mDDot","macr","male","malt","maltese","mapsto","mapstodown","mapstoleft","mapstoup","mcomma","mcy","mdash","measuredangle","mfr","mho","micro","mid","midast","midcir","middot","minus","minusb","minusd","minusdu","mlcp","mldr","mnplus","models","mopf","mp","mscr","mstpos","mu","multimap","mumap","nGg","nGt","nGtv","nLeftarrow","nLeftrightarrow","nLl","nLt","nLtv","nRightarrow","nVDash","nVdash","nabla","nacute","nang","nap","napE","napid","napos","napprox","natur","natural","naturals","nbsp","nbump","nbumpe","ncap","ncaron","ncedil","ncong","ncongdot","ncup","ncy","ndash","ne","neArr","nearhk","nearr","nearrow","nedot","nequiv","nesear","nesim","nexist","nexists","nfr","ngE","nge","ngeq","ngeqq","ngeqslant","nges","ngsim","ngt","ngtr","nhArr","nharr","nhpar","ni","nis","nisd","niv","njcy","nlArr","nlE","nlarr","nldr","nle","nleftarrow","nleftrightarrow","nleq","nleqq","nleqslant","nles","nless","nlsim","nlt","nltri","nltrie","nmid","nopf","not","notin","notinE","notindot","notinva","notinvb","notinvc","notni","notniva","notnivb","notnivc","npar","nparallel","nparsl","npart","npolint","npr","nprcue","npre","nprec","npreceq","nrArr","nrarr","nrarrc","nrarrw","nrightarrow","nrtri","nrtrie","nsc","nsccue","nsce","nscr","nshortmid","nshortparallel","nsim","nsime","nsimeq","nsmid","nspar","nsqsube","nsqsupe","nsub","nsubE","nsube","nsubset","nsubseteq","nsubseteqq","nsucc","nsucceq","nsup","nsupE","nsupe","nsupset","nsupseteq","nsupseteqq","ntgl","ntilde","ntlg","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","nu","num","numero","numsp","nvDash","nvHarr","nvap","nvdash","nvge","nvgt","nvinfin","nvlArr","nvle","nvlt","nvltrie","nvrArr","nvrtrie","nvsim","nwArr","nwarhk","nwarr","nwarrow","nwnear","oS","oacute","oast","ocir","ocirc","ocy","odash","odblac","odiv","odot","odsold","oelig","ofcir","ofr","ogon","ograve","ogt","ohbar","ohm","oint","olarr","olcir","olcross","oline","olt","omacr","omega","omicron","omid","ominus","oopf","opar","operp","oplus","or","orarr","ord","order","orderof","ordf","ordm","origof","oror","orslope","orv","oscr","oslash","osol","otilde","otimes","otimesas","ouml","ovbar","par","para","parallel","parsim","parsl","part","pcy","percnt","period","permil","perp","pertenk","pfr","phi","phiv","phmmat","phone","pi","pitchfork","piv","planck","planckh","plankv","plus","plusacir","plusb","pluscir","plusdo","plusdu","pluse","plusmn","plussim","plustwo","pm","pointint","popf","pound","pr","prE","prap","prcue","pre","prec","precapprox","preccurlyeq","preceq","precnapprox","precneqq","precnsim","precsim","prime","primes","prnE","prnap","prnsim","prod","profalar","profline","profsurf","prop","propto","prsim","prurel","pscr","psi","puncsp","qfr","qint","qopf","qprime","qscr","quaternions","quatint","quest","questeq","quot","rAarr","rArr","rAtail","rBarr","rHar","race","racute","radic","raemptyv","rang","rangd","range","rangle","raquo","rarr","rarrap","rarrb","rarrbfs","rarrc","rarrfs","rarrhk","rarrlp","rarrpl","rarrsim","rarrtl","rarrw","ratail","ratio","rationals","rbarr","rbbrk","rbrace","rbrack","rbrke","rbrksld","rbrkslu","rcaron","rcedil","rceil","rcub","rcy","rdca","rdldhar","rdquo","rdquor","rdsh","real","realine","realpart","reals","rect","reg","rfisht","rfloor","rfr","rhard","rharu","rharul","rho","rhov","rightarrow","rightarrowtail","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","rightthreetimes","ring","risingdotseq","rlarr","rlhar","rlm","rmoust","rmoustache","rnmid","roang","roarr","robrk","ropar","ropf","roplus","rotimes","rpar","rpargt","rppolint","rrarr","rsaquo","rscr","rsh","rsqb","rsquo","rsquor","rthree","rtimes","rtri","rtrie","rtrif","rtriltri","ruluhar","rx","sacute","sbquo","sc","scE","scap","scaron","sccue","sce","scedil","scirc","scnE","scnap","scnsim","scpolint","scsim","scy","sdot","sdotb","sdote","seArr","searhk","searr","searrow","sect","semi","seswar","setminus","setmn","sext","sfr","sfrown","sharp","shchcy","shcy","shortmid","shortparallel","shy","sigma","sigmaf","sigmav","sim","simdot","sime","simeq","simg","simgE","siml","simlE","simne","simplus","simrarr","slarr","smallsetminus","smashp","smeparsl","smid","smile","smt","smte","smtes","softcy","sol","solb","solbar","sopf","spades","spadesuit","spar","sqcap","sqcaps","sqcup","sqcups","sqsub","sqsube","sqsubset","sqsubseteq","sqsup","sqsupe","sqsupset","sqsupseteq","squ","square","squarf","squf","srarr","sscr","ssetmn","ssmile","sstarf","star","starf","straightepsilon","straightphi","strns","sub","subE","subdot","sube","subedot","submult","subnE","subne","subplus","subrarr","subset","subseteq","subseteqq","subsetneq","subsetneqq","subsim","subsub","subsup","succ","succapprox","succcurlyeq","succeq","succnapprox","succneqq","succnsim","succsim","sum","sung","sup1","sup2","sup3","sup","supE","supdot","supdsub","supe","supedot","suphsol","suphsub","suplarr","supmult","supnE","supne","supplus","supset","supseteq","supseteqq","supsetneq","supsetneqq","supsim","supsub","supsup","swArr","swarhk","swarr","swarrow","swnwar","szlig","target","tau","tbrk","tcaron","tcedil","tcy","tdot","telrec","tfr","there4","therefore","theta","thetasym","thetav","thickapprox","thicksim","thinsp","thkap","thksim","thorn","tilde","times","timesb","timesbar","timesd","tint","toea","top","topbot","topcir","topf","topfork","tosa","tprime","trade","triangle","triangledown","triangleleft","trianglelefteq","triangleq","triangleright","trianglerighteq","tridot","trie","triminus","triplus","trisb","tritime","trpezium","tscr","tscy","tshcy","tstrok","twixt","twoheadleftarrow","twoheadrightarrow","uArr","uHar","uacute","uarr","ubrcy","ubreve","ucirc","ucy","udarr","udblac","udhar","ufisht","ufr","ugrave","uharl","uharr","uhblk","ulcorn","ulcorner","ulcrop","ultri","umacr","uml","uogon","uopf","uparrow","updownarrow","upharpoonleft","upharpoonright","uplus","upsi","upsih","upsilon","upuparrows","urcorn","urcorner","urcrop","uring","urtri","uscr","utdot","utilde","utri","utrif","uuarr","uuml","uwangle","vArr","vBar","vBarv","vDash","vangrt","varepsilon","varkappa","varnothing","varphi","varpi","varpropto","varr","varrho","varsigma","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartheta","vartriangleleft","vartriangleright","vcy","vdash","vee","veebar","veeeq","vellip","verbar","vert","vfr","vltri","vnsub","vnsup","vopf","vprop","vrtri","vscr","vsubnE","vsubne","vsupnE","vsupne","vzigzag","wcirc","wedbar","wedge","wedgeq","weierp","wfr","wopf","wp","wr","wreath","wscr","xcap","xcirc","xcup","xdtri","xfr","xhArr","xharr","xi","xlArr","xlarr","xmap","xnis","xodot","xopf","xoplus","xotime","xrArr","xrarr","xscr","xsqcup","xuplus","xutri","xvee","xwedge","yacute","yacy","ycirc","ycy","yen","yfr","yicy","yopf","yscr","yucy","yuml","zacute","zcaron","zcy","zdot","zeetrf","zeta","zfr","zhcy","zigrarr","zopf","zscr","zwj","zwnj","nonLazyContinuation","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","sequenceOpen","infoBefore","atNonLazyBreak","metaBefore","contentBefore","beforeContentChunk","contentChunk","afterPrefix","atBreak","furtherStart","tailExitIndex","headEnterIndex","_micromarkUtilSubtokenize","chunkInside","contentEnd","continuationConstruct","contentContinue","subtokenize","prefixed","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","_micromarkFactoryDestination","_micromarkFactoryLabel","_micromarkFactoryTitle","_micromarkFactoryWhitespace","factoryLabel","labelAfter","markerAfter","factoryWhitespace","destinationBefore","factoryDestination","destinationAfter","titleBefore","afterWhitespace","beforeMarker","factoryTitle","titleAfter","titleAfterOptionalWhitespace","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","markerType","labelInside","labelEscape","begin","escape","toUpperCase","sequenceFurther","_micromarkUtilHtmlTagName","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","htmlRawNames","htmlBlockNames","basicSelfClosing","completeClosingTagAfter","completeEnd","completeAttributeNameBefore","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","blankLineBefore","continuationAfter","continuationStart","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","resolveTo","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","media","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","initialSize","kind","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","sequence","resolver","createResolver","initializeFactory","field","notText","resolveAllLineSuffixes","extraResolver","tabs","chunks","bufferIndex","chunk","_index","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","serializeChunks","atTab","main","chunkIndex","sliceChunks","view","startIndex","startBufferIndex","endIndex","endBufferIndex","head","shift","_","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","search","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","base","characterEscapeOrReference","decode","$0","$1","$2","hex","pos"],"version":3,"file":"flowDiagram-93327f21.8f11c8ee.js.map"}