!// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
function(e,t,r,i,a){/* eslint-disable no-undef */var c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},s="function"==typeof c[i]&&c[i],n=s.cache||{},o="undefined"!=typeof module&&"function"==typeof module.require&&module.require.bind(module);function l(t,r){if(!n[t]){if(!e[t]){// if we cannot find the module within our internal map or
// cache jump to the current global require ie. the last bundle
// that was added to the page.
var a="function"==typeof c[i]&&c[i];if(!r&&a)return a(t,!0);// If there are other bundles on this page the require from the
// previous one is saved to 'previousRequire'. Repeat this as
// many times as there are bundles until the module is found or
// we exhaust the require chain.
if(s)return s(t,!0);// Try the node require function if it exists.
if(o&&"string"==typeof t)return o(t);var h=Error("Cannot find module '"+t+"'");throw h.code="MODULE_NOT_FOUND",h}u.resolve=function(r){var i=e[t][1][r];return null!=i?i:r},u.cache={};var m=n[t]=new l.Module(t);e[t][0].call(m.exports,u,m,m.exports,this)}return n[t].exports;function u(e){var t=u.resolve(e);return!1===t?{}:l(t)}}l.isParcelRequire=!0,l.Module=function(e){this.id=e,this.bundle=l,this.exports={}},l.modules=e,l.cache=n,l.parent=s,l.register=function(t,r){e[t]=[function(e,t){t.exports=r},{}]},Object.defineProperty(l,"root",{get:function(){return c[i]}}),c[i]=l;for(var h=0;h<t.length;h++)l(t[h]);if(r){// Expose entry point to Node, AMD or browser globals
// Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
var m=l(r);// CommonJS
"object"==typeof exports&&"undefined"!=typeof module?module.exports=m:"function"==typeof define&&define.amd?define(function(){return m}):a&&(this[a]=m)}}({bToYD:[function(e,t,r){var i=e("@parcel/transformer-js/src/esmodule-helpers.js");i.defineInteropFlag(r),i.export(r,"diagram",()=>N);var a=e("./mermaid-b0ad2de1.js"),c=e("d3");e("ts-dedent"),e("dayjs"),e("@braintree/sanitize-url"),e("dompurify"),e("khroma"),e("lodash-es/memoize.js"),e("stylis"),e("lodash-es/isEmpty.js");var s=function(){var e=function(e,t,r,i){for(r=r||{},i=e.length;i--;r[e[i]]=t);return r},t=[1,4],r=[1,7],i=[1,5],a=[1,9],c=[1,6],s=[2,6],n=[1,16],o=[6,8,14,20,22,24,25,27,29,32,37,40,50,55],l=[8,14,20,22,24,25,27,29,32,37,40],h=[8,13,14,20,22,24,25,27,29,32,37,40],m=[1,26],u=[6,8,14,50,55],y=[8,14,55],p=[1,53],d=[1,52],g=[8,14,30,33,35,38,55],b=[1,67],f=[1,68],k=[1,69],_=[8,14,33,35,42,55],$={trace:function(){},yy:{},symbols_:{error:2,start:3,eol:4,directive:5,GG:6,document:7,EOF:8,":":9,DIR:10,options:11,body:12,OPT:13,NL:14,line:15,statement:16,commitStatement:17,mergeStatement:18,cherryPickStatement:19,acc_title:20,acc_title_value:21,acc_descr:22,acc_descr_value:23,acc_descr_multiline_value:24,section:25,branchStatement:26,CHECKOUT:27,ref:28,BRANCH:29,ORDER:30,NUM:31,CHERRY_PICK:32,COMMIT_ID:33,STR:34,COMMIT_TAG:35,EMPTYSTR:36,MERGE:37,COMMIT_TYPE:38,commitType:39,COMMIT:40,commit_arg:41,COMMIT_MSG:42,NORMAL:43,REVERSE:44,HIGHLIGHT:45,openDirective:46,typeDirective:47,closeDirective:48,argDirective:49,open_directive:50,type_directive:51,arg_directive:52,close_directive:53,ID:54,";":55,$accept:0,$end:1},terminals_:{2:"error",6:"GG",8:"EOF",9:":",10:"DIR",13:"OPT",14:"NL",20:"acc_title",21:"acc_title_value",22:"acc_descr",23:"acc_descr_value",24:"acc_descr_multiline_value",25:"section",27:"CHECKOUT",29:"BRANCH",30:"ORDER",31:"NUM",32:"CHERRY_PICK",33:"COMMIT_ID",34:"STR",35:"COMMIT_TAG",36:"EMPTYSTR",37:"MERGE",38:"COMMIT_TYPE",40:"COMMIT",42:"COMMIT_MSG",43:"NORMAL",44:"REVERSE",45:"HIGHLIGHT",50:"open_directive",51:"type_directive",52:"arg_directive",53:"close_directive",54:"ID",55:";"},productions_:[0,[3,2],[3,2],[3,3],[3,4],[3,5],[7,0],[7,2],[11,2],[11,1],[12,0],[12,2],[15,2],[15,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,1],[16,1],[16,1],[16,2],[26,2],[26,4],[19,3],[19,5],[19,5],[19,5],[19,5],[18,2],[18,4],[18,4],[18,4],[18,6],[18,6],[18,6],[18,6],[18,6],[18,6],[18,8],[18,8],[18,8],[18,8],[18,8],[18,8],[17,2],[17,3],[17,3],[17,5],[17,5],[17,3],[17,5],[17,5],[17,5],[17,5],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,3],[17,5],[17,5],[17,5],[17,5],[17,5],[17,5],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[41,0],[41,1],[39,1],[39,1],[39,1],[5,3],[5,5],[46,1],[47,1],[49,1],[48,1],[28,1],[28,1],[4,1],[4,1],[4,1]],performAction:function(e,t,r,i,a,c,s){var n=c.length-1;switch(a){case 3:return c[n];case 4:return c[n-1];case 5:return i.setDirection(c[n-3]),c[n-1];case 7:i.setOptions(c[n-1]),this.$=c[n];break;case 8:c[n-1]+=c[n],this.$=c[n-1];break;case 10:this.$=[];break;case 11:c[n-1].push(c[n]),this.$=c[n-1];break;case 12:this.$=c[n-1];break;case 17:this.$=c[n].trim(),i.setAccTitle(this.$);break;case 18:case 19:this.$=c[n].trim(),i.setAccDescription(this.$);break;case 20:i.addSection(c[n].substr(8)),this.$=c[n].substr(8);break;case 22:i.checkout(c[n]);break;case 23:i.branch(c[n]);break;case 24:i.branch(c[n-2],c[n]);break;case 25:i.cherryPick(c[n],"",void 0);break;case 26:i.cherryPick(c[n-2],"",c[n]);break;case 27:case 29:i.cherryPick(c[n-2],"","");break;case 28:i.cherryPick(c[n],"",c[n-2]);break;case 30:i.merge(c[n],"","","");break;case 31:i.merge(c[n-2],c[n],"","");break;case 32:i.merge(c[n-2],"",c[n],"");break;case 33:i.merge(c[n-2],"","",c[n]);break;case 34:i.merge(c[n-4],c[n],"",c[n-2]);break;case 35:i.merge(c[n-4],"",c[n],c[n-2]);break;case 36:i.merge(c[n-4],"",c[n-2],c[n]);break;case 37:i.merge(c[n-4],c[n-2],c[n],"");break;case 38:i.merge(c[n-4],c[n-2],"",c[n]);break;case 39:i.merge(c[n-4],c[n],c[n-2],"");break;case 40:i.merge(c[n-6],c[n-4],c[n-2],c[n]);break;case 41:i.merge(c[n-6],c[n],c[n-4],c[n-2]);break;case 42:i.merge(c[n-6],c[n-4],c[n],c[n-2]);break;case 43:i.merge(c[n-6],c[n-2],c[n-4],c[n]);break;case 44:i.merge(c[n-6],c[n],c[n-2],c[n-4]);break;case 45:i.merge(c[n-6],c[n-2],c[n],c[n-4]);break;case 46:i.commit(c[n]);break;case 47:i.commit("","",i.commitType.NORMAL,c[n]);break;case 48:i.commit("","",c[n],"");break;case 49:i.commit("","",c[n],c[n-2]);break;case 50:i.commit("","",c[n-2],c[n]);break;case 51:i.commit("",c[n],i.commitType.NORMAL,"");break;case 52:i.commit("",c[n-2],i.commitType.NORMAL,c[n]);break;case 53:i.commit("",c[n],i.commitType.NORMAL,c[n-2]);break;case 54:i.commit("",c[n-2],c[n],"");break;case 55:i.commit("",c[n],c[n-2],"");break;case 56:i.commit("",c[n-4],c[n-2],c[n]);break;case 57:i.commit("",c[n-4],c[n],c[n-2]);break;case 58:i.commit("",c[n-2],c[n-4],c[n]);break;case 59:i.commit("",c[n],c[n-4],c[n-2]);break;case 60:i.commit("",c[n],c[n-2],c[n-4]);break;case 61:i.commit("",c[n-2],c[n],c[n-4]);break;case 62:i.commit(c[n],"",i.commitType.NORMAL,"");break;case 63:i.commit(c[n],"",i.commitType.NORMAL,c[n-2]);break;case 64:i.commit(c[n-2],"",i.commitType.NORMAL,c[n]);break;case 65:i.commit(c[n-2],"",c[n],"");break;case 66:i.commit(c[n],"",c[n-2],"");break;case 67:i.commit(c[n],c[n-2],i.commitType.NORMAL,"");break;case 68:i.commit(c[n-2],c[n],i.commitType.NORMAL,"");break;case 69:i.commit(c[n-4],"",c[n-2],c[n]);break;case 70:i.commit(c[n-4],"",c[n],c[n-2]);break;case 71:i.commit(c[n-2],"",c[n-4],c[n]);break;case 72:i.commit(c[n],"",c[n-4],c[n-2]);break;case 73:i.commit(c[n],"",c[n-2],c[n-4]);break;case 74:i.commit(c[n-2],"",c[n],c[n-4]);break;case 75:i.commit(c[n-4],c[n],c[n-2],"");break;case 76:i.commit(c[n-4],c[n-2],c[n],"");break;case 77:i.commit(c[n-2],c[n],c[n-4],"");break;case 78:i.commit(c[n],c[n-2],c[n-4],"");break;case 79:i.commit(c[n],c[n-4],c[n-2],"");break;case 80:i.commit(c[n-2],c[n-4],c[n],"");break;case 81:i.commit(c[n-4],c[n],i.commitType.NORMAL,c[n-2]);break;case 82:i.commit(c[n-4],c[n-2],i.commitType.NORMAL,c[n]);break;case 83:i.commit(c[n-2],c[n],i.commitType.NORMAL,c[n-4]);break;case 84:i.commit(c[n],c[n-2],i.commitType.NORMAL,c[n-4]);break;case 85:i.commit(c[n],c[n-4],i.commitType.NORMAL,c[n-2]);break;case 86:i.commit(c[n-2],c[n-4],i.commitType.NORMAL,c[n]);break;case 87:i.commit(c[n-6],c[n-4],c[n-2],c[n]);break;case 88:i.commit(c[n-6],c[n-4],c[n],c[n-2]);break;case 89:i.commit(c[n-6],c[n-2],c[n-4],c[n]);break;case 90:i.commit(c[n-6],c[n],c[n-4],c[n-2]);break;case 91:i.commit(c[n-6],c[n-2],c[n],c[n-4]);break;case 92:i.commit(c[n-6],c[n],c[n-2],c[n-4]);break;case 93:i.commit(c[n-4],c[n-6],c[n-2],c[n]);break;case 94:i.commit(c[n-4],c[n-6],c[n],c[n-2]);break;case 95:i.commit(c[n-2],c[n-6],c[n-4],c[n]);break;case 96:i.commit(c[n],c[n-6],c[n-4],c[n-2]);break;case 97:i.commit(c[n-2],c[n-6],c[n],c[n-4]);break;case 98:i.commit(c[n],c[n-6],c[n-2],c[n-4]);break;case 99:i.commit(c[n],c[n-4],c[n-2],c[n-6]);break;case 100:i.commit(c[n-2],c[n-4],c[n],c[n-6]);break;case 101:i.commit(c[n],c[n-2],c[n-4],c[n-6]);break;case 102:i.commit(c[n-2],c[n],c[n-4],c[n-6]);break;case 103:i.commit(c[n-4],c[n-2],c[n],c[n-6]);break;case 104:i.commit(c[n-4],c[n],c[n-2],c[n-6]);break;case 105:i.commit(c[n-2],c[n-4],c[n-6],c[n]);break;case 106:i.commit(c[n],c[n-4],c[n-6],c[n-2]);break;case 107:i.commit(c[n-2],c[n],c[n-6],c[n-4]);break;case 108:i.commit(c[n],c[n-2],c[n-6],c[n-4]);break;case 109:i.commit(c[n-4],c[n-2],c[n-6],c[n]);break;case 110:i.commit(c[n-4],c[n],c[n-6],c[n-2]);break;case 111:this.$="";break;case 112:this.$=c[n];break;case 113:this.$=i.commitType.NORMAL;break;case 114:this.$=i.commitType.REVERSE;break;case 115:this.$=i.commitType.HIGHLIGHT;break;case 118:i.parseDirective("%%{","open_directive");break;case 119:i.parseDirective(c[n],"type_directive");break;case 120:c[n]=c[n].trim().replace(/'/g,'"'),i.parseDirective(c[n],"arg_directive");break;case 121:i.parseDirective("}%%","close_directive","gitGraph")}},table:[{3:1,4:2,5:3,6:t,8:r,14:i,46:8,50:a,55:c},{1:[3]},{3:10,4:2,5:3,6:t,8:r,14:i,46:8,50:a,55:c},{3:11,4:2,5:3,6:t,8:r,14:i,46:8,50:a,55:c},{7:12,8:s,9:[1,13],10:[1,14],11:15,14:n},e(o,[2,124]),e(o,[2,125]),e(o,[2,126]),{47:17,51:[1,18]},{51:[2,118]},{1:[2,1]},{1:[2,2]},{8:[1,19]},{7:20,8:s,11:15,14:n},{9:[1,21]},e(l,[2,10],{12:22,13:[1,23]}),e(h,[2,9]),{9:[1,25],48:24,53:m},e([9,53],[2,119]),{1:[2,3]},{8:[1,27]},{7:28,8:s,11:15,14:n},{8:[2,7],14:[1,31],15:29,16:30,17:32,18:33,19:34,20:[1,35],22:[1,36],24:[1,37],25:[1,38],26:39,27:[1,40],29:[1,44],32:[1,43],37:[1,42],40:[1,41]},e(h,[2,8]),e(u,[2,116]),{49:45,52:[1,46]},e(u,[2,121]),{1:[2,4]},{8:[1,47]},e(l,[2,11]),{4:48,8:r,14:i,55:c},e(l,[2,13]),e(y,[2,14]),e(y,[2,15]),e(y,[2,16]),{21:[1,49]},{23:[1,50]},e(y,[2,19]),e(y,[2,20]),e(y,[2,21]),{28:51,34:p,54:d},e(y,[2,111],{41:54,33:[1,57],34:[1,59],35:[1,55],38:[1,56],42:[1,58]}),{28:60,34:p,54:d},{33:[1,61],35:[1,62]},{28:63,34:p,54:d},{48:64,53:m},{53:[2,120]},{1:[2,5]},e(l,[2,12]),e(y,[2,17]),e(y,[2,18]),e(y,[2,22]),e(g,[2,122]),e(g,[2,123]),e(y,[2,46]),{34:[1,65]},{39:66,43:b,44:f,45:k},{34:[1,70]},{34:[1,71]},e(y,[2,112]),e(y,[2,30],{33:[1,72],35:[1,74],38:[1,73]}),{34:[1,75]},{34:[1,76],36:[1,77]},e(y,[2,23],{30:[1,78]}),e(u,[2,117]),e(y,[2,47],{33:[1,80],38:[1,79],42:[1,81]}),e(y,[2,48],{33:[1,83],35:[1,82],42:[1,84]}),e(_,[2,113]),e(_,[2,114]),e(_,[2,115]),e(y,[2,51],{35:[1,85],38:[1,86],42:[1,87]}),e(y,[2,62],{33:[1,90],35:[1,88],38:[1,89]}),{34:[1,91]},{39:92,43:b,44:f,45:k},{34:[1,93]},e(y,[2,25],{35:[1,94]}),{33:[1,95]},{33:[1,96]},{31:[1,97]},{39:98,43:b,44:f,45:k},{34:[1,99]},{34:[1,100]},{34:[1,101]},{34:[1,102]},{34:[1,103]},{34:[1,104]},{39:105,43:b,44:f,45:k},{34:[1,106]},{34:[1,107]},{39:108,43:b,44:f,45:k},{34:[1,109]},e(y,[2,31],{35:[1,111],38:[1,110]}),e(y,[2,32],{33:[1,113],35:[1,112]}),e(y,[2,33],{33:[1,114],38:[1,115]}),{34:[1,116],36:[1,117]},{34:[1,118]},{34:[1,119]},e(y,[2,24]),e(y,[2,49],{33:[1,120],42:[1,121]}),e(y,[2,53],{38:[1,122],42:[1,123]}),e(y,[2,63],{33:[1,125],38:[1,124]}),e(y,[2,50],{33:[1,126],42:[1,127]}),e(y,[2,55],{35:[1,128],42:[1,129]}),e(y,[2,66],{33:[1,131],35:[1,130]}),e(y,[2,52],{38:[1,132],42:[1,133]}),e(y,[2,54],{35:[1,134],42:[1,135]}),e(y,[2,67],{35:[1,137],38:[1,136]}),e(y,[2,64],{33:[1,139],38:[1,138]}),e(y,[2,65],{33:[1,141],35:[1,140]}),e(y,[2,68],{35:[1,143],38:[1,142]}),{39:144,43:b,44:f,45:k},{34:[1,145]},{34:[1,146]},{34:[1,147]},{34:[1,148]},{39:149,43:b,44:f,45:k},e(y,[2,26]),e(y,[2,27]),e(y,[2,28]),e(y,[2,29]),{34:[1,150]},{34:[1,151]},{39:152,43:b,44:f,45:k},{34:[1,153]},{39:154,43:b,44:f,45:k},{34:[1,155]},{34:[1,156]},{34:[1,157]},{34:[1,158]},{34:[1,159]},{34:[1,160]},{34:[1,161]},{39:162,43:b,44:f,45:k},{34:[1,163]},{34:[1,164]},{34:[1,165]},{39:166,43:b,44:f,45:k},{34:[1,167]},{39:168,43:b,44:f,45:k},{34:[1,169]},{34:[1,170]},{34:[1,171]},{39:172,43:b,44:f,45:k},{34:[1,173]},e(y,[2,37],{35:[1,174]}),e(y,[2,38],{38:[1,175]}),e(y,[2,36],{33:[1,176]}),e(y,[2,39],{35:[1,177]}),e(y,[2,34],{38:[1,178]}),e(y,[2,35],{33:[1,179]}),e(y,[2,60],{42:[1,180]}),e(y,[2,73],{33:[1,181]}),e(y,[2,61],{42:[1,182]}),e(y,[2,84],{38:[1,183]}),e(y,[2,74],{33:[1,184]}),e(y,[2,83],{38:[1,185]}),e(y,[2,59],{42:[1,186]}),e(y,[2,72],{33:[1,187]}),e(y,[2,58],{42:[1,188]}),e(y,[2,78],{35:[1,189]}),e(y,[2,71],{33:[1,190]}),e(y,[2,77],{35:[1,191]}),e(y,[2,57],{42:[1,192]}),e(y,[2,85],{38:[1,193]}),e(y,[2,56],{42:[1,194]}),e(y,[2,79],{35:[1,195]}),e(y,[2,80],{35:[1,196]}),e(y,[2,86],{38:[1,197]}),e(y,[2,70],{33:[1,198]}),e(y,[2,81],{38:[1,199]}),e(y,[2,69],{33:[1,200]}),e(y,[2,75],{35:[1,201]}),e(y,[2,76],{35:[1,202]}),e(y,[2,82],{38:[1,203]}),{34:[1,204]},{39:205,43:b,44:f,45:k},{34:[1,206]},{34:[1,207]},{39:208,43:b,44:f,45:k},{34:[1,209]},{34:[1,210]},{34:[1,211]},{34:[1,212]},{39:213,43:b,44:f,45:k},{34:[1,214]},{39:215,43:b,44:f,45:k},{34:[1,216]},{34:[1,217]},{34:[1,218]},{34:[1,219]},{34:[1,220]},{34:[1,221]},{34:[1,222]},{39:223,43:b,44:f,45:k},{34:[1,224]},{34:[1,225]},{34:[1,226]},{39:227,43:b,44:f,45:k},{34:[1,228]},{39:229,43:b,44:f,45:k},{34:[1,230]},{34:[1,231]},{34:[1,232]},{39:233,43:b,44:f,45:k},e(y,[2,40]),e(y,[2,42]),e(y,[2,41]),e(y,[2,43]),e(y,[2,45]),e(y,[2,44]),e(y,[2,101]),e(y,[2,102]),e(y,[2,99]),e(y,[2,100]),e(y,[2,104]),e(y,[2,103]),e(y,[2,108]),e(y,[2,107]),e(y,[2,106]),e(y,[2,105]),e(y,[2,110]),e(y,[2,109]),e(y,[2,98]),e(y,[2,97]),e(y,[2,96]),e(y,[2,95]),e(y,[2,93]),e(y,[2,94]),e(y,[2,92]),e(y,[2,91]),e(y,[2,90]),e(y,[2,89]),e(y,[2,87]),e(y,[2,88])],defaultActions:{9:[2,118],10:[2,1],11:[2,2],19:[2,3],27:[2,4],46:[2,120],47:[2,5]},parseError:function(e,t){if(t.recoverable)this.trace(e);else{var r=Error(e);throw r.hash=t,r}},parse:function(e){var t=this,r=[0],i=[],a=[null],c=[],s=this.table,n="",o=0,l=0,h=c.slice.call(arguments,1),m=Object.create(this.lexer),u={yy:{}};for(var y in this.yy)Object.prototype.hasOwnProperty.call(this.yy,y)&&(u.yy[y]=this.yy[y]);m.setInput(e,u.yy),u.yy.lexer=m,u.yy.parser=this,void 0===m.yylloc&&(m.yylloc={});var p=m.yylloc;c.push(p);var d=m.options&&m.options.ranges;"function"==typeof u.yy.parseError?this.parseError=u.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var g,b,f,k,_,$,x,v,E={};;){if(b=r[r.length-1],this.defaultActions[b]?f=this.defaultActions[b]:(null==g&&(g=function(){var e;return"number"!=typeof(e=i.pop()||m.lex()||1)&&(e instanceof Array&&(e=(i=e).pop()),e=t.symbols_[e]||e),e}()),f=s[b]&&s[b][g]),void 0===f||!f.length||!f[0]){var T="";for(_ in v=[],s[b])this.terminals_[_]&&_>2&&v.push("'"+this.terminals_[_]+"'");T=m.showPosition?"Parse error on line "+(o+1)+":\n"+m.showPosition()+"\nExpecting "+v.join(", ")+", got '"+(this.terminals_[g]||g)+"'":"Parse error on line "+(o+1)+": Unexpected "+(1==g?"end of input":"'"+(this.terminals_[g]||g)+"'"),this.parseError(T,{text:m.match,token:this.terminals_[g]||g,line:m.yylineno,loc:p,expected:v})}if(f[0]instanceof Array&&f.length>1)throw Error("Parse Error: multiple actions possible at state: "+b+", token: "+g);switch(f[0]){case 1:r.push(g),a.push(m.yytext),c.push(m.yylloc),r.push(f[1]),g=null,l=m.yyleng,n=m.yytext,o=m.yylineno,p=m.yylloc;break;case 2:if($=this.productions_[f[1]][1],E.$=a[a.length-$],E._$={first_line:c[c.length-($||1)].first_line,last_line:c[c.length-1].last_line,first_column:c[c.length-($||1)].first_column,last_column:c[c.length-1].last_column},d&&(E._$.range=[c[c.length-($||1)].range[0],c[c.length-1].range[1]]),void 0!==(k=this.performAction.apply(E,[n,l,o,u.yy,f[1],a,c].concat(h))))return k;$&&(r=r.slice(0,-1*$*2),a=a.slice(0,-1*$),c=c.slice(0,-1*$)),r.push(this.productions_[f[1]][0]),a.push(E.$),c.push(E._$),x=s[r[r.length-2]][r[r.length-1]],r.push(x);break;case 3:return!0}}return!0}};function x(){this.yy={}}return $.lexer={EOF:1,parseError:function(e,t){if(this.yy.parser)this.yy.parser.parseError(e,t);else throw Error(e)},// resets the lexer, sets new input
setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},// consumes and returns one char from the input
input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},// unshifts one char (or a string) into the input
unput:function(e){var t=e.length,r=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var i=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),r.length-1&&(this.yylineno-=r.length-1);var a=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:r?(r.length===i.length?this.yylloc.first_column:0)+i[i.length-r.length].length-r[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[a[0],a[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},// When called from action, caches matched text and appends it on next action
more:function(){return this._more=!0,this},// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},// retain first n characters of the match
less:function(e){this.unput(this.match.slice(e))},// displays already matched input, i.e. for error messages
pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},// displays upcoming input, i.e. for error messages
upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function(){var e=this.pastInput(),t=Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(e,t){var r,i,a;if(this.options.backtrack_lexer&&(a={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(a.yylloc.range=this.yylloc.range.slice(0))),(i=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],r=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),r)return r;if(this._backtrack)for(var c in a)this[c]=a[c];return!1},// return next match in input
next:function(){if(this.done)return this.EOF;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var e,t,r,i,a=this._currentRules(),c=0;c<a.length;c++)if((r=this._input.match(this.rules[a[c]]))&&(!t||r[0].length>t[0].length)){if(t=r,i=c,this.options.backtrack_lexer){if(!1!==(e=this.test_match(r,a[c])))return e;if(!this._backtrack)return!1;t=!1;continue}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,a[i]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},// return next match that has a token
lex:function(){return this.next()||this.lex()},// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function(e){this.conditionStack.push(e)},// pop the previously active lexer condition state off the condition stack
popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},// alias for begin(condition)
pushState:function(e){this.begin(e)},// return the number of states currently on the stack
stateStackSize:function(){return this.conditionStack.length},options:{"case-insensitive":!0},performAction:function(e,t,r,i){switch(r){case 0:return this.begin("open_directive"),50;case 1:return this.begin("type_directive"),51;case 2:return this.popState(),this.begin("arg_directive"),9;case 3:return this.popState(),this.popState(),53;case 4:return 52;case 5:return this.begin("acc_title"),20;case 6:return this.popState(),"acc_title_value";case 7:return this.begin("acc_descr"),22;case 8:return this.popState(),"acc_descr_value";case 9:this.begin("acc_descr_multiline");break;case 10:case 34:case 38:this.popState();break;case 11:return"acc_descr_multiline_value";case 12:return 14;case 13:case 14:break;case 15:return 6;case 16:return 40;case 17:return 33;case 18:return 38;case 19:return 42;case 20:return 43;case 21:return 44;case 22:return 45;case 23:return 35;case 24:return 29;case 25:return 30;case 26:return 37;case 27:return 32;case 28:return 27;case 29:case 30:return 10;case 31:return 9;case 32:return"CARET";case 33:this.begin("options");break;case 35:return 13;case 36:return 36;case 37:this.begin("string");break;case 39:return 34;case 40:return 31;case 41:return 54;case 42:return 8}},rules:[/^(?:%%\{)/i,/^(?:((?:(?!\}%%)[^:.])*))/i,/^(?::)/i,/^(?:\}%%)/i,/^(?:((?:(?!\}%%).|\n)*))/i,/^(?:accTitle\s*:\s*)/i,/^(?:(?!\n||)*[^\n]*)/i,/^(?:accDescr\s*:\s*)/i,/^(?:(?!\n||)*[^\n]*)/i,/^(?:accDescr\s*\{\s*)/i,/^(?:[\}])/i,/^(?:[^\}]*)/i,/^(?:(\r?\n)+)/i,/^(?:#[^\n]*)/i,/^(?:%[^\n]*)/i,/^(?:gitGraph\b)/i,/^(?:commit(?=\s|$))/i,/^(?:id:)/i,/^(?:type:)/i,/^(?:msg:)/i,/^(?:NORMAL\b)/i,/^(?:REVERSE\b)/i,/^(?:HIGHLIGHT\b)/i,/^(?:tag:)/i,/^(?:branch(?=\s|$))/i,/^(?:order:)/i,/^(?:merge(?=\s|$))/i,/^(?:cherry-pick(?=\s|$))/i,/^(?:checkout(?=\s|$))/i,/^(?:LR\b)/i,/^(?:BT\b)/i,/^(?::)/i,/^(?:\^)/i,/^(?:options\r?\n)/i,/^(?:[ \r\n\t]+end\b)/i,/^(?:[\s\S]+(?=[ \r\n\t]+end))/i,/^(?:["]["])/i,/^(?:["])/i,/^(?:["])/i,/^(?:[^"]*)/i,/^(?:[0-9]+(?=\s|$))/i,/^(?:\w([-\./\w]*[-\w])?)/i,/^(?:$)/i,/^(?:\s+)/i],conditions:{acc_descr_multiline:{rules:[10,11],inclusive:!1},acc_descr:{rules:[8],inclusive:!1},acc_title:{rules:[6],inclusive:!1},close_directive:{rules:[],inclusive:!1},arg_directive:{rules:[3,4],inclusive:!1},type_directive:{rules:[2,3],inclusive:!1},open_directive:{rules:[1],inclusive:!1},options:{rules:[34,35],inclusive:!1},string:{rules:[38,39],inclusive:!1},INITIAL:{rules:[0,5,7,9,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,37,40,41,42,43],inclusive:!0}}},x.prototype=$,$.Parser=x,new x}();s.parser=s;let n=(0,a.c)().gitGraph.mainBranchName,o=(0,a.c)().gitGraph.mainBranchOrder,l={},h=null,m={};m[n]={name:n,order:o};let u={};u[n]=h;let y=n,p="LR",d=0;function g(){return(0,a.y)({length:7})}let b={},f=function(e){if(void 0===u[e=(0,a.e).sanitizeText(e,(0,a.c)())]){let t=Error('Trying to checkout branch which is not yet created. (Help try using "branch '+e+'")');throw t.hash={text:"checkout "+e,token:"checkout "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"branch '+e+'"']},t}{y=e;let t=u[y];h=l[t]}};function k(e,t,r){let i=e.indexOf(t);-1===i?e.push(r):e.splice(i,1,r)}let _=function(){let e=Object.keys(l).map(function(e){return l[e]});return e.forEach(function(e){(0,a.l).debug(e.id)}),e.sort((e,t)=>e.seq-t.seq),e},$={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},x={parseDirective:function(e,t,r){(0,a.m).parseDirective(this,e,t,r)},getConfig:()=>(0,a.c)().gitGraph,setDirection:function(e){p=e},setOptions:function(e){(0,a.l).debug("options str",e),e=(e=e&&e.trim())||"{}";try{b=JSON.parse(e)}catch(e){(0,a.l).error("error while parsing gitGraph options",e.message)}},getOptions:function(){return b},commit:function(e,t,r,i){(0,a.l).debug("Entering commit:",e,t,r,i),t=(0,a.e).sanitizeText(t,(0,a.c)()),e=(0,a.e).sanitizeText(e,(0,a.c)()),i=(0,a.e).sanitizeText(i,(0,a.c)());let c={id:t||d+"-"+g(),message:e,seq:d++,type:r||$.NORMAL,tag:i||"",parents:null==h?[]:[h.id],branch:y};h=c,l[c.id]=c,u[y]=c.id,(0,a.l).debug("in pushCommit "+c.id)},branch:function(e,t){if(void 0===u[e=(0,a.e).sanitizeText(e,(0,a.c)())])u[e]=null!=h?h.id:null,m[e]={name:e,order:t?parseInt(t,10):null},f(e),(0,a.l).debug("in createBranch");else{let t=Error('Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout '+e+'")');throw t.hash={text:"branch "+e,token:"branch "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"checkout '+e+'"']},t}},merge:function(e,t,r,i){e=(0,a.e).sanitizeText(e,(0,a.c)()),t=(0,a.e).sanitizeText(t,(0,a.c)());let c=l[u[y]],s=l[u[e]];if(y===e){let t=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:"merge "+e,token:"merge "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch abc"]},t}if(void 0!==c&&c){if(void 0===u[e]){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:"merge "+e,token:"merge "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch "+e]},t}if(void 0!==s&&s){if(c===s){let t=Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:"merge "+e,token:"merge "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch abc"]},t}if(t&&void 0!==l[t]){let a=Error('Incorrect usage of "merge". Commit with id:'+t+" already exists, use different custom Id");throw a.hash={text:"merge "+e+t+r+i,token:"merge "+e+t+r+i,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["merge "+e+" "+t+"_UNIQUE "+r+" "+i]},a}}else{let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:"merge "+e,token:"merge "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"commit"']},t}}else{let t=Error('Incorrect usage of "merge". Current branch ('+y+")has no commits");throw t.hash={text:"merge "+e,token:"merge "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["commit"]},t}let n={id:t||d+"-"+g(),message:"merged branch "+e+" into "+y,seq:d++,parents:[null==h?null:h.id,u[e]],branch:y,type:$.MERGE,customType:r,customId:!!t,tag:i||""};h=n,l[n.id]=n,u[y]=n.id,(0,a.l).debug(u),(0,a.l).debug("in mergeBranch")},cherryPick:function(e,t,r){if((0,a.l).debug("Entering cherryPick:",e,t,r),e=(0,a.e).sanitizeText(e,(0,a.c)()),t=(0,a.e).sanitizeText(t,(0,a.c)()),r=(0,a.e).sanitizeText(r,(0,a.c)()),!e||void 0===l[e]){let r=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw r.hash={text:"cherryPick "+e+" "+t,token:"cherryPick "+e+" "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},r}let i=l[e],c=i.branch;if(i.type===$.MERGE){let r=Error('Incorrect usage of "cherryPick". Source commit should not be a merge commit');throw r.hash={text:"cherryPick "+e+" "+t,token:"cherryPick "+e+" "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},r}if(!t||void 0===l[t]){if(c===y){let r=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw r.hash={text:"cherryPick "+e+" "+t,token:"cherryPick "+e+" "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},r}let s=l[u[y]];if(void 0===s||!s){let r=Error('Incorrect usage of "cherry-pick". Current branch ('+y+")has no commits");throw r.hash={text:"cherryPick "+e+" "+t,token:"cherryPick "+e+" "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},r}let n={id:d+"-"+g(),message:"cherry-picked "+i+" into "+y,seq:d++,parents:[null==h?null:h.id,i.id],branch:y,type:$.CHERRY_PICK,tag:r??"cherry-pick:"+i.id};h=n,l[n.id]=n,u[y]=n.id,(0,a.l).debug(u),(0,a.l).debug("in cherryPick")}},checkout:f,//reset,
prettyPrint:function(){(0,a.l).debug(l);let e=_()[0];!function e(t){let r=t.reduce((e,t)=>e.seq>t.seq?e:t,t[0]),i="";t.forEach(function(e){e===r?i+="	*":i+="	|"});let c=[i,r.id,r.seq];for(let e in u)u[e]===r.id&&c.push(e);if((0,a.l).debug(c.join(" ")),r.parents&&2==r.parents.length){let e=l[r.parents[0]];k(t,r,e),t.push(l[r.parents[1]])}else{if(0==r.parents.length)return;let e=l[r.parents];k(t,r,e)}e(t=function(e,t){let r=/* @__PURE__ */Object.create(null);return e.reduce((e,i)=>{let a=t(i);return r[a]||(r[a]=!0,e.push(i)),e},[])}(t,e=>e.id))}([e])},clear:function(){l={},h=null;let e=(0,a.c)().gitGraph.mainBranchName,t=(0,a.c)().gitGraph.mainBranchOrder;(u={})[e]=null,(m={})[e]={name:e,order:t},y=e,d=0,(0,a.v)()},getBranchesAsObjArray:function(){let e=Object.values(m).map((e,t)=>null!==e.order?e:{...e,order:parseFloat(`0.${t}`,10)}).sort((e,t)=>e.order-t.order).map(({name:e})=>({name:e}));return e},getBranches:function(){return u},getCommits:function(){return l},getCommitsArray:_,getCurrentBranch:function(){return y},getDirection:function(){return p},getHead:function(){return h},setAccTitle:a.s,getAccTitle:a.g,getAccDescription:a.a,setAccDescription:a.b,setDiagramTitle:a.r,getDiagramTitle:a.t,commitType:$},v={},E={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},T={},w={},R=[],M=0,I=()=>{T={},w={},v={},M=0,R=[]},L=e=>{let t=document.createElementNS("http://www.w3.org/2000/svg","text");for(let r of"string"==typeof e?e.split(/\\n|\n|<br\s*\/?>/gi):Array.isArray(e)?e:[]){let e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=r.trim(),t.appendChild(e)}return t},O=(e,t,r)=>{let i=(0,a.z)().gitGraph,c=e.append("g").attr("class","commit-bullets"),s=e.append("g").attr("class","commit-labels"),n=0,o=Object.keys(t),l=o.sort((e,r)=>t[e].seq-t[r].seq);l.forEach(e=>{let a=t[e],o=T[a.branch].pos,l=n+10;if(r){let e;let t=void 0!==a.customType&&""!==a.customType?a.customType:a.type;switch(t){case E.NORMAL:e="commit-normal";break;case E.REVERSE:e="commit-reverse";break;case E.HIGHLIGHT:e="commit-highlight";break;case E.MERGE:e="commit-merge";break;case E.CHERRY_PICK:e="commit-cherry-pick";break;default:e="commit-normal"}if(t===E.HIGHLIGHT){let t=c.append("rect");t.attr("x",l-10),t.attr("y",o-10),t.attr("height",20),t.attr("width",20),t.attr("class",`commit ${a.id} commit-highlight${T[a.branch].index%8} ${e}-outer`),c.append("rect").attr("x",l-6).attr("y",o-6).attr("height",12).attr("width",12).attr("class",`commit ${a.id} commit${T[a.branch].index%8} ${e}-inner`)}else if(t===E.CHERRY_PICK)c.append("circle").attr("cx",l).attr("cy",o).attr("r",10).attr("class",`commit ${a.id} ${e}`),c.append("circle").attr("cx",l-3).attr("cy",o+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${a.id} ${e}`),c.append("circle").attr("cx",l+3).attr("cy",o+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${a.id} ${e}`),c.append("line").attr("x1",l+3).attr("y1",o+1).attr("x2",l).attr("y2",o-5).attr("stroke","#fff").attr("class",`commit ${a.id} ${e}`),c.append("line").attr("x1",l-3).attr("y1",o+1).attr("x2",l).attr("y2",o-5).attr("stroke","#fff").attr("class",`commit ${a.id} ${e}`);else{let r=c.append("circle");if(r.attr("cx",l),r.attr("cy",o),r.attr("r",a.type===E.MERGE?9:10),r.attr("class",`commit ${a.id} commit${T[a.branch].index%8}`),t===E.MERGE){let t=c.append("circle");t.attr("cx",l),t.attr("cy",o),t.attr("r",6),t.attr("class",`commit ${e} ${a.id} commit${T[a.branch].index%8}`)}if(t===E.REVERSE){let t=c.append("path");t.attr("d",`M ${l-5},${o-5}L${l+5},${o+5}M${l-5},${o+5}L${l+5},${o-5}`).attr("class",`commit ${e} ${a.id} commit${T[a.branch].index%8}`)}}}if(w[a.id]={x:n+10,y:o},r){if(a.type!==E.CHERRY_PICK&&(a.customId&&a.type===E.MERGE||a.type!==E.MERGE)&&i.showCommitLabel){let e=s.append("g"),t=e.insert("rect").attr("class","commit-label-bkg"),r=e.append("text").attr("x",n).attr("y",o+25).attr("class","commit-label").text(a.id),c=r.node().getBBox();if(t.attr("x",n+10-c.width/2-2).attr("y",o+13.5).attr("width",c.width+4).attr("height",c.height+4),r.attr("x",n+10-c.width/2),i.rotateCommitLabel){let t=-7.5-(c.width+10)/25*9.5,r=10+c.width/25*8.5;e.attr("transform","translate("+t+", "+r+") rotate(-45, "+n+", "+o+")")}}if(a.tag){let e=s.insert("polygon"),t=s.append("circle"),r=s.append("text").attr("y",o-16).attr("class","tag-label").text(a.tag),i=r.node().getBBox();r.attr("x",n+10-i.width/2);let c=i.height/2,l=o-19.2;e.attr("class","tag-label-bkg").attr("points",`
          ${n-i.width/2-2},${l+2}
          ${n-i.width/2-2},${l-2}
          ${n+10-i.width/2-4},${l-c-2}
          ${n+10+i.width/2+4},${l-c-2}
          ${n+10+i.width/2+4},${l+c+2}
          ${n+10-i.width/2-4},${l+c+2}`),t.attr("cx",n-i.width/2+2).attr("cy",l).attr("r",1.5).attr("class","tag-hole")}}(n+=50)>M&&(M=n)})},A=(e,t,r)=>{let i=Object.keys(r),a=i.filter(i=>r[i].branch===t.branch&&r[i].seq>e.seq&&r[i].seq<t.seq);return a.length>0},C=(e,t,r=0)=>{let i=e+Math.abs(e-t)/2;if(r>5)return i;if(R.every(e=>Math.abs(e-i)>=10))return R.push(i),i;let a=Math.abs(e-t);return C(e,t-a/5,r+1)},S=(e,t,r,i)=>{let a;let c=w[t.id],s=w[r.id],n=A(t,r,i),o="",l="",h=0,m=0,u=T[r.branch].index;if(n){o="A 10 10, 0, 0, 0,",l="A 10 10, 0, 0, 1,",h=10,m=10,u=T[r.branch].index;let e=c.y<s.y?C(c.y,s.y):C(s.y,c.y);a=c.y<s.y?`M ${c.x} ${c.y} L ${c.x} ${e-h} ${o} ${c.x+m} ${e} L ${s.x-h} ${e} ${l} ${s.x} ${e+m} L ${s.x} ${s.y}`:`M ${c.x} ${c.y} L ${c.x} ${e+h} ${l} ${c.x+m} ${e} L ${s.x-h} ${e} ${o} ${s.x} ${e-m} L ${s.x} ${s.y}`}else c.y<s.y&&(o="A 20 20, 0, 0, 0,",h=20,m=20,u=T[r.branch].index,a=`M ${c.x} ${c.y} L ${c.x} ${s.y-h} ${o} ${c.x+m} ${s.y} L ${s.x} ${s.y}`),c.y>s.y&&(o="A 20 20, 0, 0, 0,",h=20,m=20,u=T[t.branch].index,a=`M ${c.x} ${c.y} L ${s.x-h} ${c.y} ${o} ${s.x} ${c.y-m} L ${s.x} ${s.y}`),c.y===s.y&&(u=T[t.branch].index,a=`M ${c.x} ${c.y} L ${c.x} ${s.y-h} ${o} ${c.x+m} ${s.y} L ${s.x} ${s.y}`);e.append("path").attr("d",a).attr("class","arrow arrow"+u%8)},P=(e,t)=>{let r=e.append("g").attr("class","commit-arrows");Object.keys(t).forEach(e=>{let i=t[e];i.parents&&i.parents.length>0&&i.parents.forEach(e=>{S(r,t[e],i,t)})})},G=(e,t)=>{let r=(0,a.z)().gitGraph,i=e.append("g");t.forEach((e,t)=>{let a=t%8,c=T[e.name].pos,s=i.append("line");s.attr("x1",0),s.attr("y1",c),s.attr("x2",M),s.attr("y2",c),s.attr("class","branch branch"+a),R.push(c);let n=e.name,o=L(n),l=i.insert("rect"),h=i.insert("g").attr("class","branchLabel"),m=h.insert("g").attr("class","label branch-label"+a);m.node().appendChild(o);let u=o.getBBox();l.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-u.width-4-(!0===r.rotateCommitLabel?30:0)).attr("y",-u.height/2+8).attr("width",u.width+18).attr("height",u.height+4),m.attr("transform","translate("+(-u.width-14-(!0===r.rotateCommitLabel?30:0))+", "+(c-u.height/2-1)+")"),l.attr("transform","translate(-19, "+(c-u.height/2)+")")})},N={parser:s,db:x,renderer:{draw:function(e,t,r,i){I();let s=(0,a.z)(),n=s.gitGraph;(0,a.l).debug("in gitgraph renderer",e+"\n","id:",t,r),v=i.db.getCommits();let o=i.db.getBranchesAsObjArray(),l=0;o.forEach((e,t)=>{T[e.name]={pos:l,index:t},l+=50+(n.rotateCommitLabel?40:0)});let h=(0,c.select)(`[id="${t}"]`);O(h,v,!1),n.showBranches&&G(h,o),P(h,v),O(h,v,!0),(0,a.u).insertTitle(h,"gitTitleText",n.titleTopMargin,i.db.getDiagramTitle()),(0,a.A)(void 0,h,n.diagramPadding,n.useMaxWidth??s.useMaxWidth)}},styles:e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${e["git"+t]}; fill: ${e["git"+t]}; }
        .commit-highlight${t} { stroke: ${e["gitInv"+t]}; fill: ${e["gitInv"+t]}; }
        .label${t}  { fill: ${e["git"+t]}; }
        .arrow${t} { stroke: ${e["git"+t]}; }
        `).join("\n")}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`}},{"./mermaid-b0ad2de1.js":"42V0c",d3:"ahWNw","ts-dedent":"azOLv",dayjs:"8F3kd","@braintree/sanitize-url":"eIPUt",dompurify:"5cPaM",khroma:"kb6Zw","lodash-es/memoize.js":"kSZfU",stylis:"lfeQC","lodash-es/isEmpty.js":"941eg","@parcel/transformer-js/src/esmodule-helpers.js":"k3151"}]},[],null,"parcelRequire9da7")//# sourceMappingURL=gitGraphDiagram-1e960c50.b199612f.js.map
;
//# sourceMappingURL=gitGraphDiagram-1e960c50.b199612f.js.map
